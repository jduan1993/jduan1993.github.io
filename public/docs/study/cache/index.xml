<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>缓存 on 君宝的笔记</title>
    <link>http://localhost:1313/docs/study/cache/</link>
    <description>Recent content in 缓存 on 君宝的笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="http://localhost:1313/docs/study/cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>方案</title>
      <link>http://localhost:1313/docs/study/cache/solution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/cache/solution/</guid>
      <description>&lt;h2 id=&#34;-一常见缓存方案对比&#34;&gt;&#xD;&#xA;  ✅ 一、常见缓存方案对比&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%80%e5%b8%b8%e8%a7%81%e7%bc%93%e5%ad%98%e6%96%b9%e6%a1%88%e5%af%b9%e6%af%94&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缓存策略&lt;/th&gt;&#xA;          &lt;th&gt;特点&lt;/th&gt;&#xA;          &lt;th&gt;适合场景&lt;/th&gt;&#xA;          &lt;th&gt;优缺点&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Redis 集群&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;分布式内存数据库，支持多数据结构、持久化、分片&lt;/td&gt;&#xA;          &lt;td&gt;高频访问、分布式系统、跨服务缓存&lt;/td&gt;&#xA;          &lt;td&gt;✅ 功能强，支持过期策略、发布订阅、Lua 脚本&lt;br&gt;❌ 成本较高、复杂度较大&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Memcached&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;高性能 key-value 内存缓存，无持久化&lt;/td&gt;&#xA;          &lt;td&gt;简单 kv 缓存、大量读、无数据结构需求&lt;/td&gt;&#xA;          &lt;td&gt;✅ 速度快，轻量级&lt;br&gt;❌ 不支持复杂数据结构、数据易丢失&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;本地缓存（如 Guava Cache）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;服务进程内存缓存&lt;/td&gt;&#xA;          &lt;td&gt;热点数据、本地配置、小规模缓存&lt;/td&gt;&#xA;          &lt;td&gt;✅ 极快访问、无网络延迟&lt;br&gt;❌ 不共享、易过期不一致&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;CDN 缓存（如 Cloudflare、AWS CloudFront）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;基于 HTTP 静态文件缓存&lt;/td&gt;&#xA;          &lt;td&gt;图片、视频、前端静态资源&lt;/td&gt;&#xA;          &lt;td&gt;✅ 全球加速，用户端就近获取&lt;br&gt;❌ 不适用于动态数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-二如何选择最终方案&#34;&gt;&#xD;&#xA;  ✅ 二、如何选择最终方案？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%a6%82%e4%bd%95%e9%80%89%e6%8b%a9%e6%9c%80%e7%bb%88%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;选择缓存方案的依据，通常围绕 &lt;strong&gt;一致性需求 + 热点程度 + 成本 + 技术复杂度&lt;/strong&gt; 这几方面展开。&lt;/p&gt;&#xA;&lt;h3 id=&#34;示例某-saas-平台接口缓存选择路径&#34;&gt;&#xD;&#xA;  示例：某 SaaS 平台接口缓存选择路径&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a4%ba%e4%be%8b%e6%9f%90-saas-%e5%b9%b3%e5%8f%b0%e6%8e%a5%e5%8f%a3%e7%bc%93%e5%ad%98%e9%80%89%e6%8b%a9%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;选项&lt;/th&gt;&#xA;          &lt;th&gt;原因&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❌ 本地缓存&lt;/td&gt;&#xA;          &lt;td&gt;数据在多服务实例间不共享，不适用于高一致性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❌ Memcached&lt;/td&gt;&#xA;          &lt;td&gt;不支持持久化、集群化不方便，数据结构能力弱&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ Redis 集群&lt;/td&gt;&#xA;          &lt;td&gt;支持 key 过期、LRU 淘汰策略、支持分布式部署，可支撑高并发&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ CDN（搭配使用）&lt;/td&gt;&#xA;          &lt;td&gt;用于前端静态资源、公共 API GET 缓存，减轻后端压力&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;最终方案：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
