<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中间件 on 君宝的笔记</title>
    <link>http://localhost:1313/docs/study/middleware/</link>
    <description>Recent content in 中间件 on 君宝的笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="http://localhost:1313/docs/study/middleware/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Netty 详解</title>
      <link>http://localhost:1313/docs/study/middleware/netty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/middleware/netty/</guid>
      <description>&lt;h2 id=&#34;1-netty-简介&#34;&gt;&#xD;&#xA;  1. Netty 简介&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-netty-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Netty 是一个基于 Java 的异步事件驱动网络应用框架，简化了网络通信程序的开发。它提供高性能、高可靠性的异步网络通信能力，支持多种协议，广泛应用于分布式系统、高性能服务器、RPC 框架等场景。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-netty-架构与核心组件&#34;&gt;&#xD;&#xA;  2. Netty 架构与核心组件&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-netty-%e6%9e%b6%e6%9e%84%e4%b8%8e%e6%a0%b8%e5%bf%83%e7%bb%84%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;21-线程模型&#34;&gt;&#xD;&#xA;  2.1 线程模型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%ba%bf%e7%a8%8b%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;EventLoopGroup&lt;/strong&gt;：线程组，管理一组 EventLoop。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;EventLoop&lt;/strong&gt;：负责处理 Channel 的所有 I/O 操作，单线程处理多个 Channel，避免多线程同步开销。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通常服务端有两组线程池：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;BossGroup&lt;/strong&gt;：负责接受新连接。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;WorkerGroup&lt;/strong&gt;：负责处理连接读写。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-channel&#34;&gt;&#xD;&#xA;  2.2 Channel&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-channel&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;表示一个网络连接，封装了底层的 Socket 通道。&#xA;常用实现有：&lt;code&gt;NioSocketChannel&lt;/code&gt;（基于 NIO），&lt;code&gt;EpollSocketChannel&lt;/code&gt;（Linux epoll），&lt;code&gt;OioSocketChannel&lt;/code&gt;（阻塞 I/O）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;23-channelpipeline-与-channelhandler&#34;&gt;&#xD;&#xA;  2.3 ChannelPipeline 与 ChannelHandler&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-channelpipeline-%e4%b8%8e-channelhandler&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ChannelPipeline&lt;/strong&gt;：相当于责任链，保存一系列 ChannelHandler。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ChannelHandler&lt;/strong&gt;：处理 I/O 事件和数据，分为入站（Inbound）和出站（Outbound）两种。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;消息流经 ChannelPipeline 依次传递给 ChannelHandler 进行处理，支持解码、编码、业务逻辑等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;24-future-与-promise&#34;&gt;&#xD;&#xA;  2.4 Future 与 Promise&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-future-%e4%b8%8e-promise&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ChannelFuture&lt;/strong&gt;：异步操作结果的表示，所有 I/O 操作均异步返回 ChannelFuture。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Promise&lt;/strong&gt;：可以写入结果的 Future，便于异步操作结果通知。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-netty-工作流程&#34;&gt;&#xD;&#xA;  3. Netty 工作流程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-netty-%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;启动 ServerBootstrap&lt;/strong&gt;，绑定端口。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;BossGroup 监听客户端连接&lt;/strong&gt;，收到连接后注册到 WorkerGroup 的 EventLoop。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;WorkerGroup 负责 I/O 读写事件&lt;/strong&gt;，触发 ChannelPipeline 中对应的 Handler。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据处理&lt;/strong&gt;：数据从网络读入 ByteBuf，经过解码器转为业务消息，业务 Handler 处理后编码返回 ByteBuf 写回客户端。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步操作&lt;/strong&gt;：所有 I/O 操作均非阻塞，调用后立即返回 ChannelFuture，完成时触发监听器。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;4-关键特性&#34;&gt;&#xD;&#xA;  4. 关键特性&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e5%85%b3%e9%94%ae%e7%89%b9%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步非阻塞&lt;/strong&gt;：基于 Java NIO，提升高并发场景性能。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;零拷贝&lt;/strong&gt;：通过 ByteBuf 实现零拷贝内存管理，减少 GC 压力。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高度可定制&lt;/strong&gt;：支持自定义协议编解码、各种传输协议。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;事件驱动&lt;/strong&gt;：支持丰富事件回调，便于扩展。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;跨平台支持&lt;/strong&gt;：支持 NIO、EPOLL、KQueue 等多种 I/O 模型。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;5-常用模块&#34;&gt;&#xD;&#xA;  5. 常用模块&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e5%b8%b8%e7%94%a8%e6%a8%a1%e5%9d%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ByteBuf&lt;/strong&gt;：高性能的缓冲区，替代 Java NIO ByteBuffer。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Codec&lt;/strong&gt;：编解码器，如 &lt;code&gt;StringDecoder&lt;/code&gt;、&lt;code&gt;ProtobufDecoder&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Handler&lt;/strong&gt;：业务逻辑处理。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Bootstrap / ServerBootstrap&lt;/strong&gt;：客户端和服务端启动类。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;6-使用场景举例&#34;&gt;&#xD;&#xA;  6. 使用场景举例&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af%e4%b8%be%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高性能聊天系统（IM）&lt;/li&gt;&#xA;&lt;li&gt;分布式 RPC 框架（Dubbo 等）&lt;/li&gt;&#xA;&lt;li&gt;实时游戏服务器&lt;/li&gt;&#xA;&lt;li&gt;高并发 HTTP/2 和 WebSocket 服务&lt;/li&gt;&#xA;&lt;li&gt;自定义协议通信服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;7-简单示例&#34;&gt;&#xD;&#xA;  7. 简单示例&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7-%e7%ae%80%e5%8d%95%e7%a4%ba%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoServer&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EventLoopGroup bossGroup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NioEventLoopGroup(1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EventLoopGroup workerGroup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NioEventLoopGroup();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ServerBootstrap b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ServerBootstrap();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            b.&lt;span style=&#34;color:#a6e22e&#34;&gt;group&lt;/span&gt;(bossGroup, workerGroup)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             .&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;(NioServerSocketChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             .&lt;span style=&#34;color:#a6e22e&#34;&gt;childHandler&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ChannelInitializer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SocketChannel&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initChannel&lt;/span&gt;(SocketChannel ch) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     ChannelPipeline pipeline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ch.&lt;span style=&#34;color:#a6e22e&#34;&gt;pipeline&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     pipeline.&lt;span style=&#34;color:#a6e22e&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringDecoder());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     pipeline.&lt;span style=&#34;color:#a6e22e&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringEncoder());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     pipeline.&lt;span style=&#34;color:#a6e22e&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SimpleChannelInboundHandler&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;channelRead0&lt;/span&gt;(ChannelHandlerContext ctx, String msg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; msg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             ctx.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeAndFlush&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Echo: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; msg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ChannelFuture f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(8080).&lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f.&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;closeFuture&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            bossGroup.&lt;span style=&#34;color:#a6e22e&#34;&gt;shutdownGracefully&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            workerGroup.&lt;span style=&#34;color:#a6e22e&#34;&gt;shutdownGracefully&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;</description>
    </item>
  </channel>
</rss>
