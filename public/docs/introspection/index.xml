<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自省 on 君宝的笔记</title>
    <link>http://localhost:1313/docs/introspection/</link>
    <description>Recent content in 自省 on 君宝的笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="http://localhost:1313/docs/introspection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java.util.concurrent 包</title>
      <link>http://localhost:1313/docs/introspection/juc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/introspection/juc/</guid>
      <description>&lt;p&gt;Java 中的 &lt;strong&gt;JUC（java.util.concurrent）&lt;/strong&gt; 是并发编程的核心包，提供了大量强大、高性能的工具类来简化线程操作和并发控制。&lt;/p&gt;&#xA;&lt;p&gt;下面是对 JUC 中&lt;strong&gt;最常用类和接口的详细分类与解析&lt;/strong&gt;，帮助你构建对 Java 并发编程的完整认识。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-一juc-核心模块总览&#34;&gt;&#xD;&#xA;  🌳 一、JUC 核心模块总览&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%80juc-%e6%a0%b8%e5%bf%83%e6%a8%a1%e5%9d%97%e6%80%bb%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java.util.concurrent.*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Executor 框架（线程池）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 同步器（Locks、CountDownLatch、Semaphore、CyclicBarrier）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 并发集合（ConcurrentHashMap、CopyOnWriteArrayList 等）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 原子变量（AtomicXXX）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Fork/Join 框架&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── CompletableFuture、Future&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── ScheduledExecutor、BlockingQueue 等&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-二executor-框架线程池相关&#34;&gt;&#xD;&#xA;  🚀 二、Executor 框架（线程池相关）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8cexecutor-%e6%a1%86%e6%9e%b6%e7%ba%bf%e7%a8%8b%e6%b1%a0%e7%9b%b8%e5%85%b3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;类/接口&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;最基础的接口，只有一个方法 &lt;code&gt;execute(Runnable)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;提供 &lt;code&gt;submit()&lt;/code&gt;、&lt;code&gt;shutdown()&lt;/code&gt; 等高级控制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;可自定义线程池参数的核心实现类&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ScheduledExecutorService&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;支持定时或周期任务执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;工厂类，提供常用线程池的创建方法（如 &lt;code&gt;newFixedThreadPool()&lt;/code&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;-推荐使用方式&#34;&gt;&#xD;&#xA;  ☑️ 推荐使用方式&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%8e%a8%e8%8d%90%e4%bd%bf%e7%94%a8%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;避免 &lt;code&gt;Executors.newXxx()&lt;/code&gt; 静态方法，建议自己构造 &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ExecutorService pool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ThreadPoolExecutor(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    4, 8, 60, TimeUnit.&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedBlockingQueue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(100)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-三同步器lock信号量栅栏等&#34;&gt;&#xD;&#xA;  🧱 三、同步器（Lock、信号量、栅栏等）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%89%e5%90%8c%e6%ad%a5%e5%99%a8lock%e4%bf%a1%e5%8f%b7%e9%87%8f%e6%a0%85%e6%a0%8f%e7%ad%89&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-lockcondition&#34;&gt;&#xD;&#xA;  1. Lock/Condition&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-lockcondition&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;类/接口&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;比 &lt;code&gt;synchronized&lt;/code&gt; 更灵活，支持中断、非阻塞获取&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;可重入锁，支持公平/非公平锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ReadWriteLock&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;读写分离，提高并发性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;类似 &lt;code&gt;Object.wait/notify&lt;/code&gt;，配合 Lock 使用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
