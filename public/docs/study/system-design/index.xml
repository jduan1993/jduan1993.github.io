<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>系统设计 on 君宝的笔记</title>
    <link>http://localhost:1313/docs/study/system-design/</link>
    <description>Recent content in 系统设计 on 君宝的笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="http://localhost:1313/docs/study/system-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>系统设计</title>
      <link>http://localhost:1313/docs/study/system-design/system-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/system-design/</guid>
      <description>&lt;h3 id=&#34;要求&#34;&gt;&#xD;&#xA;  要求&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a6%81%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;1-分布式可扩展&#34;&gt;&#xD;&#xA;  1. 分布式、可扩展。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%88%86%e5%b8%83%e5%bc%8f%e5%8f%af%e6%89%a9%e5%b1%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式：微服务、异步通信、分布式缓存、K8s&lt;/li&gt;&#xA;&lt;li&gt;可扩展：HPA、分库分表、K8s DNS Service、多AZ、多国家&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-用户可搜索可预约可重新安排可取消基于医生的位置专科可用时间&#34;&gt;&#xD;&#xA;  2. 用户可搜索、可预约、可重新安排、可取消，基于医生的位置、专科、可用时间。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e7%94%a8%e6%88%b7%e5%8f%af%e6%90%9c%e7%b4%a2%e5%8f%af%e9%a2%84%e7%ba%a6%e5%8f%af%e9%87%8d%e6%96%b0%e5%ae%89%e6%8e%92%e5%8f%af%e5%8f%96%e6%b6%88%e5%9f%ba%e4%ba%8e%e5%8c%bb%e7%94%9f%e7%9a%84%e4%bd%8d%e7%bd%ae%e4%b8%93%e7%a7%91%e5%8f%af%e7%94%a8%e6%97%b6%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;h5 id=&#34;搜索&#34;&gt;&#xD;&#xA;  搜索&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cache Aside，Invalidate when Booking and Cancellation (TTL ~ minutes)&lt;/li&gt;&#xA;&lt;li&gt;Caffeine 异步延迟双删&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;权衡&#34;&gt;&#xD;&#xA;  权衡&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e8%a1%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h6&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;优点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;⚡ 高吞吐&lt;/td&gt;&#xA;          &lt;td&gt;Redis 命中率高，支持 QPS &amp;gt; 1000+&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;⏱️ 低延迟&lt;/td&gt;&#xA;          &lt;td&gt;单医生查询 latency ≈ 几 ms&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 写后无读&lt;/td&gt;&#xA;          &lt;td&gt;Slot 数据预生成、写入后只读，适合缓存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🔁 异步更新&lt;/td&gt;&#xA;          &lt;td&gt;Cache 由 Kafka 驱动异步更新，无需强一致性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缺点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🕒 数据轻微不一致&lt;/td&gt;&#xA;          &lt;td&gt;TTL 失效期间可能展示已被预约的 slot（在 Booking 阶段兜底）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🧠 Cache Invalidate 复杂&lt;/td&gt;&#xA;          &lt;td&gt;多服务写入 slot 状态需保证正确清除 Redis 缓存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;📦 大量 slot&lt;/td&gt;&#xA;          &lt;td&gt;Redis 内存占用需控制（可做分片 or 使用 Redis Cluster）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h5 id=&#34;预约&#34;&gt;&#xD;&#xA;  预约&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a2%84%e7%ba%a6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redlock 加锁 (TTL ~ seconds)&lt;/li&gt;&#xA;&lt;li&gt;加入 Request ID 作为唯一性约束&lt;/li&gt;&#xA;&lt;li&gt;数据库悲观锁（Pessimistic Lock）双检&lt;/li&gt;&#xA;&lt;li&gt;插入预约（Appointment）&lt;/li&gt;&#xA;&lt;li&gt;发布 AppointmentCreated 到 Kafka&lt;/li&gt;&#xA;&lt;li&gt;释放锁（Unlock）&lt;/li&gt;&#xA;&lt;li&gt;响应客户端&lt;/li&gt;&#xA;&lt;li&gt;消费者（Search Service）Cache Invalidation&lt;/li&gt;&#xA;&lt;li&gt;消费者（Notification Service）发送消息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;权衡-1&#34;&gt;&#xD;&#xA;  权衡&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e8%a1%a1-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h6&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;优点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 高一致性保障&lt;/td&gt;&#xA;          &lt;td&gt;锁+事务双重保证&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 幂等设计&lt;/td&gt;&#xA;          &lt;td&gt;防止重复预约&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 可观测性强&lt;/td&gt;&#xA;          &lt;td&gt;Kafka 推送事件用于追踪链路&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 异步解耦&lt;/td&gt;&#xA;          &lt;td&gt;非核心逻辑（通知、缓存）不影响主流程性能&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缺点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ Redis 不可用&lt;/td&gt;&#xA;          &lt;td&gt;Redlock 依赖 Redis，可引入降级机制（fallback DB lock）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ 高并发下延迟&lt;/td&gt;&#xA;          &lt;td&gt;拥塞在热点 slot（比如热门医生）可用队列排队缓解&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ 事务复杂性&lt;/td&gt;&#xA;          &lt;td&gt;需细致处理锁释放和回滚，避免死锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h5 id=&#34;重新安排&#34;&gt;&#xD;&#xA;  重新安排&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%87%8d%e6%96%b0%e5%ae%89%e6%8e%92&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redlock加锁 (TTL ~ seconds)&lt;/li&gt;&#xA;&lt;li&gt;数据库悲观锁（Pessimistic Lock）双检&lt;/li&gt;&#xA;&lt;li&gt;校验修改旧预约，插入新预约&lt;/li&gt;&#xA;&lt;li&gt;发布 AppointmentRescheduled 到 Kafka&lt;/li&gt;&#xA;&lt;li&gt;释放锁（Unlock）&lt;/li&gt;&#xA;&lt;li&gt;响应客户端&lt;/li&gt;&#xA;&lt;li&gt;消费者（Search Service）Cache Invalidation&lt;/li&gt;&#xA;&lt;li&gt;消费者（Notification Service）发送消息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;权衡-2&#34;&gt;&#xD;&#xA;  权衡&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e8%a1%a1-2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h6&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;优点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 一致性保障&lt;/td&gt;&#xA;          &lt;td&gt;事务更新 + 幂等控制，避免错约/重复约&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 双 slot 安全管理&lt;/td&gt;&#xA;          &lt;td&gt;显式释放旧 slot、锁定新 slot&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 解耦逻辑&lt;/td&gt;&#xA;          &lt;td&gt;Kafka 用于通知与缓存刷新，主流程不阻塞&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缺点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ 新旧 slot 状态切换逻辑复杂&lt;/td&gt;&#xA;          &lt;td&gt;需要明确状态流转模型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ Redis 不可用影响锁&lt;/td&gt;&#xA;          &lt;td&gt;降级 fallback：数据库悲观锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ 用户误操作可能导致重复 reschedule&lt;/td&gt;&#xA;          &lt;td&gt;需限制频率，增强幂等性保障&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h5 id=&#34;取消&#34;&gt;&#xD;&#xA;  取消&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%96%e6%b6%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redlock加锁 (TTL ~ seconds)&lt;/li&gt;&#xA;&lt;li&gt;数据库悲观锁（Pessimistic Lock）双检&lt;/li&gt;&#xA;&lt;li&gt;校验修改旧预约&lt;/li&gt;&#xA;&lt;li&gt;发布 AppointmentCanceled 到 Kafka&lt;/li&gt;&#xA;&lt;li&gt;释放锁（Unlock）&lt;/li&gt;&#xA;&lt;li&gt;响应客户端&lt;/li&gt;&#xA;&lt;li&gt;消费者（Search Service）Cache Invalidation&lt;/li&gt;&#xA;&lt;li&gt;消费者（Notification Service）发送消息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;权衡-3&#34;&gt;&#xD;&#xA;  权衡&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e8%a1%a1-3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h6&gt;&#xD;&#xA;&lt;h4 id=&#34;3-服务5000万用户50万医生每秒700次搜索每秒90次预约&#34;&gt;&#xD;&#xA;  3. 服务5000万用户，50万医生，每秒700次搜索，每秒90次预约。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e6%9c%8d%e5%8a%a15000%e4%b8%87%e7%94%a8%e6%88%b750%e4%b8%87%e5%8c%bb%e7%94%9f%e6%af%8f%e7%a7%92700%e6%ac%a1%e6%90%9c%e7%b4%a2%e6%af%8f%e7%a7%9290%e6%ac%a1%e9%a2%84%e7%ba%a6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;h4 id=&#34;4-轻松拓展新地区&#34;&gt;&#xD;&#xA;  4. 轻松拓展新地区。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e8%bd%bb%e6%9d%be%e6%8b%93%e5%b1%95%e6%96%b0%e5%9c%b0%e5%8c%ba&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;配置层面隔离（Spring Cloud Config）&lt;/li&gt;&#xA;&lt;li&gt;数据库分库（Date Partitioning）&lt;/li&gt;&#xA;&lt;li&gt;通用服务（Common Services）和差异化定制（Custom Services）&lt;/li&gt;&#xA;&lt;li&gt;API设计（/fr, /de）&lt;/li&gt;&#xA;&lt;li&gt;多租户部署（namespace）&lt;/li&gt;&#xA;&lt;li&gt;日志标签（Label）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;5-要考虑服务之间的扩展性容错性数据一致性&#34;&gt;&#xD;&#xA;  5. 要考虑服务之间的扩展性，容错性，数据一致性。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e8%a6%81%e8%80%83%e8%99%91%e6%9c%8d%e5%8a%a1%e4%b9%8b%e9%97%b4%e7%9a%84%e6%89%a9%e5%b1%95%e6%80%a7%e5%ae%b9%e9%94%99%e6%80%a7%e6%95%b0%e6%8d%ae%e4%b8%80%e8%87%b4%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;扩展性：HPA，Ingress Controller，Redis Cluster Slot，Kafka Brokers Partition, Database Sharding&lt;/li&gt;&#xA;&lt;li&gt;容错性：Service Mesh，多AZ，Redis Redlock，Kafka&lt;/li&gt;&#xA;&lt;li&gt;最终一致性：数据库事务，Redis Redlock，SAGA Pattern，异步消息（Async Message），重试（Retry），死信队列（Dead Letter Queue），缓存失效（Cache Invalidation），事件监听（Event-driven Monitoring）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;问题&#34;&gt;&#xD;&#xA;  问题&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;1-搜索前search需要经过鉴权authorization吗&#34;&gt;&#xD;&#xA;  1. 搜索前（Search）需要经过鉴权（Authorization）吗？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%90%9c%e7%b4%a2%e5%89%8dsearch%e9%9c%80%e8%a6%81%e7%bb%8f%e8%bf%87%e9%89%b4%e6%9d%83authorization%e5%90%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;如果不需要：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Doctolib 大纲</title>
      <link>http://localhost:1313/docs/study/system-design/doctolib-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/doctolib-tips/</guid>
      <description>&lt;h3 id=&#34;用途&#34;&gt;&#xD;&#xA;  用途&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e9%80%94&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;1-api-gateway&#34;&gt;&#xD;&#xA;  1. API Gateway&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-api-gateway&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;身份验证（Authentication &amp;amp; Authorization）&lt;/li&gt;&#xA;&lt;li&gt;速率限制（Rate Limit）&lt;/li&gt;&#xA;&lt;li&gt;请求跟踪（Request Tracing）&lt;/li&gt;&#xA;&lt;li&gt;熔断（Circuit Breaking）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-search-service&#34;&gt;&#xD;&#xA;  2. Search Service&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-search-service&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis + Database搜索&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;3-booking-service&#34;&gt;&#xD;&#xA;  3. Booking Service&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-booking-service&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis Redlock，时段级锁定（Slot-level Locking），数据库事务（Transaction）&lt;/li&gt;&#xA;&lt;li&gt;Idempotency，Request ID&lt;/li&gt;&#xA;&lt;li&gt;发布到Kafka进行缓存失效和通知&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;预约流程&#34;&gt;&#xD;&#xA;  预约流程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a2%84%e7%ba%a6%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redlock加锁&lt;/li&gt;&#xA;&lt;li&gt;数据库悲观锁（Pessimistic Lock）双检&lt;/li&gt;&#xA;&lt;li&gt;插入预约（Appointment），加入Request ID作为唯一性约束&lt;/li&gt;&#xA;&lt;li&gt;发布AppointmentCreated到Kafka&lt;/li&gt;&#xA;&lt;li&gt;释放锁（Unlock）&lt;/li&gt;&#xA;&lt;li&gt;响应客户端&lt;/li&gt;&#xA;&lt;li&gt;消费者（Search Service）Cache Invalidation&lt;/li&gt;&#xA;&lt;li&gt;消费者（Notification Service）发送消息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;4-database&#34;&gt;&#xD;&#xA;  4. Database&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-database&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据库分区（Partition by country or Doctor‘s ID）&lt;/li&gt;&#xA;&lt;li&gt;消息总线（Message Bus），用于解耦预约和缓存失效和通知&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;5-notification-service&#34;&gt;&#xD;&#xA;  5. Notification Service&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-notification-service&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Email Service or SMS Service （Sendgrid &amp;amp; Twilio）&lt;/li&gt;&#xA;&lt;li&gt;In-app notification （Firebase etc.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;扩展&#34;&gt;&#xD;&#xA;  扩展&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%89%a9%e5%b1%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;根据CPU，Memory等进行横向拓展（Horizontal Pod Autoscaler）&lt;/li&gt;&#xA;&lt;li&gt;redis分片&lt;/li&gt;&#xA;&lt;li&gt;数据库读写分离（Read-Write Separation）&lt;/li&gt;&#xA;&lt;li&gt;数据库分区（Partition）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;容错&#34;&gt;&#xD;&#xA;  容错&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%b9%e9%94%99&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;熔断（Circuit Breaker， Resilience4j）&lt;/li&gt;&#xA;&lt;li&gt;健康检查（Health Checks）&lt;/li&gt;&#xA;&lt;li&gt;自我修复（Self-Healing）&lt;/li&gt;&#xA;&lt;li&gt;告警（Alert）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;安全&#34;&gt;&#xD;&#xA;  安全&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%89%e5%85%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;端到端TLS&lt;/li&gt;&#xA;&lt;li&gt;OAuth2登录&lt;/li&gt;&#xA;&lt;li&gt;Rate Limit&lt;/li&gt;&#xA;&lt;li&gt;Logging&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;面试表述&#34;&gt;&#xD;&#xA;  面试表述&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e8%a1%a8%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;负载均衡和熔断限流在哪里做不在gateway做吗&#34;&gt;&#xD;&#xA;  负载均衡和熔断限流在哪里做，不在gateway做吗？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e5%92%8c%e7%86%94%e6%96%ad%e9%99%90%e6%b5%81%e5%9c%a8%e5%93%aa%e9%87%8c%e5%81%9a%e4%b8%8d%e5%9c%a8gateway%e5%81%9a%e5%90%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;“我们在 Gateway 层做外部限流和初级熔断，用云厂商 LB + Ingress/Gateway 控制边缘流量；在 服务内部，客户端用 Ribbon 或 Envoy 做调用负载均衡，用 Resilience4j 做熔断和限流保护下游；在 平台侧，Kubernetes Service 负责 Pod 级别均衡，若引入 Service Mesh，则 Envoy sidecar 可做更细粒度的 LB、熔断、限流、流量镜像等高级功能。这样多层协同，既保护了下游服务，也保证了全链路的高可用和可控性。”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;k8s中推荐用什么方式做用户侧调用和服务间调用的负载均衡限流熔断&#34;&gt;&#xD;&#xA;  k8s中推荐用什么方式做用户侧调用和服务间调用的负载均衡、限流、熔断？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#k8s%e4%b8%ad%e6%8e%a8%e8%8d%90%e7%94%a8%e4%bb%80%e4%b9%88%e6%96%b9%e5%bc%8f%e5%81%9a%e7%94%a8%e6%88%b7%e4%be%a7%e8%b0%83%e7%94%a8%e5%92%8c%e6%9c%8d%e5%8a%a1%e9%97%b4%e8%b0%83%e7%94%a8%e7%9a%84%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e9%99%90%e6%b5%81%e7%86%94%e6%96%ad&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;“在边缘我们用云端 LB + Ingress 或 Envoy-based Gateway 做外部负载均衡和限流，可选性强且搭配插件化熔断；在服务内部调用层面，推荐用 Service Mesh（Envoy Sidecar）来透明做服务发现、客户端负载均衡、网络限流和熔断，代码层面再用 Resilience4j 对关键依赖做二次保护。”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;k8s需要做注册中心集群吗&#34;&gt;&#xD;&#xA;  k8s需要做注册中心集群吗？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#k8s%e9%9c%80%e8%a6%81%e5%81%9a%e6%b3%a8%e5%86%8c%e4%b8%ad%e5%bf%83%e9%9b%86%e7%be%a4%e5%90%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;“在 Kubernetes 中，API Server + etcd + kube-proxy 本身就构成了高可用的服务注册与发现体系，我们只需创建 Service 资源，K8s 自动维护 Endpoints 并做 DNS/负载均衡。除非有跨集群或必须用 Spring Cloud Netflix 生态的遗留需求，否则不再额外部署注册中心集群，这样能简化架构并利用 K8s 的原生 HA 能力。”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;待解决问题&#34;&gt;&#xD;&#xA;  待解决问题&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%be%85%e8%a7%a3%e5%86%b3%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;如果快速将服务扩展到其他国家&#34;&gt;&#xD;&#xA;  如果快速将服务扩展到其他国家？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e6%9e%9c%e5%bf%ab%e9%80%9f%e5%b0%86%e6%9c%8d%e5%8a%a1%e6%89%a9%e5%b1%95%e5%88%b0%e5%85%b6%e4%bb%96%e5%9b%bd%e5%ae%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;h5 id=&#34;1-目标拆解支持多国家的能力需求&#34;&gt;&#xD;&#xA;  1. 目标拆解：支持多国家的能力需求&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e7%9b%ae%e6%a0%87%e6%8b%86%e8%a7%a3%e6%94%af%e6%8c%81%e5%a4%9a%e5%9b%bd%e5%ae%b6%e7%9a%84%e8%83%bd%e5%8a%9b%e9%9c%80%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;维度&lt;/th&gt;&#xA;          &lt;th&gt;要求说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🏛 数据隔离&lt;/td&gt;&#xA;          &lt;td&gt;每个国家业务数据逻辑隔离（合规/监管要求）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🌐 业务配置差异&lt;/td&gt;&#xA;          &lt;td&gt;国家A/B 的工作日、货币、语言、时间等不同&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🧰 服务逻辑差异&lt;/td&gt;&#xA;          &lt;td&gt;部分微服务逻辑可能略有差异&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🚀 快速部署&lt;/td&gt;&#xA;          &lt;td&gt;新国家上线不需大改动，支持可配置部署&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🔐 合规安全&lt;/td&gt;&#xA;          &lt;td&gt;数据主权（Data Residency）遵守各国法规&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h5 id=&#34;2-配置驱动的多国家支持&#34;&gt;&#xD;&#xA;  2. 配置驱动的多国家支持&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%85%8d%e7%bd%ae%e9%a9%b1%e5%8a%a8%e7%9a%84%e5%a4%9a%e5%9b%bd%e5%ae%b6%e6%94%af%e6%8c%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;方法&lt;/th&gt;&#xA;          &lt;th&gt;实现&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;配置中心&lt;/td&gt;&#xA;          &lt;td&gt;每个国家一份配置，如 &lt;code&gt;config_fr.yaml&lt;/code&gt;, &lt;code&gt;config_de.yaml&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;通过配置注入&lt;/td&gt;&#xA;          &lt;td&gt;控制：开放时间段、货币、支持语言、特殊逻辑开关&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;多租户标识（Tenant ID）&lt;/td&gt;&#xA;          &lt;td&gt;请求中传入国家 ID (&lt;code&gt;X-Country: FR&lt;/code&gt;)，统一识别&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Doctolib 系统设计</title>
      <link>http://localhost:1313/docs/study/system-design/doctolib-system-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/doctolib-system-design/</guid>
      <description>&lt;p&gt;以下给出一个面向生产环境、可扩展且高可用的微服务架构设计方案，重点关注“患者搜索与预约”这一日历（Calendar）功能的重构。方案会针对各子系统划分、技术选型、可扩展性、容错、数据一致性、多区域部署等方面进行说明，并针对每个组件选用的语言或技术做出理由说明。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-非功能需求与业务规模&#34;&gt;&#xD;&#xA;  1. 非功能需求与业务规模&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%9d%9e%e5%8a%9f%e8%83%bd%e9%9c%80%e6%b1%82%e4%b8%8e%e4%b8%9a%e5%8a%a1%e8%a7%84%e6%a8%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;规模要求&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;患者数量：50M&lt;/li&gt;&#xA;&lt;li&gt;从业者数量：500K&lt;/li&gt;&#xA;&lt;li&gt;并发搜索：700 次/秒&lt;/li&gt;&#xA;&lt;li&gt;并发预约（booking）：90 次/秒&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持快速上线新国家/地区&lt;/li&gt;&#xA;&lt;li&gt;支持水平扩展（水平扩容实例）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;高可用、容错、降级&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单点故障需避免&lt;/li&gt;&#xA;&lt;li&gt;任一组件出故障时，应保证核心功能（如查询缓存、只读搜索）尽可能可用，写操作可做限流或降级提示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;数据一致性&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;预约（Booking）流程需强一致或可接受的约束下的弱一致（依实践设计），但冲突需被正确检测并妥善处理。&lt;/li&gt;&#xA;&lt;li&gt;搜索结果可采用近实时（Eventual Consistency）方式更新。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;响应时延&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;搜索响应：百毫秒级&lt;/li&gt;&#xA;&lt;li&gt;预约确认：次秒级体验&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全与合规&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;涉及医疗数据或个人信息，需符合相关法规（如 GDPR、HIPAA 等，视具体国家要求）&lt;/li&gt;&#xA;&lt;li&gt;传输加密（TLS），存储加密，细粒度权限控制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;可观察性&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全链路追踪、日志、指标监控、告警&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;自动化运维 / CI/CD&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于容器化与基础设施即代码（IaC），实现流水线自动化部署、滚动升级、灰度发布&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-总体架构概览&#34;&gt;&#xD;&#xA;  2. 总体架构概览&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e6%80%bb%e4%bd%93%e6%9e%b6%e6%9e%84%e6%a6%82%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;采用微服务架构 + API Gateway + 服务网格（可选） + 多区域部署 + 弹性伸缩。核心组件：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;API Gateway&lt;/strong&gt;：统一入口，做认证鉴权、限流、路由。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Auth 服务&lt;/strong&gt;：处理登录、认证、授权（OAuth2 / JWT）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;User 服务&lt;/strong&gt;：管理患者与从业者的 Profile 信息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Search 服务&lt;/strong&gt;：负责处理按位置、专科、可用时段等条件的搜索请求；依赖搜索索引（Elasticsearch）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Availability 服务&lt;/strong&gt;：维护和计算从业者可预约时段（working hours + 例外情况 + 节假日 + 已有预约冲突）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Booking 服务&lt;/strong&gt;：处理预约创建、修改、取消事务，确保并发安全与一致性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Notification 服务&lt;/strong&gt;：异步发送邮件/SMS/Push 推送（预约确认、提醒、变更通知）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Analytics / Monitoring 服务&lt;/strong&gt;（或外部）：收集日志、指标，用于监控与数据分析。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Payment / Billing 服务&lt;/strong&gt;（如需付费预约，可选）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;配置与管理服务&lt;/strong&gt;：管理多国家/地区配置（时区、节假日规则、语言、合规设置等）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步消息平台&lt;/strong&gt;（如 Kafka）：用于事件流（Event Bus），实现微服务间的解耦异步通信，如预约事件、索引更新、通知触发等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缓存层&lt;/strong&gt;：Redis，用于热点数据、短期缓存、分布式锁等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;：关系型数据库（PostgreSQL/CockroachDB/Vitess+MySQL/Aurora 等）；可根据跨区域需求选择分布式SQL（如 CockroachDB）或各区域独立数据库并做异步复制。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;搜索引擎&lt;/strong&gt;：Elasticsearch 或 OpenSearch，用于地理位置与属性过滤、可用性初筛索引等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;基础设施与部署&lt;/strong&gt;：容器化（Docker）、Kubernetes（EKS/GKE/AKS 或自托管 K8s）、Terraform/CloudFormation 管理资源，多区域集群部署。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;下面分模块详细阐述，并说明选型理由。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RPC 框架</title>
      <link>http://localhost:1313/docs/study/system-design/rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/rpc/</guid>
      <description>&lt;p&gt;设计一个高可用且高性能的 RPC 框架需要从体系结构、通信机制、安全与可观测性等多方面进行设计。以下是中英文版本的综合建议。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-中文版&#34;&gt;&#xD;&#xA;  ✅ 中文版&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%ad%e6%96%87%e7%89%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-接口定义与协议-idl--序列化&#34;&gt;&#xD;&#xA;  1. 接口定义与协议 (IDL + 序列化)&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%8e%a5%e5%8f%a3%e5%ae%9a%e4%b9%89%e4%b8%8e%e5%8d%8f%e8%ae%ae-idl--%e5%ba%8f%e5%88%97%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 Interface Definition Language（如 Protocol Buffers / Thrift IDL）清晰定义服务接口，实现跨语言支持并生成类型安全的代码 (&#xD;&#xA;  &lt;a href=&#34;https://www.bulbapp.io/p/9305367f-53c0-4082-bec6-65f2f90c6a8c/a-guide-to-designing-and-developing-an-effective-rpc-framework?utm_source=chatgpt.com&#34; title=&#34;A Guide to Designing and Developing an Effective RPC Framework | BULB&#34;&gt;bulbapp.io&lt;/a&gt;, &#xD;&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Thrift?utm_source=chatgpt.com&#34; title=&#34;Apache Thrift&#34;&gt;en.wikipedia.org&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;li&gt;序列化建议使用高效二进制格式（如 Protobuf、Cap’n Proto）＋可选压缩（如 Snappy/LZ4），提升传输效率(&#xD;&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Cap%27n_Proto?utm_source=chatgpt.com&#34; title=&#34;Cap&amp;#39;n Proto&#34;&gt;en.wikipedia.org&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-传输层--网络通信&#34;&gt;&#xD;&#xA;  2. 传输层 &amp;amp; 网络通信&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%bc%a0%e8%be%93%e5%b1%82--%e7%bd%91%e7%bb%9c%e9%80%9a%e4%bf%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于 HTTP/2 或原始 TCP，支持双向流（gRPC）与异步调用模型（如 Netty、非阻塞 IO）。&lt;/li&gt;&#xA;&lt;li&gt;连接池与会话管理：使用连接复用、心跳检测，确保连接稳定和高并发性能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-客户端-stub-与-server-骨架&#34;&gt;&#xD;&#xA;  3. 客户端 Stub 与 Server 骨架&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%ae%a2%e6%88%b7%e7%ab%af-stub-%e4%b8%8e-server-%e9%aa%a8%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端生成 Stub，封装序列化、网络调用、超时和重试逻辑（建议支持幂等重试、超时控制）。&lt;/li&gt;&#xA;&lt;li&gt;服务端使用拦截器链（Interceptor）模式处理强制认证、限流、日志、监控埋点等事务，解耦关注点(&#xD;&#xA;  &lt;a href=&#34;https://google.github.io/building-secure-and-reliable-systems/raw/ch12.html?utm_source=chatgpt.com&#34; title=&#34;Chapter 12: Building Secure and Reliable Systems&#34;&gt;google.github.io&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-服务注册与发现&#34;&gt;&#xD;&#xA;  4. 服务注册与发现&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c%e4%b8%8e%e5%8f%91%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;集成注册中心（如 Consul、Nacos、Eureka、Zookeeper），自动负载均衡、健康检查。&lt;/li&gt;&#xA;&lt;li&gt;客户端支持负载均衡策略（轮询、一致性哈希、权重），并自动感知服务增删。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-错误处理与容错&#34;&gt;&#xD;&#xA;  5. 错误处理与容错&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e9%94%99%e8%af%af%e5%a4%84%e7%90%86%e4%b8%8e%e5%ae%b9%e9%94%99&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义统一的错误码和重试策略（基于幂等性 + 指数退避 + 副作用重试）。&lt;/li&gt;&#xA;&lt;li&gt;实现断路器（circuit breaker）、降级策略，防止错误扩散(&#xD;&#xA;  &lt;a href=&#34;https://programming.vip/docs/teach-you-to-write-an-rpc-framework-hand-in-hand.html?utm_source=chatgpt.com&#34; title=&#34;Teach you to write an RPC framework hand in hand&#34;&gt;programming.vip&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6-安全与授权&#34;&gt;&#xD;&#xA;  6. 安全与授权&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-%e5%ae%89%e5%85%a8%e4%b8%8e%e6%8e%88%e6%9d%83&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持 TLS 加密、双向认证及 OAuth/JWT 认证方式。&lt;/li&gt;&#xA;&lt;li&gt;排除注入式安全漏洞，确保传输与接口访问安全。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7-性能优化与可观测性&#34;&gt;&#xD;&#xA;  7. 性能优化与可观测性&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7-%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96%e4%b8%8e%e5%8f%af%e8%a7%82%e6%b5%8b%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端 Stub 支持压缩与批量请求，降低延迟与并发连接数。&lt;/li&gt;&#xA;&lt;li&gt;集成监控系统（Prometheus、Grafana、Opentelemetry），记录请求耗时、错误率、QPS、线程池状况等。&lt;/li&gt;&#xA;&lt;li&gt;支持分布式 Tracing（如 OpenTracing/Jaeger），便于故障分析与延迟追踪。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8-测试与部署&#34;&gt;&#xD;&#xA;  8. 测试与部署&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#8-%e6%b5%8b%e8%af%95%e4%b8%8e%e9%83%a8%e7%bd%b2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提供单元测试、集成测试和性能压测脚本（例如基于 gRPC 框架或 HTTP2）。&lt;/li&gt;&#xA;&lt;li&gt;引入 CI/CD 和容器部署（Docker + Kubernetes），配套健康检查和滚动升级机制。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-english-version&#34;&gt;&#xD;&#xA;  ✅ English Version&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-english-version&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-interface-definition--serialization&#34;&gt;&#xD;&#xA;  1. Interface Definition &amp;amp; Serialization&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-interface-definition--serialization&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use an IDL (e.g., Protobuf or Thrift) to define service contracts, enabling cross-language support and codegen for type-safe client/server stubs (&#xD;&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Thrift?utm_source=chatgpt.com&#34; title=&#34;Apache Thrift&#34;&gt;en.wikipedia.org&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Opt for efficient binary serialization (Protobuf, Cap’n Proto) with optional compression (Snappy/LZ4) to optimize payload size and speed (&#xD;&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Cap%27n_Proto?utm_source=chatgpt.com&#34; title=&#34;Cap&amp;#39;n Proto&#34;&gt;en.wikipedia.org&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-transport-layer--communication&#34;&gt;&#xD;&#xA;  2. Transport Layer &amp;amp; Communication&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-transport-layer--communication&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Leverage HTTP/2 or raw TCP with bidirectional streaming (gRPC) or custom async I/O for high concurrency.&lt;/li&gt;&#xA;&lt;li&gt;Implement connection pooling and heartbeats to manage resource usage and reduce latency.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-client-stub--server-skeleton&#34;&gt;&#xD;&#xA;  3. Client Stub &amp;amp; Server Skeleton&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-client-stub--server-skeleton&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Client stubs wrap serialization, network calls, timeouts, and retry mechanisms (with idempotent retries and timeout support) (&#xD;&#xA;  &lt;a href=&#34;https://www.bulbapp.io/p/9305367f-53c0-4082-bec6-65f2f90c6a8c/a-guide-to-designing-and-developing-an-effective-rpc-framework?utm_source=chatgpt.com&#34; title=&#34;A Guide to Designing and Developing an Effective RPC Framework | BULB&#34;&gt;bulbapp.io&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Use interceptor chains on the server to handle auth, logging, rate-limiting, metrics, and tracing—enabling clear separation of concerns .&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-service-discovery--load-balancing&#34;&gt;&#xD;&#xA;  4. Service Discovery &amp;amp; Load Balancing&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-service-discovery--load-balancing&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Integrate with service registries (Consul, Nacos, Eureka, ZooKeeper) for auto-discovery and LB.&lt;/li&gt;&#xA;&lt;li&gt;Implement client-side load balancing (round-robin, consistent hashing, weighted) and support dynamic updates.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-error-handling--resilience&#34;&gt;&#xD;&#xA;  5. Error Handling &amp;amp; Resilience&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-error-handling--resilience&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Define consistent error codes; support retry strategies with exponential backoff, focusing on idempotent operations.&lt;/li&gt;&#xA;&lt;li&gt;Incorporate circuit breakers and fallback mechanisms to prevent cascading failures (&#xD;&#xA;  &lt;a href=&#34;https://programming.vip/docs/teach-you-to-write-an-rpc-framework-hand-in-hand.html?utm_source=chatgpt.com&#34; title=&#34;Teach you to write an RPC framework hand in hand&#34;&gt;programming.vip&lt;/a&gt;, &#xD;&#xA;  &lt;a href=&#34;https://www.bulbapp.io/p/9305367f-53c0-4082-bec6-65f2f90c6a8c/a-guide-to-designing-and-developing-an-effective-rpc-framework?utm_source=chatgpt.com&#34; title=&#34;A Guide to Designing and Developing an Effective RPC Framework | BULB&#34;&gt;bulbapp.io&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6-security--authentication&#34;&gt;&#xD;&#xA;  6. Security &amp;amp; Authentication&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-security--authentication&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Support TLS encryption, mTLS, and token-based authentication (OAuth2/JWT).&lt;/li&gt;&#xA;&lt;li&gt;Enforce strict validation to protect against injection and unauthorized access.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7-performance--observability&#34;&gt;&#xD;&#xA;  7. Performance &amp;amp; Observability&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7-performance--observability&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Enable payload compression and batch requests to lower latency and throughput overhead.&lt;/li&gt;&#xA;&lt;li&gt;Instrument with Prometheus/Grafana/OpenTelemetry to monitor QPS, latency, errors, thread metrics.&lt;/li&gt;&#xA;&lt;li&gt;Integrate distributed tracing (OpenTelemetry, Jaeger) for end-to-end request visibility .&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8-testing--deployment&#34;&gt;&#xD;&#xA;  8. Testing &amp;amp; Deployment&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#8-testing--deployment&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Provide unit/integration tests and benchmark tools to validate correctness and performance.&lt;/li&gt;&#xA;&lt;li&gt;Package with Docker/Kubernetes, including health checks and rolling upgrades, integrated via CI/CD pipelines.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-总结&#34;&gt;&#xD;&#xA;  🧠 总结&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;设计一个高质量 RPC 框架应聚焦以下方向：&lt;/p&gt;</description>
    </item>
    <item>
      <title>高可用性</title>
      <link>http://localhost:1313/docs/study/system-design/high-availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/high-availability/</guid>
      <description>&lt;h1 id=&#34;服务宕机与网络分区时保证系统可用性--cap-原则解析&#34;&gt;&#xD;&#xA;  服务宕机与网络分区时保证系统可用性 &amp;amp; CAP 原则解析&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e5%ae%95%e6%9c%ba%e4%b8%8e%e7%bd%91%e7%bb%9c%e5%88%86%e5%8c%ba%e6%97%b6%e4%bf%9d%e8%af%81%e7%b3%bb%e7%bb%9f%e5%8f%af%e7%94%a8%e6%80%a7--cap-%e5%8e%9f%e5%88%99%e8%a7%a3%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;一服务宕机或网络分区时如何保证系统整体可用&#34;&gt;&#xD;&#xA;  一、服务宕机或网络分区时如何保证系统整体可用？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%9c%8d%e5%8a%a1%e5%ae%95%e6%9c%ba%e6%88%96%e7%bd%91%e7%bb%9c%e5%88%86%e5%8c%ba%e6%97%b6%e5%a6%82%e4%bd%95%e4%bf%9d%e8%af%81%e7%b3%bb%e7%bb%9f%e6%95%b4%e4%bd%93%e5%8f%af%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-多副本冗余部署&#34;&gt;&#xD;&#xA;  1. 多副本冗余部署&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%a4%9a%e5%89%af%e6%9c%ac%e5%86%97%e4%bd%99%e9%83%a8%e7%bd%b2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对关键服务部署多实例，分布在不同节点或可用区，防止单点故障导致服务不可用。&lt;/li&gt;&#xA;&lt;li&gt;通过负载均衡自动切换到健康实例。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-健康检查与自动故障转移&#34;&gt;&#xD;&#xA;  2. 健康检查与自动故障转移&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5%e4%b8%8e%e8%87%aa%e5%8a%a8%e6%95%85%e9%9a%9c%e8%bd%ac%e7%a7%bb&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用健康探针（Liveness/Readiness Probe）检测服务状态，异常自动剔除。&lt;/li&gt;&#xA;&lt;li&gt;K8s、服务网格等支持自动流量路由调整。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-限流熔断和降级&#34;&gt;&#xD;&#xA;  3. 限流、熔断和降级&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e9%99%90%e6%b5%81%e7%86%94%e6%96%ad%e5%92%8c%e9%99%8d%e7%ba%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;防止故障传播，减少故障扩散范围，保障核心服务可用。&lt;/li&gt;&#xA;&lt;li&gt;在部分依赖不可用时，提供降级功能维持核心体验。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-数据副本与异步复制&#34;&gt;&#xD;&#xA;  4. 数据副本与异步复制&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%95%b0%e6%8d%ae%e5%89%af%e6%9c%ac%e4%b8%8e%e5%bc%82%e6%ad%a5%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保证数据多副本存储，避免单点数据丢失。&lt;/li&gt;&#xA;&lt;li&gt;异步复制减少同步阻塞，提高可用性，但存在一定数据一致性风险。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-设计幂等和重试机制&#34;&gt;&#xD;&#xA;  5. 设计幂等和重试机制&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e8%ae%be%e8%ae%a1%e5%b9%82%e7%ad%89%e5%92%8c%e9%87%8d%e8%af%95%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保障请求安全重试，避免因网络抖动导致的数据错误。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;二cap-原则简介&#34;&gt;&#xD;&#xA;  二、CAP 原则简介&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8ccap-%e5%8e%9f%e5%88%99%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;CAP 定理指出，分布式系统不能同时完美满足：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;C（一致性 Consistency）&lt;/strong&gt;：所有节点读到的数据是一致的，最新的写入立即可见。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;A（可用性 Availability）&lt;/strong&gt;：每个请求都能得到响应（成功或失败），系统对所有节点持续可用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;P（分区容忍性 Partition Tolerance）&lt;/strong&gt;：系统能在网络分区（节点间消息丢失或延迟）时继续运行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;由于网络分区不可避免，系统设计时需在&lt;strong&gt;一致性&lt;/strong&gt;和&lt;strong&gt;可用性&lt;/strong&gt;之间权衡。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;三实际系统中的-cap-取舍&#34;&gt;&#xD;&#xA;  三、实际系统中的 CAP 取舍&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e5%ae%9e%e9%99%85%e7%b3%bb%e7%bb%9f%e4%b8%ad%e7%9a%84-cap-%e5%8f%96%e8%88%8d&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;取舍方向&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;          &lt;th&gt;典型场景或技术&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;CP（优先一致性）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;保证数据强一致性，分区时牺牲可用性（部分请求可能失败）&lt;/td&gt;&#xA;          &lt;td&gt;传统关系型数据库、分布式事务系统&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;AP（优先可用性）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;保证系统持续响应，允许短暂数据不一致，后续进行数据同步修正&lt;/td&gt;&#xA;          &lt;td&gt;大规模互联网应用、缓存系统、部分 NoSQL&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;CA（理论上的理想）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;不考虑网络分区，只在单节点或强同步场景下能实现&lt;/td&gt;&#xA;          &lt;td&gt;单机系统或网络稳定环境&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;四结合场景的实践建议&#34;&gt;&#xD;&#xA;  四、结合场景的实践建议&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9b%e7%bb%93%e5%90%88%e5%9c%ba%e6%99%af%e7%9a%84%e5%ae%9e%e8%b7%b5%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心业务（如支付、订单）&lt;/strong&gt;：更倾向于&lt;strong&gt;CP&lt;/strong&gt;，确保数据准确，允许部分请求失败或延迟。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;用户体验相关（如浏览、推荐）&lt;/strong&gt;：可偏向&lt;strong&gt;AP&lt;/strong&gt;，保证响应速度和可用性，允许短暂的数据不一致。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;采用异步补偿和最终一致性设计&lt;/strong&gt;：用 Saga 模式等实现业务流程的补偿，提升系统可用性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;五总结&#34;&gt;&#xD;&#xA;  五、总结&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%94%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;关注点&lt;/th&gt;&#xA;          &lt;th&gt;设计策略&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;宕机/分区容忍&lt;/td&gt;&#xA;          &lt;td&gt;多副本冗余、健康检查、自动故障转移、降级限流&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CAP权衡&lt;/td&gt;&#xA;          &lt;td&gt;根据业务优先级选CP或AP，设计幂等与补偿机制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;系统弹性&lt;/td&gt;&#xA;          &lt;td&gt;利用异步机制与最终一致性，提升可用性同时保证数据正确性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>缓存一致性</title>
      <link>http://localhost:1313/docs/study/system-design/cache-consistency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/cache-consistency/</guid>
      <description>&lt;h2 id=&#34;延迟双删-vs-kafka&#34;&gt;&#xD;&#xA;  延迟双删 vs Kafka&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bb%b6%e8%bf%9f%e5%8f%8c%e5%88%a0-vs-kafka&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;对比维度&lt;/th&gt;&#xA;          &lt;th&gt;延迟双删&lt;/th&gt;&#xA;          &lt;th&gt;Kafka 缓存失效通知&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;实现难度&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;简单，代码内实现&lt;/td&gt;&#xA;          &lt;td&gt;需要接入 Kafka + 消费机制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;缓存一致性控制力&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;不稳定（延迟期间仍可能被覆盖）&lt;/td&gt;&#xA;          &lt;td&gt;强一致（通知所有消费者实时失效）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;适应多服务 / 多副本&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;差，需每个服务都实现&lt;/td&gt;&#xA;          &lt;td&gt;强，多服务可统一订阅通知&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;异步解耦能力&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;弱，紧耦合在业务逻辑中&lt;/td&gt;&#xA;          &lt;td&gt;强，数据库变更 → 异步通知&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;故障可追溯性&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;差，删失败难定位&lt;/td&gt;&#xA;          &lt;td&gt;强，Kafka 留存消息可回溯&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;网络异常容错性&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;差，失败后不易重试&lt;/td&gt;&#xA;          &lt;td&gt;好，可消费失败后重试&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
  </channel>
</rss>
