<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OAuth2 on 君宝的笔记</title>
    <link>http://localhost:1313/docs/study/middleware/oauth2/</link>
    <description>Recent content in OAuth2 on 君宝的笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="http://localhost:1313/docs/study/middleware/oauth2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>授权码模式</title>
      <link>http://localhost:1313/docs/study/middleware/oauth2/auth-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/middleware/oauth2/auth-code/</guid>
      <description>&lt;h2 id=&#34;1-用户授权与鉴权机制设计要点&#34;&gt;&#xD;&#xA;  1. 用户授权与鉴权机制设计要点&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e7%94%a8%e6%88%b7%e6%8e%88%e6%9d%83%e4%b8%8e%e9%89%b4%e6%9d%83%e6%9c%ba%e5%88%b6%e8%ae%be%e8%ae%a1%e8%a6%81%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;授权-vs-鉴权&#34;&gt;&#xD;&#xA;  授权 vs 鉴权&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%88%e6%9d%83-vs-%e9%89%b4%e6%9d%83&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;授权（Authorization）&lt;/strong&gt;：确定用户或客户端是否有权限访问某资源或执行某操作。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;鉴权（Authentication）&lt;/strong&gt;：验证用户身份是否真实。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;常见技术与方案&#34;&gt;&#xD;&#xA;  常见技术与方案&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e8%a7%81%e6%8a%80%e6%9c%af%e4%b8%8e%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;技术&lt;/th&gt;&#xA;          &lt;th&gt;作用&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;OAuth2&lt;/td&gt;&#xA;          &lt;td&gt;授权框架&lt;/td&gt;&#xA;          &lt;td&gt;支持第三方应用代表用户访问资源，常用于开放API和SSO场景。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;JWT (JSON Web Token)&lt;/td&gt;&#xA;          &lt;td&gt;鉴权令牌&lt;/td&gt;&#xA;          &lt;td&gt;无状态Token，包含用户信息和权限，便于分布式系统鉴权。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Session&lt;/td&gt;&#xA;          &lt;td&gt;鉴权状态管理&lt;/td&gt;&#xA;          &lt;td&gt;服务器端保存用户登录状态，适合单体或小型应用。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Token刷新&lt;/td&gt;&#xA;          &lt;td&gt;保持鉴权状态&lt;/td&gt;&#xA;          &lt;td&gt;使用刷新Token获取新的访问Token，减少用户重新登录频率。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;权限模型&lt;/td&gt;&#xA;          &lt;td&gt;细粒度权限控制&lt;/td&gt;&#xA;          &lt;td&gt;RBAC（基于角色）和ACL（基于访问控制列表）是常见模型。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-设计建议&#34;&gt;&#xD;&#xA;  2. 设计建议&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e8%ae%be%e8%ae%a1%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;认证使用OAuth2 + JWT&lt;/strong&gt;：&#xA;OAuth2提供标准授权流程，JWT用于访问令牌，支持无状态鉴权和微服务调用。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Token设计&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Access Token&lt;/strong&gt;：有效期较短，携带用户身份及权限。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Refresh Token&lt;/strong&gt;：有效期较长，用于获取新的Access Token。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;权限控制&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;RBAC&lt;/strong&gt;：用户分配角色，角色对应权限，简单易维护。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ACL&lt;/strong&gt;：对资源和用户的访问权限做细粒度控制，适合复杂场景。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全加固&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HTTPS传输所有Token。&lt;/li&gt;&#xA;&lt;li&gt;Token签名和加密。&lt;/li&gt;&#xA;&lt;li&gt;定期刷新Token。&lt;/li&gt;&#xA;&lt;li&gt;防止Token泄露和重放攻击。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-oauth2-授权码模式authorization-code-grant详细步骤&#34;&gt;&#xD;&#xA;  3. OAuth2 授权码模式（Authorization Code Grant）详细步骤&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-oauth2-%e6%8e%88%e6%9d%83%e7%a0%81%e6%a8%a1%e5%bc%8fauthorization-code-grant%e8%af%a6%e7%bb%86%e6%ad%a5%e9%aa%a4&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;授权码模式主要用于服务器端应用，流程如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;用户请求授权&lt;/strong&gt;&#xA;用户在客户端（如浏览器）访问需要授权的功能，客户端将用户重定向到授权服务器的授权端点，附带客户端ID、回调地址、请求权限范围（scope）等参数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;用户登录并授权&lt;/strong&gt;&#xA;授权服务器要求用户登录（如果未登录），并请求用户同意客户端申请的权限范围。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;授权码返回客户端&lt;/strong&gt;&#xA;用户同意后，授权服务器将授权码（Authorization Code）通过浏览器重定向发送到客户端预先注册的回调地址。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
