[{"id":0,"href":"/docs/example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":"\rCaput vino delphine in tamen vias\r#\rCognita laeva illo fracta\r#\rLorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere\r#\rPectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit\r#\rAurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua\r#\rIuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta\r#\rMortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":1,"href":"/docs/study/system-design/","title":"系统设计","section":"学习资料","content":"\r要求\r#\r1. 分布式、可扩展。\r#\r分布式：微服务、异步通信、分布式缓存、K8s 可扩展：HPA、分库分表、K8s DNS Service、多AZ、多国家 2. 用户可搜索、可预约、可重新安排、可取消，基于医生的位置、专科、可用时间。\r#\r搜索\r#\rCache Aside，Invalidate when Booking and Cancellation (TTL ~ minutes) Caffeine 异步延迟双删 权衡\r#\r优点 说明 ⚡ 高吞吐 Redis 命中率高，支持 QPS \u0026gt; 1000+ ⏱️ 低延迟 单医生查询 latency ≈ 几 ms ✅ 写后无读 Slot 数据预生成、写入后只读，适合缓存 🔁 异步更新 Cache 由 Kafka 驱动异步更新，无需强一致性 缺点 说明 🕒 数据轻微不一致 TTL 失效期间可能展示已被预约的 slot（在 Booking 阶段兜底） 🧠 Cache Invalidate 复杂 多服务写入 slot 状态需保证正确清除 Redis 缓存 📦 大量 slot Redis 内存占用需控制（可做分片 or 使用 Redis Cluster） 预约\r#\rRedlock 加锁 (TTL ~ seconds) 加入 Request ID 作为唯一性约束 数据库悲观锁（Pessimistic Lock）双检 插入预约（Appointment） 发布 AppointmentCreated 到 Kafka 释放锁（Unlock） 响应客户端 消费者（Search Service）Cache Invalidation 消费者（Notification Service）发送消息 权衡\r#\r优点 说明 ✅ 高一致性保障 锁+事务双重保证 ✅ 幂等设计 防止重复预约 ✅ 可观测性强 Kafka 推送事件用于追踪链路 ✅ 异步解耦 非核心逻辑（通知、缓存）不影响主流程性能 缺点 说明 ❗ Redis 不可用 Redlock 依赖 Redis，可引入降级机制（fallback DB lock） ❗ 高并发下延迟 拥塞在热点 slot（比如热门医生）可用队列排队缓解 ❗ 事务复杂性 需细致处理锁释放和回滚，避免死锁 重新安排\r#\rRedlock加锁 (TTL ~ seconds) 数据库悲观锁（Pessimistic Lock）双检 校验修改旧预约，插入新预约 发布 AppointmentRescheduled 到 Kafka 释放锁（Unlock） 响应客户端 消费者（Search Service）Cache Invalidation 消费者（Notification Service）发送消息 权衡\r#\r优点 说明 ✅ 一致性保障 事务更新 + 幂等控制，避免错约/重复约 ✅ 双 slot 安全管理 显式释放旧 slot、锁定新 slot ✅ 解耦逻辑 Kafka 用于通知与缓存刷新，主流程不阻塞 缺点 说明 ❗ 新旧 slot 状态切换逻辑复杂 需要明确状态流转模型 ❗ Redis 不可用影响锁 降级 fallback：数据库悲观锁 ❗ 用户误操作可能导致重复 reschedule 需限制频率，增强幂等性保障 取消\r#\rRedlock加锁 (TTL ~ seconds) 数据库悲观锁（Pessimistic Lock）双检 校验修改旧预约 发布 AppointmentCanceled 到 Kafka 释放锁（Unlock） 响应客户端 消费者（Search Service）Cache Invalidation 消费者（Notification Service）发送消息 权衡\r#\r3. 服务5000万用户，50万医生，每秒700次搜索，每秒90次预约。\r#\r4. 轻松拓展新地区。\r#\r配置层面隔离（Spring Cloud Config） 数据库分库（Date Partitioning） 通用服务（Common Services）和差异化定制（Custom Services） API设计（/fr, /de） 多租户部署（namespace） 日志标签（Label） 5. 要考虑服务之间的扩展性，容错性，数据一致性。\r#\r扩展性：HPA，Ingress Controller，Redis Cluster Slot，Kafka Brokers Partition, Database Sharding 容错性：Service Mesh，多AZ，Redis Redlock，Kafka 最终一致性：数据库事务，Redis Redlock，SAGA Pattern，异步消息（Async Message），重试（Retry），死信队列（Dead Letter Queue），缓存失效（Cache Invalidation），事件监听（Event-driven Monitoring） 问题\r#\r1. 搜索前（Search）需要经过鉴权（Authorization）吗？\r#\r如果不需要：\n把Search Service置前 这样可能更吸引用户 但是会增加访问量 2. 搜索时都有什么筛选条件（Filter Condition）？\r#\r如果涉及到距离，交通工具，路程用时等条件：\n可以设计第三方供应商（3rd-Party Vendors）提供地图（Map API）等接口 如果涉及到医生简介（Summary），全文搜索（Full-Text Search）:\n可以引入ElasticSearch 3. 我们不同国家的市场使用同一个应用（The only one app）吗？\r#\r如果是：\n国际化（Internationalization），时间、语言、货币、日期格式 配置开关（Feature Flag） 根据设备本地时间（Device Time）或者定位（Localization） 如果不是：\n部署过程要考虑更多模块 4. 预约会跨天（Span 2 days）吗？\r#\r要考虑数据库表结构（Database table structure) 代码逻辑中要考虑 5. 每秒700次搜索和90次预约是最高峰值（Maximum Peak Value）吗？\r#\r影响规模（Scale） 可扩展性和安全性\r#\r1. 可扩展性\r#\r方面 关键实践 水平扩展（Horizontal Scaling） 每个服务可以独立部署多个副本 服务自治（Service Autonomy） 各服务可独立扩缩，不依赖整体系统 容器化部署 使用 Docker + Kubernetes 实现自动扩缩容 负载均衡（Load Balancing） 使用 API Gateway 或 Service Mesh 均衡流量 异步通信 Kafka、RabbitMQ 等提高吞吐量和解耦 缓存策略 Redis、本地缓存，减少数据库压力 数据库分库分表 水平拆分提升并发能力 服务熔断/限流 Sentinel、Hystrix 防止雪崩效应 2. 安全性\r#\r安全领域 技术手段 身份认证（Authentication） OAuth 2.0、OIDC、JWT Token 服务授权（Authorization） RBAC、ABAC、API 权限网关 通信加密 HTTPS / TLS、gRPC + mTLS 服务间认证 Service Mesh（如 Istio）支持 mTLS 自动加密 API 网关安全 限流、防止重放攻击、请求签名验证 数据安全 数据加密（传输 + 存储）、脱敏、访问审计 容器安全 镜像扫描、Kubernetes 安全策略（PodSecurityPolicy） 日志审计 审计用户行为、异常访问记录 防攻击 防止 XSS / CSRF / SQL 注入，使用 WAF、防火墙等 优化\r#\r服务间通信双向TLS（Mutual TLS between services） 用Service Mesh统一做熔断、限流、重试（Centralized resiliency by service mesh） 多AZ部署，包括Services，Redis Cluster等（Multi-AZ） 二级缓存，一级Caffeine（Local），二级Redis（Distributed） 数据库读写分离（Read-Write Separation），分库分表（Sharding） 全链路Trace（Telemetry，end-to-end tracing） 固定时间批处理热点时间多（Scheduled batch to store hot time slots） "},{"id":2,"href":"/docs/example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":"\rAt me ipso nepotibus nunc celebratior genus\r#\rTanto oblite\r#\rLorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius\r#\rQuibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae\r#\rCredulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":3,"href":"/docs/study/tips/","title":"补充","section":"学习资料","content":"\r用途\r#\r1. API Gateway\r#\r身份验证（Authentication \u0026amp; Authorization） 速率限制（Rate Limit） 请求跟踪（Request Tracing） 熔断（Circuit Breaking） 2. Search Service\r#\rRedis + Database搜索 3. Booking Service\r#\rRedis Redlock，时段级锁定（Slot-level Locking），数据库事务（Transaction） Idempotency，Request ID 发布到Kafka进行缓存失效和通知 预约流程\r#\rRedlock加锁 数据库悲观锁（Pessimistic Lock）双检 插入预约（Appointment），加入Request ID作为唯一性约束 发布AppointmentCreated到Kafka 释放锁（Unlock） 响应客户端 消费者（Search Service）Cache Invalidation 消费者（Notification Service）发送消息 4. Database\r#\r数据库分区（Partition by country or Doctor‘s ID） 消息总线（Message Bus），用于解耦预约和缓存失效和通知 5. Notification Service\r#\rEmail Service or SMS Service （Sendgrid \u0026amp; Twilio） In-app notification （Firebase etc.) 扩展\r#\r根据CPU，Memory等进行横向拓展（Horizontal Pod Autoscaler） redis分片 数据库读写分离（Read-Write Separation） 数据库分区（Partition） 容错\r#\r熔断（Circuit Breaker， Resilience4j） 健康检查（Health Checks） 自我修复（Self-Healing） 告警（Alert） 安全\r#\r端到端TLS OAuth2登录 Rate Limit Logging 面试表述\r#\r负载均衡和熔断限流在哪里做，不在gateway做吗？\r#\r“我们在 Gateway 层做外部限流和初级熔断，用云厂商 LB + Ingress/Gateway 控制边缘流量；在 服务内部，客户端用 Ribbon 或 Envoy 做调用负载均衡，用 Resilience4j 做熔断和限流保护下游；在 平台侧，Kubernetes Service 负责 Pod 级别均衡，若引入 Service Mesh，则 Envoy sidecar 可做更细粒度的 LB、熔断、限流、流量镜像等高级功能。这样多层协同，既保护了下游服务，也保证了全链路的高可用和可控性。” k8s中推荐用什么方式做用户侧调用和服务间调用的负载均衡、限流、熔断？\r#\r“在边缘我们用云端 LB + Ingress 或 Envoy-based Gateway 做外部负载均衡和限流，可选性强且搭配插件化熔断；在服务内部调用层面，推荐用 Service Mesh（Envoy Sidecar）来透明做服务发现、客户端负载均衡、网络限流和熔断，代码层面再用 Resilience4j 对关键依赖做二次保护。” k8s需要做注册中心集群吗？\r#\r“在 Kubernetes 中，API Server + etcd + kube-proxy 本身就构成了高可用的服务注册与发现体系，我们只需创建 Service 资源，K8s 自动维护 Endpoints 并做 DNS/负载均衡。除非有跨集群或必须用 Spring Cloud Netflix 生态的遗留需求，否则不再额外部署注册中心集群，这样能简化架构并利用 K8s 的原生 HA 能力。” 待解决问题\r#\r如果快速将服务扩展到其他国家？\r#\r1. 目标拆解：支持多国家的能力需求\r#\r维度 要求说明 🏛 数据隔离 每个国家业务数据逻辑隔离（合规/监管要求） 🌐 业务配置差异 国家A/B 的工作日、货币、语言、时间等不同 🧰 服务逻辑差异 部分微服务逻辑可能略有差异 🚀 快速部署 新国家上线不需大改动，支持可配置部署 🔐 合规安全 数据主权（Data Residency）遵守各国法规 2. 配置驱动的多国家支持\r#\r方法 实现 配置中心 每个国家一份配置，如 config_fr.yaml, config_de.yaml 通过配置注入 控制：开放时间段、货币、支持语言、特殊逻辑开关 多租户标识（Tenant ID） 请求中传入国家 ID (X-Country: FR)，统一识别 "},{"id":4,"href":"/docs/example/table-of-contents/","title":"Table of Contents","section":"Example Site","content":"\rUbi loqui\r#\rMentem genus facietque salire tempus bracchia\r#\rLorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice\r#\rOra precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis\r#\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\rPlacabilis coactis nega ingemuit ignoscat nimia non\r#\rFrontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) {\rzif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive;\rgigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop),\rpanel_point_firmware);\rspyware_bash.statePopApplet = express_netbios_digital(\rinsertion_troubleshooting.brouter(recordFolderUs), 65);\r}\rrecursionCoreRay = -5;\rif (hub == non) {\rportBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard),\rfont_radcab, guidCmsScalable + reciprocalMatrixPim);\rleft.bug = screenshot;\r} else {\rtooltipOpacity = raw_process_permalink(webcamFontUser, -1);\rexecutable_router += tape;\r}\rif (tft) {\rbandwidthWeb *= social_page;\r} else {\rregular += 611883;\rthumbnail /= system_lag_keyboard;\r}\rCaesorum illa tu sentit micat vestes papyriferi\r#\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":5,"href":"/docs/example/","title":"Example Site","section":"Docs","content":"\rIntroduction\r#\rFerre hinnitibus erat accipitrem dixi Troiae tollens\r#\rLorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad\r#\rLocum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol\r#\rNec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue,\rviralItunesBalancing, bankruptcy_file_pptp)) {\rfile += ip_cybercrime_suffix;\r}\rif (runtimeSmartRom == netMarketingWord) {\rvirusBalancingWin *= scriptPromptBespoke + raster(post_drive,\rwindowsSli);\rcd = address_hertz_trojan;\rsoap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui);\r} else {\rmegabyte.api = modem_flowchart - web + syntaxHalftoneAddress;\r}\rif (3 \u0026lt; mebibyteNetworkAnimated) {\rpharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle(\rdvrSyntax, cdma);\radf_sla *= hoverCropDrive;\rtemplateNtfs = -1 - vertical;\r} else {\rexpressionCompressionVariable.bootMulti = white_eup_javascript(\rtable_suffix);\rguidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1,\rmanagementRosetta(webcamActivex), 740874);\r}\rvar virusTweetSsl = nullGigo;\rTrepident sitimque\r#\rSentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":6,"href":"/docs/example/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":"\r4th Level of Menu\r#\rCaesorum illa tu sentit micat vestes papyriferi\r#\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":7,"href":"/docs/example/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":"\r3rd Level of Menu\r#\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r"},{"id":8,"href":"/docs/example/hidden/","title":"Hidden","section":"Example Site","content":"\rThis page is hidden in menu\r#\rQuondam non pater est dignior ille Eurotas\r#\rLatent te facies\r#\rLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona\r#\rO fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer),\rpad.property_data_programming.sectorBrowserPpga(dataMask, 37,\rrecycleRup));\rintellectualVaporwareUser += -5 * 4;\rtraceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\rsurge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\rcommerce_add_ppc);\rif (lun_ipv) {\rverticalExtranet(1, thumbnail_ttl, 3);\rbar_graphics_jpeg(chipset - sector_xmp_beta);\r}\rFronde cetera dextrae sequens pennis voce muneris\r#\rActa cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software;\rif (internic \u0026gt; disk) {\remoticonLockCron += 37 + bps - 4;\rwan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\rsimplex -= downloadAccess;\r}\rvar volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\rsector(memory(firewire + interlaced, wired)); "},{"id":9,"href":"/docs/hidden/Java%E8%B5%84%E6%96%99/","title":"Java资料","section":"隐藏","content":"\r目录\r#\r队列 非阻塞队列（适用于单线程或手动同步） 阻塞队列（java.util.concurrent 包） 无锁/高性能队列（非阻塞并发队列） 对比总结 典型使用场景 LinkedList 的主要特性 List 接口的方法 Deque（双端队列）方法 Queue 方法 创建线程的两种方式 继承 Thread 类 实现 Runnable 接口（推荐） Thread 常用方法一览 队列\r#\r非阻塞队列（适用于单线程或手动同步）\r#\r实现类 特点 LinkedList 实现了 Deque 和 Queue，可以作为普通队列或双端队列使用 PriorityQueue 元素按优先级排列（非 FIFO），不支持并发 ArrayDeque 高性能双端队列，非线程安全 阻塞队列（java.util.concurrent 包）\r#\r实现类 特点 ArrayBlockingQueue 有界阻塞队列，数组实现，支持 FIFO LinkedBlockingQueue 可选容量的阻塞队列，链表实现，FIFO PriorityBlockingQueue 无界，带优先级排序，不保证 FIFO DelayQueue 元素按延迟时间排序，仅在到期后才能取出 SynchronousQueue 每个插入操作必须等待一个对应的取出操作（零容量） LinkedTransferQueue 支持生产者等待消费者、容量无界 BlockingDeque 支持阻塞的双端队列操作（如 LinkedBlockingDeque） 无锁/高性能队列（非阻塞并发队列）\r#\r实现类 特点 ConcurrentLinkedQueue 无界、基于链表、适用于高并发（非阻塞） ConcurrentLinkedDeque 双端无锁队列，适合并发环境 对比总结\r#\r队列类型 是否阻塞 是否线程安全 是否有界 是否支持优先级 LinkedList 否 否 否 否 PriorityQueue 否 否 否 是 ArrayBlockingQueue 是 是 是 否 LinkedBlockingQueue 是 是 可选 否 PriorityBlockingQueue 是 是 否 是 DelayQueue 是 是 否 是（延迟时间） SynchronousQueue 是 是 是（零容量） 否 ConcurrentLinkedQueue 否 是 否 否 典型使用场景\r#\r任务调度 / 消息中转： LinkedBlockingQueue, DelayQueue\n高并发日志采集： ConcurrentLinkedQueue\n线程池任务队列： ArrayBlockingQueue, SynchronousQueue\n定时/优先级任务： PriorityBlockingQueue, DelayQueue\nLinkedList 的主要特性\r#\r双向链表实现：插入、删除元素效率高（相较于 ArrayList）\n元素可重复，允许 null\n非线程安全（需要手动同步）\nList 接口的方法\r#\r方法 说明 add(E e) 添加元素到末尾 add(int index, E element) 指定位置插入元素 remove(int index) 移除指定位置的元素 remove(Object o) 删除第一个匹配的元素 get(int index) 获取指定位置的元素 set(int index, E element) 设置指定位置的元素 indexOf(Object o) 查找元素首次出现的位置 lastIndexOf(Object o) 查找元素最后出现的位置 clear() 清空所有元素 size() 获取元素数量 isEmpty() 判断是否为空 Deque（双端队列）方法\r#\r方法 说明 addFirst(E e) 头部添加元素 addLast(E e) 尾部添加元素 removeFirst() 移除并返回第一个元素 removeLast() 移除并返回最后一个元素 getFirst() 获取第一个元素，不移除 getLast() 获取最后一个元素，不移除 offerFirst(E e) 头部插入元素，失败返回 false offerLast(E e) 尾部插入元素，失败返回 false pollFirst() 获取并移除第一个元素，队列空时返回 null pollLast() 获取并移除最后一个元素，队列空时返回 null peekFirst() 查看第一个元素，不移除 peekLast() 查看最后一个元素，不移除 Queue 方法\r#\r方法 说明 offer(E e) 添加元素到队尾 poll() 取出并移除队头元素 peek() 查看队头元素但不移除 创建线程的两种方式\r#\r继承 Thread 类\r#\rclass MyThread extends Thread { public void run() { System.out.println(\u0026#34;Thread is running\u0026#34;); } } MyThread t = new MyThread(); t.start(); // 启动线程 实现 Runnable 接口（推荐）\r#\rclass MyRunnable implements Runnable { public void run() { System.out.println(\u0026#34;Thread is running\u0026#34;); } } Thread t = new Thread(new MyRunnable()); t.start(); Thread 常用方法一览\r#\r方法名 说明 start() 启动线程（会调用 run() 方法） run() 线程执行的任务内容（可重写） sleep(long millis) 当前线程睡眠指定时间（毫秒） join() 等待某个线程执行完 interrupt() 中断线程（并不会强制停止） isInterrupted() 检查线程是否被中断 setPriority(int newPriority) 设置线程优先级（1~10） getPriority() 获取线程优先级 setName(String name) 设置线程名 getName() 获取线程名 setDaemon(boolean on) 设置为守护线程（在 start() 前调用） isDaemon() 判断是否是守护线程 currentThread() 获取当前正在执行的线程对象（静态方法） yield() 当前线程让出 CPU 执行权（不一定成功） isAlive() 判断线程是否仍在运行中 "},{"id":10,"href":"/docs/hidden/SQL%E8%B5%84%E6%96%99/","title":"Sql资料","section":"隐藏","content":"\r目录\r#\r查询数据（SELECT） 基本查询 查询所有字段 使用条件（WHERE） 排序（ORDER BY） 去重（DISTINCT） 分页（LIMIT / OFFSET） 插入数据（INSERT） 插入单行 插入多行 更新数据（UPDATE） 删除数据（DELETE） 聚合函数（GROUP BY + HAVING） 连接查询（JOIN） 子查询（Subquery） CASE 表达式（类似 IF） 创建和管理表结构（DDL） 常用运算符速查 常见组合例子 SQL常用语法\r#\r一、查询数据（SELECT）\r#\r基本查询\r#\rSELECT column1, column2 FROM table_name; 查询所有字段\r#\rSELECT * FROM table_name; 使用条件（WHERE）\r#\rSELECT name, age FROM users WHERE age \u0026gt;= 18 AND gender = \u0026#39;F\u0026#39;; 排序（ORDER BY）\r#\rSELECT name, age FROM users ORDER BY age DESC, name ASC; 去重（DISTINCT）\r#\rSELECT DISTINCT city FROM users; 分页（LIMIT / OFFSET）\r#\r-- MySQL / PostgreSQL SELECT * FROM users LIMIT 10 OFFSET 20; 二、插入数据（INSERT）\r#\r插入单行\r#\rINSERT INTO users (name, age) VALUES (\u0026#39;Alice\u0026#39;, 25); 插入多行\r#\rINSERT INTO users (name, age) VALUES (\u0026#39;Bob\u0026#39;, 30), (\u0026#39;Carol\u0026#39;, 22); 三、更新数据（UPDATE）\r#\rUPDATE users SET age = 26 WHERE name = \u0026#39;Alice\u0026#39;; 四、删除数据（DELETE）\r#\rDELETE FROM users WHERE age \u0026lt; 18; 五、聚合函数（GROUP BY + HAVING）\r#\rSELECT department, COUNT(*) AS total FROM employees GROUP BY department HAVING COUNT(*) \u0026gt; 5; 常见聚合函数：\n函数 作用 COUNT() 计数 SUM() 求和 AVG() 平均值 MAX() 最大值 MIN() 最小值 六、连接查询（JOIN）\r#\rSELECT u.name, o.order_id FROM users u JOIN orders o ON u.id = o.user_id; 七、子查询（Subquery）\r#\rSELECT name FROM users WHERE id IN ( SELECT user_id FROM orders WHERE amount \u0026gt; 100 ); 八、CASE 表达式（类似 IF）\r#\rSELECT name, CASE WHEN age \u0026lt; 18 THEN \u0026#39;minor\u0026#39; WHEN age \u0026lt; 65 THEN \u0026#39;adult\u0026#39; ELSE \u0026#39;senior\u0026#39; END AS age_group FROM users; 九、创建和管理表结构（DDL）\r#\r-- 创建表 CREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(100), age INT ); -- 修改表 ALTER TABLE users ADD email VARCHAR(255); -- 删除表 DROP TABLE users; 十、常用运算符速查\r#\r类别 运算符/关键字 比较 =, \u0026lt;\u0026gt;, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;= 范围 BETWEEN x AND y 集合 IN (..) 模糊匹配 LIKE '%abc%' 空值检查 IS NULL, IS NOT NULL 逻辑运算 AND, OR, NOT 常见组合例子\r#\rSELECT department, AVG(salary) FROM employees WHERE hire_date \u0026gt;= \u0026#39;2022-01-01\u0026#39; GROUP BY department ORDER BY AVG(salary) DESC LIMIT 5; "},{"id":11,"href":"/docs/hidden/System-Design%E8%B5%84%E6%96%99/","title":"System Design资料","section":"隐藏","content":"\r患者预约系统\r#\r功能需求\r#\r医生：设置可用时间段。\n患者：查看可用时间段并预约。\n系统：返回包含预约时段的字典。\n系统架构\r#\r系统采用简化的架构，主要包括以下组件：\n数据存储：使用 Map 存储医生的可用时间段和预约信息。\n预约管理：处理预约的创建和查询。\nJava 实现示例\r#\rimport java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.*; class AppointmentScheduler { private Map\u0026lt;String, List\u0026lt;TimeSlot\u0026gt;\u0026gt; doctorAvailability = new HashMap\u0026lt;\u0026gt;(); private Map\u0026lt;String, List\u0026lt;TimeSlot\u0026gt;\u0026gt; appointments = new HashMap\u0026lt;\u0026gt;(); // 添加医生的可用时间段 public void addDoctorAvailability(String doctorId, List\u0026lt;TimeSlot\u0026gt; slots) { doctorAvailability.put(doctorId, slots); } // 获取医生的可用预约时间段 public List\u0026lt;TimeSlot\u0026gt; getAvailableSlots(String doctorId) { List\u0026lt;TimeSlot\u0026gt; available = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;TimeSlot\u0026gt; allSlots = doctorAvailability.getOrDefault(doctorId, new ArrayList\u0026lt;\u0026gt;()); List\u0026lt;TimeSlot\u0026gt; bookedSlots = appointments.getOrDefault(doctorId, new ArrayList\u0026lt;\u0026gt;()); for (TimeSlot slot : allSlots) { if (!bookedSlots.contains(slot)) { available.add(slot); } } return available; } // 为患者预约指定的时间段 public boolean bookAppointment(String doctorId, String patientId, TimeSlot desiredSlot) { List\u0026lt;TimeSlot\u0026gt; availableSlots = getAvailableSlots(doctorId); if (availableSlots.contains(desiredSlot)) { appointments.computeIfAbsent(doctorId, k -\u0026gt; new ArrayList\u0026lt;\u0026gt;()).add(desiredSlot); System.out.println(\u0026#34;预约成功：\u0026#34; + desiredSlot); return true; } else { System.out.println(\u0026#34;预约失败，时间段不可用。\u0026#34;); return false; } } // 获取医生的所有预约 public List\u0026lt;TimeSlot\u0026gt; getAppointments(String doctorId) { return appointments.getOrDefault(doctorId, new ArrayList\u0026lt;\u0026gt;()); } } class TimeSlot { private LocalDateTime start; private LocalDateTime end; public TimeSlot(LocalDateTime start, LocalDateTime end) { this.start = start; this.end = end; } // 重写 equals 和 hashCode 方法，以便在列表中正确比较 TimeSlot 对象 @Override public boolean equals(Object obj) { if (this == obj) return true; if (!(obj instanceof TimeSlot)) return false; TimeSlot other = (TimeSlot) obj; return start.equals(other.start) \u0026amp;\u0026amp; end.equals(other.end); } @Override public int hashCode() { return Objects.hash(start, end); } @Override public String toString() { DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\u0026#34;yyyy-MM-dd HH:mm\u0026#34;); return start.format(formatter) + \u0026#34; - \u0026#34; + end.format(formatter); } } // 示例使用 public class Main { public static void main(String[] args) { AppointmentScheduler scheduler = new AppointmentScheduler(); String doctorId = \u0026#34;Dr_Smith\u0026#34;; String patientId = \u0026#34;Patient_1\u0026#34;; // 创建医生的可用时间段 List\u0026lt;TimeSlot\u0026gt; slots = new ArrayList\u0026lt;\u0026gt;(); LocalDateTime startTime = LocalDateTime.of(2025, 5, 14, 9, 0); for (int i = 0; i \u0026lt; 8; i++) { TimeSlot slot = new TimeSlot(startTime.plusMinutes(i * 30), startTime.plusMinutes((i + 1) * 30)); slots.add(slot); } // 添加医生的可用时间段 scheduler.addDoctorAvailability(doctorId, slots); // 获取并显示可用时间段 List\u0026lt;TimeSlot\u0026gt; availableSlots = scheduler.getAvailableSlots(doctorId); System.out.println(\u0026#34;可用时间段：\u0026#34;); for (TimeSlot slot : availableSlots) { System.out.println(slot); } // 预约一个时间段 TimeSlot desiredSlot = availableSlots.get(0); scheduler.bookAppointment(doctorId, patientId, desiredSlot); // 显示所有预约 List\u0026lt;TimeSlot\u0026gt; appointments = scheduler.getAppointments(doctorId); System.out.println(\u0026#34;所有预约：\u0026#34;); for (TimeSlot appointment : appointments) { System.out.println(appointment); } } } 说明\r#\r医生可用时间段：通过 addDoctorAvailability 方法添加，系统会根据指定的时间范围生成所有可用的时间段。\n获取可用时间段：getAvailableSlots 方法返回医生当前未被预约的时间段。\n预约时间段：bookAppointment 方法允许患者预约一个指定的时间段，如果该时间段可用，则预约成功。\n查看所有预约：getAppointments 方法返回医生的所有预约信息。\n"},{"id":12,"href":"/docs/hidden/%E6%9E%B6%E6%9E%84%E8%B5%84%E6%96%99/","title":"架构资料","section":"隐藏","content":"Below are 10 Java and 10 Microservices technical questions—each with concise bilingual answers tailored to your background and the Doctolib Senior Software Engineer role.\nSummary\r#\r结合您在简历和动机信中强调的 Java 全栈、微服务 和 快速学习 能力，以及 Doctolib 对 后端 Java、可扩展架构 的需求，下列问题覆盖核心概念、常见陷阱和实战应用，帮助您在面试中脱颖而出。\n一、Java 相关问题\r#\r1. 为什么说 Java 是平台无关的？\r#\rEN: Java bytecode runs on any JVM regardless of underlying OS or hardware, thanks to the “write once, run anywhere” design. (\rGeeksforGeeks) CN： Java 编译生成的字节码 (.class) 可以在任何安装了 JVM 的系统上运行，实现“一次编写，到处运行”(\rGeeksforGeeks)。\n2. 抽象类和接口有什么区别？\r#\rEN: An abstract class can have both method bodies and state (fields), while an interface (pre‑Java 8) only declares methods. A class can extend one abstract class but implement multiple interfaces. (\rReddit) CN： 抽象类既可包含具体方法也可存储状态，接口（Java 8 前）只能声明方法；类只能继承一个抽象类，却能实现多个接口。(\rReddit)\n3. Java 的垃圾回收是如何工作的？\r#\rEN: The JVM’s GC reclaims unreachable objects automatically, typically using generational collectors (young/gen0, old/gen1) to minimize pause times. (\rGeeksforGeeks) CN： JVM 垃圾回收器自动回收不可达对象，常用分代收集算法（新生代/老年代）以降低停顿。(\rGeeksforGeeks)\n4. 什么是装箱和拆箱？\r#\rEN: Autoboxing converts primitives (e.g., int) into wrappers (Integer) automatically; unboxing does the reverse. (\rReddit) CN： 自动装箱是将基本类型（如 int）隐式转换为其包装类（Integer），拆箱则相反。(\rReddit)\n5. HashMap 的底层结构是什么？\r#\rEN: A HashMap uses an array of buckets where each bucket is a linked list or red‑black tree (after threshold), with keys’ hashcodes determining bucket index. (\rGeeksforGeeks) CN： HashMap 底层用数组＋链表（或超阈值后转红黑树）存储键值对，哈希值决定元素落在哪个桶。(\rGeeksforGeeks)\n6. 如何实现线程安全的单例？\r#\rEN: Use a static inner helper class or enum singleton; both are thread‑safe and lazily initialized without explicit synchronization. (\rinterviewbit.com) CN： 可使用静态内部类或枚举单例，它们在类加载时线程安全且支持延迟初始化，无需手动锁。(\rinterviewbit.com)\n7. 描述 Java 8 中的 Stream 流操作。\r#\rEN: Streams allow declarative, lazy operations (map, filter, reduce) on collections, enabling parallelizable data pipelines. (\rinterviewbit.com) CN： Stream 提供声明式、惰性加载的链式操作（如 map、filter、reduce），并可简单地并行执行。(\rinterviewbit.com)\n8. synchronized 和 ReentrantLock 有何不同？\r#\rEN: synchronized is built‑in, blocks on acquisition; ReentrantLock is more flexible (tryLock, timed lock) and supports condition variables. (\rinterviewbit.com) CN： synchronized 为 JVM 内置锁且阻塞性获取；ReentrantLock 功能更强（支持 tryLock、可中断锁、条件变量）。(\rinterviewbit.com)\n9. 什么是 Java 中的异常分为 Checked 和 Unchecked？\r#\rEN: Checked exceptions (e.g., IOException) must be declared or caught; unchecked exceptions (subclasses of RuntimeException) need not be. (\rReddit) CN： Checked 异常（如 IOException）需在签名中声明或捕获，Unchecked 异常（RuntimeException 子类）则无需。(\rReddit)\n10. 描述 JIT 编译器的作用。\r#\rEN: The JIT (Just‑In‑Time) compiler in the JVM converts hot bytecode paths into native code at runtime to boost performance. (\rGeeksforGeeks) CN： JVM 中的 JIT 编译器在运行时将热点字节码编译成本地机器码，以提升执行效率。(\rGeeksforGeeks)\n二、微服务相关问题\r#\r1. 什么是微服务架构？\r#\rEN: Microservices split applications into small, independent services, each handling a single business capability and communicating over lightweight protocols. (\rMedium) CN： 微服务将应用拆分为多个小型独立服务，每个聚焦单一业务能力，通过轻量协议互相通信。(\rMedium)\n2. 单体架构与微服务有何区别？\r#\rEN: Monolith bundles all functions into one deployable unit; microservices decouple features into separately deployable services for independent scaling. (\rTuring) CN： 单体架构将所有功能打包部署，微服务则将其拆分为独立服务，可分别扩展与部署。(\rTuring)\n3. 服务发现怎么做？\r#\rEN: Use a registry (e.g., Eureka, Consul) where services register themselves; clients or gateway query registry to locate service instances. (\rMedium) CN： 使用服务注册中心（如 Eureka、Consul），服务启动时注册，客户端或网关通过它查找可用实例。(\rMedium)\n4. 什么是 API 网关？\r#\rEN: An API Gateway routes external requests to appropriate microservices, handles auth, rate‑limiting, and can aggregate responses. (\rMedium) CN： API 网关负责将外部请求路由到对应服务，同时做鉴权、限流，并可进行结果聚合。(\rMedium)\n5. 如何保证微服务安全？\r#\rEN: Use OAuth2/JWT for auth, HTTPS for transport security, and enforce scopes in the gateway or each service. (\rMedium) CN： 采用 OAuth2/JWT 做认证授权，全链路使用 HTTPS，并在网关或服务内校验权限。(\rMedium)\n6. 微服务间如何保证数据一致性？\r#\rEN: Prefer eventual consistency via event‑driven patterns (Kafka events) or SAGA orchestration with compensating transactions. (\rMedium) CN： 建议采用最终一致性方案，如事件驱动（Kafka）或 SAGA 模式的补偿事务。(\rMedium)\n7. 什么是熔断器（Circuit Breaker）？\r#\rEN: A circuit breaker (e.g., via Resilience4j) prevents cascading failures by short‑circuited calls to unhealthy services and provides fallback. (\rSimplilearn.com) CN： 熔断器（如 Resilience4j）通过拦截对不可用服务的调用并快速失败或降级，防止故障蔓延。(\rSimplilearn.com)\n8. 如何监控微服务？\r#\rEN: Use Prometheus + Grafana for metrics, ELK/EFK for centralized logs, and distributed tracing (Jaeger/Zipkin) for request flows. (\rblog.bytebytego.com) CN： 使用 Prometheus+Grafana 监控指标，ELK/EFK 集中日志，Jaeger/Zipkin 做分布式链路跟踪。(\rblog.bytebytego.com)\n9. 如何处理微服务的配置管理？\r#\rEN: Store configs in Spring Cloud Config or Vault; services pull or watch for updates, enabling dynamic reconfiguration. (\rGeeksforGeeks) CN： 配置存放于 Spring Cloud Config 或 Vault，服务启动或热刷新时拉取更新，实现动态配置。(\rGeeksforGeeks)\n10. 容器化和编排对微服务的好处？\r#\rEN: Docker containers package services with dependencies; Kubernetes automates scaling, self‑healing, rolling updates, and service discovery. (\r维基百科) CN： Docker 将服务及其依赖打包；Kubernetes 自动扩缩容、自愈、滚动升级，并提供内置服务发现。(\r维基百科)\n以上问题及中英文回答，既涵盖 Java 核心知识、并发、容器化，也兼顾 微服务实战 要点，结合您在 HSBC 微服务项目 和 动机信中提到的技术偏好，可助您高效准备 Doctolib 面试。祝面试顺利！\n"},{"id":13,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":"\rButtons\r#\rButtons are styled links that can lead to local page or external link.\nExample\r#\r{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home\rContribute\r"},{"id":14,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":"\rColumns\r#\rColumns help organize shorter pieces of content horizontally for readability.\nExample\r#\r{{% columns [ratio=\u0026#34;1:1\u0026#34;] [class=\u0026#34;...\u0026#34;] %}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{% /columns %}} Left Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nMid Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nRight Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nSettings size ratio for columns\r#\r{{% columns ratio=\u0026#34;1:2\u0026#34; %}} \u0026lt;!-- begin columns block --\u0026gt; ## x1 Column Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; ## x2 Column Lorem markdownum insigne... {{% /columns %}} x1 Column\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nx2 Column\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":15,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":"\rDetails\r#\rDetails shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample\r#\r{{% details \u0026#34;Title\u0026#34; [open] %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} {{% details title=\u0026#34;Title\u0026#34; open=true %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} Title\rMarkdown content\r#\rLorem markdownum insigne\u0026hellip;\n"},{"id":16,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":"\rHints\r#\rHint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{% hint [info|warning|danger] %}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{% /hint %}} Example\r#\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\n"},{"id":17,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":"\rMermaid Chart\r#\rMermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid initialization config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample\r#\r{{\u0026lt; mermaid [class=\u0026#34;...\u0026#34;] \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2\rState1: The state with a note\rnote right of State1\rImportant information! You can write\rnotes.\rend note\rState1 --\u003e State2\rnote left of State2 : This is the note to the left.\r"},{"id":18,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":"\rSection\r#\rSection renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample\r#\r{{\u0026lt; section [summary] \u0026gt;}} First Page\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nSecond Page\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n"},{"id":19,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":"\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":20,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":"\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":21,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":"\rTabs\r#\rTabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;id\u0026#34; \u0026gt;}} {{% tab \u0026#34;MacOS\u0026#34; %}} # MacOS Content {{% /tab %}} {{% tab \u0026#34;Linux\u0026#34; %}} # Linux Content {{% /tab %}} {{% tab \u0026#34;Windows\u0026#34; %}} # Windows Content {{% /tab %}} {{\u0026lt; /tabs \u0026gt;}} Example\r#\rMacOS\rMacOS\r#\rThis is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux\rLinux\r#\rThis is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows\rWindows\r#\rThis is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":22,"href":"/docs/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":"\rKaTeX\r#\rKaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample\r#\r{{\u0026lt; katex display=true \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\rDisplay Mode Example\r#\rHere is some inline example: \\(\\pi(x)\\)\r, rendered in the same line. And below is display example, having display: block \\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\rText continues here.\n"},{"id":23,"href":"/docs/study/cache-consistency/","title":"缓存一致性","section":"学习资料","content":"\r延迟双删 vs Kafka\r#\r对比维度 延迟双删 Kafka 缓存失效通知 实现难度 简单，代码内实现 需要接入 Kafka + 消费机制 缓存一致性控制力 不稳定（延迟期间仍可能被覆盖） 强一致（通知所有消费者实时失效） 适应多服务 / 多副本 差，需每个服务都实现 强，多服务可统一订阅通知 异步解耦能力 弱，紧耦合在业务逻辑中 强，数据库变更 → 异步通知 故障可追溯性 差，删失败难定位 强，Kafka 留存消息可回溯 网络异常容错性 差，失败后不易重试 好，可消费失败后重试 "},{"id":24,"href":"/docs/example/introduction/","title":"介绍","section":"Example Site","content":"\r中文索引页\r#\rAstris ipse furtiva\r#\rEst in vagis et Pittheus tu arge accipiter regia iram vocatur nurus. Omnes ut olivae sensit arma sorori deducit, inesset crudus, ego vetuere aliis, modo arsit? Utinam rapta fiducia valuere litora adicit cursu, ad facies\nSuis quot vota\r#\rEa furtique risere fratres edidit terrae magis. Colla tam mihi tenebat: miseram excita suadent es pecudes iam. Concilio quam velatus posset ait quod nunc! Fragosis suae dextra geruntur functus vulgata.\nTempora nisi nunc\r#\rLorem markdownum emicat gestu. Cannis sol pressit ducta. Est Idaei, tremens ausim se tutaeque, illi ulnis hausit, sed, lumina cutem. Quae avis sequens!\nvar panel = ram_design;\rif (backup + system) {\rfile.readPoint = network_native;\rsidebar_engine_device(cell_tftp_raster,\rdual_login_paper.adf_vci.application_reader_design(\rgraphicsNvramCdma, lpi_footer_snmp, integer_model));\r}\rpublic_keyboard_docking += error.controller_gibibyte_plug.ip(4,\rasciiPetaflops, software(supercomputer_compatible_status + 4));\rdynamic_disk.indexModeLaptop = bufferTftpReality;\rvar export_vlog_sequence = trinitron_flowchart + supercomputer_cluster_rj(\r-1, toolbar_powerpoint_query, -2 / multiprocessing_impression);\rLocis suis novi cum suoque decidit eadem\r#\rIdmoniae ripis, at aves, ali missa adest, ut et autem, et ab? Venit spes versus finis sermonibus patefecit murum nec est sine oculis. Ille inmota macies domoque caelestia cadit tantummodo scelus procul, corde!\nDolentem capi parte rostro alvum habentem pudor Fulgentia sanguine paret E punior consurgit lentus Vox hasta eras micantes Facibus pharetrae indetonsusque indulsit sic incurrite foliis\r#\rNefandam et prisci palmas! Blandita cutis flectitur montis macies, te nati Latiis; turbaque inferias. Virginis tibi peracta avidusque facies caper nec, e at ademptae, mira.\ndirect *= font(inputScareware(sliHome), crossplatform.byte(\rppl_encryption.excel_e_rte(integratedModelModifier), timeVirtual,\rfloating_speakers.media_printer(us, yahoo, primaryPhp)));\rfriendly_metal_flatbed(cd, isoPrimaryStorage(reader), dmaMirrored);\rif (parse_flash_cron.metalGif(1, adServiceDevice, utility)) {\radf -= operation_cdma_samba;\rimapGif.switch += torrent;\r} else {\rpmu.disk_captcha = digital_ppp_pci + recursionTransistor(5, dram);\rajax_service += grayscalePythonLock;\rgoogle_scroll_capacity = ftp + engine_dslam_sidebar / tape - 1;\r}\rdrive_rw = zipTftp;\rvar suffix = software_router_extension.dimm_ddr(-5,\rkernel_digital_minisite);\rVocavit toto; alas mitis maestus in liquidarum ab legi finitimosque dominam tibi subitus; Orionis vertitur nota. Currere alti etiam seroque cernitis innumeris miraturus amplectique collo sustinet quemque! Litora ante turba?\n"},{"id":25,"href":"/docs/study/license-comparison/","title":"主流许可证对比","section":"学习资料","content":"\r开源许可证对比表\r#\r许可证名称 类型 专利授权 Copyleft 强度 商业兼容性 与 GPL 兼容性 适用场景 MIT 宽松 ❌ 无 ❌ 无 ✅ 高 ✅ 是 小型项目、库 Apache 2.0 宽松 ✅ 有 ❌ 无 ✅ 高 ✅ 是 企业级项目、涉及专利 GPL v3.0 强 Copyleft ✅ 有 ✅ 强 ⚠️ 限制 ✅ 是 开源项目、需强制开源 GPL v2.0 强 Copyleft ❌ 无 ✅ 强 ⚠️ 限制 ❌ 否 传统开源项目 AGPL v3.0 强 Copyleft ✅ 有 ✅ 最强 ⚠️ 限制 ✅ 是 SaaS、网络服务 LGPL v2.1 弱 Copyleft ❌ 无 ⚠️ 弱 ✅ 高 ✅ 是 库、插件 BSD 2-Clause 宽松 ❌ 无 ❌ 无 ✅ 高 ✅ 是 系统级组件、商业集成 BSD 3-Clause 宽松 ❌ 无 ❌ 无 ✅ 高 ✅ 是 商业软件、需署名保护 Boost 1.0 宽松 ❌ 无 ❌ 无 ✅ 高 ✅ 是 C++ 库、工具链 CC0 1.0 公共领域 ❌ 无 ❌ 无 ✅ 高 ✅ 是 数据集、内容共享 EPL 2.0 弱 Copyleft ✅ 有 ⚠️ 弱 ✅ 高 ✅ 是 企业软件、模块化项目 MPL 2.0 弱 Copyleft ⚠️ 部分 ⚠️ 弱 ✅ 高 ✅ 是 浏览器、混合授权项目 "}]