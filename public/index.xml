<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>介绍 on 君宝的笔记</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in 介绍 on 君宝的笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>With ToC</title>
      <link>http://localhost:1313/docs/example/table-of-contents/with-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/example/table-of-contents/with-toc/</guid>
      <description>&lt;h1 id=&#34;caput-vino-delphine-in-tamen-vias&#34;&gt;&#xD;&#xA;  Caput vino delphine in tamen vias&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#caput-vino-delphine-in-tamen-vias&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;cognita-laeva-illo-fracta&#34;&gt;&#xD;&#xA;  Cognita laeva illo fracta&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cognita-laeva-illo-fracta&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Lorem markdownum pavent auras, surgit nunc cingentibus libet &lt;strong&gt;Laomedonque que&lt;/strong&gt;&#xA;est. Pastor &#xD;&#xA;  &lt;a href=&#34;http://est.org/ire.aspx&#34;&gt;An&lt;/a&gt; arbor filia foedat, ne &#xD;&#xA;  &lt;a href=&#34;http://www.indiciumturbam.org/moramquid.php&#34;&gt;fugit&#xA;aliter&lt;/a&gt;, per. Helicona illas et&#xA;callida neptem est &lt;em&gt;Oresitrophos&lt;/em&gt; caput, dentibus est venit. Tenet reddite&#xA;&#xD;&#xA;  &lt;a href=&#34;http://www.antro-et.net/&#34;&gt;famuli&lt;/a&gt; praesentem fortibus, quaeque vis foret si&#xA;frondes &lt;em&gt;gelidos&lt;/em&gt; gravidae circumtulit &#xD;&#xA;  &lt;a href=&#34;http://incurvasustulit.io/illi-virtute.html&#34;&gt;inpulit armenta&#xA;nativum&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Te at cruciabere vides rubentis manebo&lt;/li&gt;&#xA;&lt;li&gt;Maturuit in praetemptat ruborem ignara postquam habitasse&lt;/li&gt;&#xA;&lt;li&gt;Subitarum supplevit quoque fontesque venabula spretis modo&lt;/li&gt;&#xA;&lt;li&gt;Montis tot est mali quasque gravis&lt;/li&gt;&#xA;&lt;li&gt;Quinquennem domus arsit ipse&lt;/li&gt;&#xA;&lt;li&gt;Pellem turis pugnabant locavit&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;natus-quaerere&#34;&gt;&#xD;&#xA;  Natus quaerere&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#natus-quaerere&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra&#xA;Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera&#xA;excutiunt concipit.&lt;/p&gt;</description>
    </item>
    <item>
      <title>系统设计</title>
      <link>http://localhost:1313/docs/study/system-design/system-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/system-design/</guid>
      <description>&lt;h3 id=&#34;要求&#34;&gt;&#xD;&#xA;  要求&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a6%81%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;1-分布式可扩展&#34;&gt;&#xD;&#xA;  1. 分布式、可扩展。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%88%86%e5%b8%83%e5%bc%8f%e5%8f%af%e6%89%a9%e5%b1%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分布式：微服务、异步通信、分布式缓存、K8s&lt;/li&gt;&#xA;&lt;li&gt;可扩展：HPA、分库分表、K8s DNS Service、多AZ、多国家&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-用户可搜索可预约可重新安排可取消基于医生的位置专科可用时间&#34;&gt;&#xD;&#xA;  2. 用户可搜索、可预约、可重新安排、可取消，基于医生的位置、专科、可用时间。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e7%94%a8%e6%88%b7%e5%8f%af%e6%90%9c%e7%b4%a2%e5%8f%af%e9%a2%84%e7%ba%a6%e5%8f%af%e9%87%8d%e6%96%b0%e5%ae%89%e6%8e%92%e5%8f%af%e5%8f%96%e6%b6%88%e5%9f%ba%e4%ba%8e%e5%8c%bb%e7%94%9f%e7%9a%84%e4%bd%8d%e7%bd%ae%e4%b8%93%e7%a7%91%e5%8f%af%e7%94%a8%e6%97%b6%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;h5 id=&#34;搜索&#34;&gt;&#xD;&#xA;  搜索&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%90%9c%e7%b4%a2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cache Aside，Invalidate when Booking and Cancellation (TTL ~ minutes)&lt;/li&gt;&#xA;&lt;li&gt;Caffeine 异步延迟双删&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;权衡&#34;&gt;&#xD;&#xA;  权衡&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e8%a1%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h6&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;优点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;⚡ 高吞吐&lt;/td&gt;&#xA;          &lt;td&gt;Redis 命中率高，支持 QPS &amp;gt; 1000+&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;⏱️ 低延迟&lt;/td&gt;&#xA;          &lt;td&gt;单医生查询 latency ≈ 几 ms&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 写后无读&lt;/td&gt;&#xA;          &lt;td&gt;Slot 数据预生成、写入后只读，适合缓存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🔁 异步更新&lt;/td&gt;&#xA;          &lt;td&gt;Cache 由 Kafka 驱动异步更新，无需强一致性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缺点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🕒 数据轻微不一致&lt;/td&gt;&#xA;          &lt;td&gt;TTL 失效期间可能展示已被预约的 slot（在 Booking 阶段兜底）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🧠 Cache Invalidate 复杂&lt;/td&gt;&#xA;          &lt;td&gt;多服务写入 slot 状态需保证正确清除 Redis 缓存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;📦 大量 slot&lt;/td&gt;&#xA;          &lt;td&gt;Redis 内存占用需控制（可做分片 or 使用 Redis Cluster）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h5 id=&#34;预约&#34;&gt;&#xD;&#xA;  预约&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a2%84%e7%ba%a6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redlock 加锁 (TTL ~ seconds)&lt;/li&gt;&#xA;&lt;li&gt;加入 Request ID 作为唯一性约束&lt;/li&gt;&#xA;&lt;li&gt;数据库悲观锁（Pessimistic Lock）双检&lt;/li&gt;&#xA;&lt;li&gt;插入预约（Appointment）&lt;/li&gt;&#xA;&lt;li&gt;发布 AppointmentCreated 到 Kafka&lt;/li&gt;&#xA;&lt;li&gt;释放锁（Unlock）&lt;/li&gt;&#xA;&lt;li&gt;响应客户端&lt;/li&gt;&#xA;&lt;li&gt;消费者（Search Service）Cache Invalidation&lt;/li&gt;&#xA;&lt;li&gt;消费者（Notification Service）发送消息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;权衡-1&#34;&gt;&#xD;&#xA;  权衡&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e8%a1%a1-1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h6&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;优点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 高一致性保障&lt;/td&gt;&#xA;          &lt;td&gt;锁+事务双重保证&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 幂等设计&lt;/td&gt;&#xA;          &lt;td&gt;防止重复预约&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 可观测性强&lt;/td&gt;&#xA;          &lt;td&gt;Kafka 推送事件用于追踪链路&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 异步解耦&lt;/td&gt;&#xA;          &lt;td&gt;非核心逻辑（通知、缓存）不影响主流程性能&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缺点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ Redis 不可用&lt;/td&gt;&#xA;          &lt;td&gt;Redlock 依赖 Redis，可引入降级机制（fallback DB lock）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ 高并发下延迟&lt;/td&gt;&#xA;          &lt;td&gt;拥塞在热点 slot（比如热门医生）可用队列排队缓解&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ 事务复杂性&lt;/td&gt;&#xA;          &lt;td&gt;需细致处理锁释放和回滚，避免死锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h5 id=&#34;重新安排&#34;&gt;&#xD;&#xA;  重新安排&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%87%8d%e6%96%b0%e5%ae%89%e6%8e%92&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redlock加锁 (TTL ~ seconds)&lt;/li&gt;&#xA;&lt;li&gt;数据库悲观锁（Pessimistic Lock）双检&lt;/li&gt;&#xA;&lt;li&gt;校验修改旧预约，插入新预约&lt;/li&gt;&#xA;&lt;li&gt;发布 AppointmentRescheduled 到 Kafka&lt;/li&gt;&#xA;&lt;li&gt;释放锁（Unlock）&lt;/li&gt;&#xA;&lt;li&gt;响应客户端&lt;/li&gt;&#xA;&lt;li&gt;消费者（Search Service）Cache Invalidation&lt;/li&gt;&#xA;&lt;li&gt;消费者（Notification Service）发送消息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;权衡-2&#34;&gt;&#xD;&#xA;  权衡&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e8%a1%a1-2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h6&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;优点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 一致性保障&lt;/td&gt;&#xA;          &lt;td&gt;事务更新 + 幂等控制，避免错约/重复约&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 双 slot 安全管理&lt;/td&gt;&#xA;          &lt;td&gt;显式释放旧 slot、锁定新 slot&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ 解耦逻辑&lt;/td&gt;&#xA;          &lt;td&gt;Kafka 用于通知与缓存刷新，主流程不阻塞&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缺点&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ 新旧 slot 状态切换逻辑复杂&lt;/td&gt;&#xA;          &lt;td&gt;需要明确状态流转模型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ Redis 不可用影响锁&lt;/td&gt;&#xA;          &lt;td&gt;降级 fallback：数据库悲观锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❗ 用户误操作可能导致重复 reschedule&lt;/td&gt;&#xA;          &lt;td&gt;需限制频率，增强幂等性保障&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h5 id=&#34;取消&#34;&gt;&#xD;&#xA;  取消&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%96%e6%b6%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redlock加锁 (TTL ~ seconds)&lt;/li&gt;&#xA;&lt;li&gt;数据库悲观锁（Pessimistic Lock）双检&lt;/li&gt;&#xA;&lt;li&gt;校验修改旧预约&lt;/li&gt;&#xA;&lt;li&gt;发布 AppointmentCanceled 到 Kafka&lt;/li&gt;&#xA;&lt;li&gt;释放锁（Unlock）&lt;/li&gt;&#xA;&lt;li&gt;响应客户端&lt;/li&gt;&#xA;&lt;li&gt;消费者（Search Service）Cache Invalidation&lt;/li&gt;&#xA;&lt;li&gt;消费者（Notification Service）发送消息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;权衡-3&#34;&gt;&#xD;&#xA;  权衡&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%83%e8%a1%a1-3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h6&gt;&#xD;&#xA;&lt;h4 id=&#34;3-服务5000万用户50万医生每秒700次搜索每秒90次预约&#34;&gt;&#xD;&#xA;  3. 服务5000万用户，50万医生，每秒700次搜索，每秒90次预约。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e6%9c%8d%e5%8a%a15000%e4%b8%87%e7%94%a8%e6%88%b750%e4%b8%87%e5%8c%bb%e7%94%9f%e6%af%8f%e7%a7%92700%e6%ac%a1%e6%90%9c%e7%b4%a2%e6%af%8f%e7%a7%9290%e6%ac%a1%e9%a2%84%e7%ba%a6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;h4 id=&#34;4-轻松拓展新地区&#34;&gt;&#xD;&#xA;  4. 轻松拓展新地区。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e8%bd%bb%e6%9d%be%e6%8b%93%e5%b1%95%e6%96%b0%e5%9c%b0%e5%8c%ba&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;配置层面隔离（Spring Cloud Config）&lt;/li&gt;&#xA;&lt;li&gt;数据库分库（Date Partitioning）&lt;/li&gt;&#xA;&lt;li&gt;通用服务（Common Services）和差异化定制（Custom Services）&lt;/li&gt;&#xA;&lt;li&gt;API设计（/fr, /de）&lt;/li&gt;&#xA;&lt;li&gt;多租户部署（namespace）&lt;/li&gt;&#xA;&lt;li&gt;日志标签（Label）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;5-要考虑服务之间的扩展性容错性数据一致性&#34;&gt;&#xD;&#xA;  5. 要考虑服务之间的扩展性，容错性，数据一致性。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e8%a6%81%e8%80%83%e8%99%91%e6%9c%8d%e5%8a%a1%e4%b9%8b%e9%97%b4%e7%9a%84%e6%89%a9%e5%b1%95%e6%80%a7%e5%ae%b9%e9%94%99%e6%80%a7%e6%95%b0%e6%8d%ae%e4%b8%80%e8%87%b4%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;扩展性：HPA，Ingress Controller，Redis Cluster Slot，Kafka Brokers Partition, Database Sharding&lt;/li&gt;&#xA;&lt;li&gt;容错性：Service Mesh，多AZ，Redis Redlock，Kafka&lt;/li&gt;&#xA;&lt;li&gt;最终一致性：数据库事务，Redis Redlock，SAGA Pattern，异步消息（Async Message），重试（Retry），死信队列（Dead Letter Queue），缓存失效（Cache Invalidation），事件监听（Event-driven Monitoring）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;问题&#34;&gt;&#xD;&#xA;  问题&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;1-搜索前search需要经过鉴权authorization吗&#34;&gt;&#xD;&#xA;  1. 搜索前（Search）需要经过鉴权（Authorization）吗？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%90%9c%e7%b4%a2%e5%89%8dsearch%e9%9c%80%e8%a6%81%e7%bb%8f%e8%bf%87%e9%89%b4%e6%9d%83authorization%e5%90%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;p&gt;如果不需要：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Doctolib 大纲</title>
      <link>http://localhost:1313/docs/study/system-design/doctolib-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/doctolib-tips/</guid>
      <description>&lt;h3 id=&#34;用途&#34;&gt;&#xD;&#xA;  用途&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e9%80%94&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;1-api-gateway&#34;&gt;&#xD;&#xA;  1. API Gateway&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-api-gateway&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;身份验证（Authentication &amp;amp; Authorization）&lt;/li&gt;&#xA;&lt;li&gt;速率限制（Rate Limit）&lt;/li&gt;&#xA;&lt;li&gt;请求跟踪（Request Tracing）&lt;/li&gt;&#xA;&lt;li&gt;熔断（Circuit Breaking）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;2-search-service&#34;&gt;&#xD;&#xA;  2. Search Service&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-search-service&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis + Database搜索&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;3-booking-service&#34;&gt;&#xD;&#xA;  3. Booking Service&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-booking-service&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis Redlock，时段级锁定（Slot-level Locking），数据库事务（Transaction）&lt;/li&gt;&#xA;&lt;li&gt;Idempotency，Request ID&lt;/li&gt;&#xA;&lt;li&gt;发布到Kafka进行缓存失效和通知&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;预约流程&#34;&gt;&#xD;&#xA;  预约流程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%a2%84%e7%ba%a6%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redlock加锁&lt;/li&gt;&#xA;&lt;li&gt;数据库悲观锁（Pessimistic Lock）双检&lt;/li&gt;&#xA;&lt;li&gt;插入预约（Appointment），加入Request ID作为唯一性约束&lt;/li&gt;&#xA;&lt;li&gt;发布AppointmentCreated到Kafka&lt;/li&gt;&#xA;&lt;li&gt;释放锁（Unlock）&lt;/li&gt;&#xA;&lt;li&gt;响应客户端&lt;/li&gt;&#xA;&lt;li&gt;消费者（Search Service）Cache Invalidation&lt;/li&gt;&#xA;&lt;li&gt;消费者（Notification Service）发送消息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;4-database&#34;&gt;&#xD;&#xA;  4. Database&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-database&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据库分区（Partition by country or Doctor‘s ID）&lt;/li&gt;&#xA;&lt;li&gt;消息总线（Message Bus），用于解耦预约和缓存失效和通知&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;5-notification-service&#34;&gt;&#xD;&#xA;  5. Notification Service&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-notification-service&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Email Service or SMS Service （Sendgrid &amp;amp; Twilio）&lt;/li&gt;&#xA;&lt;li&gt;In-app notification （Firebase etc.)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;扩展&#34;&gt;&#xD;&#xA;  扩展&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%89%a9%e5%b1%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;根据CPU，Memory等进行横向拓展（Horizontal Pod Autoscaler）&lt;/li&gt;&#xA;&lt;li&gt;redis分片&lt;/li&gt;&#xA;&lt;li&gt;数据库读写分离（Read-Write Separation）&lt;/li&gt;&#xA;&lt;li&gt;数据库分区（Partition）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;容错&#34;&gt;&#xD;&#xA;  容错&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%b9%e9%94%99&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;熔断（Circuit Breaker， Resilience4j）&lt;/li&gt;&#xA;&lt;li&gt;健康检查（Health Checks）&lt;/li&gt;&#xA;&lt;li&gt;自我修复（Self-Healing）&lt;/li&gt;&#xA;&lt;li&gt;告警（Alert）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;安全&#34;&gt;&#xD;&#xA;  安全&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%89%e5%85%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;端到端TLS&lt;/li&gt;&#xA;&lt;li&gt;OAuth2登录&lt;/li&gt;&#xA;&lt;li&gt;Rate Limit&lt;/li&gt;&#xA;&lt;li&gt;Logging&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;面试表述&#34;&gt;&#xD;&#xA;  面试表述&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%a2%e8%af%95%e8%a1%a8%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;负载均衡和熔断限流在哪里做不在gateway做吗&#34;&gt;&#xD;&#xA;  负载均衡和熔断限流在哪里做，不在gateway做吗？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e5%92%8c%e7%86%94%e6%96%ad%e9%99%90%e6%b5%81%e5%9c%a8%e5%93%aa%e9%87%8c%e5%81%9a%e4%b8%8d%e5%9c%a8gateway%e5%81%9a%e5%90%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;“我们在 Gateway 层做外部限流和初级熔断，用云厂商 LB + Ingress/Gateway 控制边缘流量；在 服务内部，客户端用 Ribbon 或 Envoy 做调用负载均衡，用 Resilience4j 做熔断和限流保护下游；在 平台侧，Kubernetes Service 负责 Pod 级别均衡，若引入 Service Mesh，则 Envoy sidecar 可做更细粒度的 LB、熔断、限流、流量镜像等高级功能。这样多层协同，既保护了下游服务，也保证了全链路的高可用和可控性。”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;k8s中推荐用什么方式做用户侧调用和服务间调用的负载均衡限流熔断&#34;&gt;&#xD;&#xA;  k8s中推荐用什么方式做用户侧调用和服务间调用的负载均衡、限流、熔断？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#k8s%e4%b8%ad%e6%8e%a8%e8%8d%90%e7%94%a8%e4%bb%80%e4%b9%88%e6%96%b9%e5%bc%8f%e5%81%9a%e7%94%a8%e6%88%b7%e4%be%a7%e8%b0%83%e7%94%a8%e5%92%8c%e6%9c%8d%e5%8a%a1%e9%97%b4%e8%b0%83%e7%94%a8%e7%9a%84%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e9%99%90%e6%b5%81%e7%86%94%e6%96%ad&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;“在边缘我们用云端 LB + Ingress 或 Envoy-based Gateway 做外部负载均衡和限流，可选性强且搭配插件化熔断；在服务内部调用层面，推荐用 Service Mesh（Envoy Sidecar）来透明做服务发现、客户端负载均衡、网络限流和熔断，代码层面再用 Resilience4j 对关键依赖做二次保护。”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;k8s需要做注册中心集群吗&#34;&gt;&#xD;&#xA;  k8s需要做注册中心集群吗？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#k8s%e9%9c%80%e8%a6%81%e5%81%9a%e6%b3%a8%e5%86%8c%e4%b8%ad%e5%bf%83%e9%9b%86%e7%be%a4%e5%90%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;“在 Kubernetes 中，API Server + etcd + kube-proxy 本身就构成了高可用的服务注册与发现体系，我们只需创建 Service 资源，K8s 自动维护 Endpoints 并做 DNS/负载均衡。除非有跨集群或必须用 Spring Cloud Netflix 生态的遗留需求，否则不再额外部署注册中心集群，这样能简化架构并利用 K8s 的原生 HA 能力。”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;待解决问题&#34;&gt;&#xD;&#xA;  待解决问题&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%be%85%e8%a7%a3%e5%86%b3%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;如果快速将服务扩展到其他国家&#34;&gt;&#xD;&#xA;  如果快速将服务扩展到其他国家？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a6%82%e6%9e%9c%e5%bf%ab%e9%80%9f%e5%b0%86%e6%9c%8d%e5%8a%a1%e6%89%a9%e5%b1%95%e5%88%b0%e5%85%b6%e4%bb%96%e5%9b%bd%e5%ae%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;h5 id=&#34;1-目标拆解支持多国家的能力需求&#34;&gt;&#xD;&#xA;  1. 目标拆解：支持多国家的能力需求&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e7%9b%ae%e6%a0%87%e6%8b%86%e8%a7%a3%e6%94%af%e6%8c%81%e5%a4%9a%e5%9b%bd%e5%ae%b6%e7%9a%84%e8%83%bd%e5%8a%9b%e9%9c%80%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;维度&lt;/th&gt;&#xA;          &lt;th&gt;要求说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🏛 数据隔离&lt;/td&gt;&#xA;          &lt;td&gt;每个国家业务数据逻辑隔离（合规/监管要求）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🌐 业务配置差异&lt;/td&gt;&#xA;          &lt;td&gt;国家A/B 的工作日、货币、语言、时间等不同&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🧰 服务逻辑差异&lt;/td&gt;&#xA;          &lt;td&gt;部分微服务逻辑可能略有差异&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🚀 快速部署&lt;/td&gt;&#xA;          &lt;td&gt;新国家上线不需大改动，支持可配置部署&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;🔐 合规安全&lt;/td&gt;&#xA;          &lt;td&gt;数据主权（Data Residency）遵守各国法规&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h5 id=&#34;2-配置驱动的多国家支持&#34;&gt;&#xD;&#xA;  2. 配置驱动的多国家支持&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e9%85%8d%e7%bd%ae%e9%a9%b1%e5%8a%a8%e7%9a%84%e5%a4%9a%e5%9b%bd%e5%ae%b6%e6%94%af%e6%8c%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;方法&lt;/th&gt;&#xA;          &lt;th&gt;实现&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;配置中心&lt;/td&gt;&#xA;          &lt;td&gt;每个国家一份配置，如 &lt;code&gt;config_fr.yaml&lt;/code&gt;, &lt;code&gt;config_de.yaml&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;通过配置注入&lt;/td&gt;&#xA;          &lt;td&gt;控制：开放时间段、货币、支持语言、特殊逻辑开关&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;多租户标识（Tenant ID）&lt;/td&gt;&#xA;          &lt;td&gt;请求中传入国家 ID (&lt;code&gt;X-Country: FR&lt;/code&gt;)，统一识别&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Without ToC</title>
      <link>http://localhost:1313/docs/example/table-of-contents/without-toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/example/table-of-contents/without-toc/</guid>
      <description>&lt;h1 id=&#34;at-me-ipso-nepotibus-nunc-celebratior-genus&#34;&gt;&#xD;&#xA;  At me ipso nepotibus nunc celebratior genus&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#at-me-ipso-nepotibus-nunc-celebratior-genus&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;tanto-oblite&#34;&gt;&#xD;&#xA;  Tanto oblite&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tanto-oblite&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque&#xA;illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro&#xA;clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens&#xA;vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat&#xA;admonitu concidit, ad resimas vultus et rugas vultu &lt;strong&gt;dignamque&lt;/strong&gt; Siphnon.&lt;/p&gt;&#xA;&lt;p&gt;Quam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt&#xA;dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor&#xA;manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon&#xA;crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo&#xA;perque, fugisse pectora sorores.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/example/collapsed/3rd-level/4th-level/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/example/collapsed/3rd-level/4th-level/</guid>
      <description>&lt;h1 id=&#34;4th-level-of-menu&#34;&gt;&#xD;&#xA;  4th Level of Menu&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4th-level-of-menu&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;caesorum-illa-tu-sentit-micat-vestes-papyriferi&#34;&gt;&#xD;&#xA;  Caesorum illa tu sentit micat vestes papyriferi&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#caesorum-illa-tu-sentit-micat-vestes-papyriferi&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Inde aderam facti; Theseus vis de tauri illa peream. Oculos &lt;strong&gt;uberaque&lt;/strong&gt; non&#xA;regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo;&#xA;gestanda nitidi, vero? Dum ne pectoraque testantur.&lt;/p&gt;&#xA;&lt;p&gt;Venasque repulsa Samos qui, exspectatum eram animosque hinc, &#xD;&#xA;  &lt;a href=&#34;http://www.creveratnon.net/apricaaetheriis&#34;&gt;aut&#xA;manes&lt;/a&gt;, Assyrii. Cupiens auctoribus&#xA;pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae&#xA;iusto! Sedes ante dum superest &lt;strong&gt;extrema&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/example/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/example/hidden/</guid>
      <description>&lt;h1 id=&#34;this-page-is-hidden-in-menu&#34;&gt;&#xD;&#xA;  This page is hidden in menu&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#this-page-is-hidden-in-menu&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h1 id=&#34;quondam-non-pater-est-dignior-ille-eurotas&#34;&gt;&#xD;&#xA;  Quondam non pater est dignior ille Eurotas&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#quondam-non-pater-est-dignior-ille-eurotas&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;latent-te-facies&#34;&gt;&#xD;&#xA;  Latent te facies&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#latent-te-facies&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus,&#xA;frementes, qui in vel. Hippotades Peleus &#xD;&#xA;  &lt;a href=&#34;http://gratia.net/tot-qua.php&#34;&gt;pennas&#xA;conscia&lt;/a&gt; cuiquam Caeneus quas.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pater demittere evincitque reddunt&lt;/li&gt;&#xA;&lt;li&gt;Maxime adhuc pressit huc Danaas quid freta&lt;/li&gt;&#xA;&lt;li&gt;Soror ego&lt;/li&gt;&#xA;&lt;li&gt;Luctus linguam saxa ultroque prior Tatiumque inquit&lt;/li&gt;&#xA;&lt;li&gt;Saepe liquitur subita superata dederat Anius sudor&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cum-honorum-latona&#34;&gt;&#xD;&#xA;  Cum honorum Latona&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cum-honorum-latona&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;O fallor &#xD;&#xA;  &lt;a href=&#34;http://www.spectataharundine.org/aquas-relinquit.html&#34;&gt;in sustinui&#xA;iussorum&lt;/a&gt; equidem.&#xA;Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima&#xA;iamdudum maius?&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/hidden/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/hidden/1/</guid>
      <description>&lt;h2 id=&#34;list&#34;&gt;&#xD;&#xA;  List&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#list&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h4 id=&#34;增加插入元素&#34;&gt;&#xD;&#xA;  增加、插入元素&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a2%9e%e5%8a%a0%e6%8f%92%e5%85%a5%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;lst.append(x)：在末尾添加元素 x。&lt;/li&gt;&#xA;&lt;li&gt;lst.extend(iterable)：在末尾一次性追加一个可迭代对象中的所有元素，相当于多次 append。&lt;/li&gt;&#xA;&lt;li&gt;lst.insert(i, x)：在索引 i 位置插入元素 x，后面的元素右移。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;删除元素&#34;&gt;&#xD;&#xA;  删除元素&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a0%e9%99%a4%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;lst.pop([i])：删除并返回索引 i 处的元素，若不传 i，默认删除并返回最后一个元素。&lt;/li&gt;&#xA;&lt;li&gt;lst.remove(x)：删除列表中第一个值为 x 的元素；若不存在则抛 ValueError。&lt;/li&gt;&#xA;&lt;li&gt;del lst[i] / del lst[i:j]：通过 del 关键字删除索引 i 处或区间 [i:j] 内的元素。&lt;/li&gt;&#xA;&lt;li&gt;lst.clear()：清空列表，等价于 del lst[:]。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;查找与统计&#34;&gt;&#xD;&#xA;  查找与统计&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e6%89%be%e4%b8%8e%e7%bb%9f%e8%ae%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;lst.index(x[, start[, end]])：返回列表中值为 x 的第一个下标，可选指定查找区间。&lt;/li&gt;&#xA;&lt;li&gt;lst.count(x)：统计列表中值为 x 的出现次数。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;排序和反转&#34;&gt;&#xD;&#xA;  排序和反转&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%92%e5%ba%8f%e5%92%8c%e5%8f%8d%e8%bd%ac&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;lst.sort(key=None, reverse=False)：就地（in-place）升序排序，支持 key 函数和 reverse=True（降序）。&lt;/li&gt;&#xA;&lt;li&gt;lst.reverse()：就地反转列表顺序。&lt;/li&gt;&#xA;&lt;li&gt;sorted(lst, key=None, reverse=False)：内建函数，返回新的排序后列表，不改变原列表。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;复制&#34;&gt;&#xD;&#xA;  复制&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;lst.copy()：浅拷贝列表，相当于 lst[:]。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;其他常见操作&#34;&gt;&#xD;&#xA;  其他常见操作&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b6%e4%bb%96%e5%b8%b8%e8%a7%81%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;len(lst)：返回列表长度。&lt;/li&gt;&#xA;&lt;li&gt;lst[i] / lst[i:j:k]：索引或切片操作，可读可写（切片赋值时替换区间）。&lt;/li&gt;&#xA;&lt;li&gt;i in lst：判断元素是否在列表中，时间复杂度 O(n)。&lt;/li&gt;&#xA;&lt;li&gt;min(lst)、max(lst)：返回最小值/最大值（列表元素需可比较）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;set&#34;&gt;&#xD;&#xA;  Set&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#set&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h4 id=&#34;增加删除元素&#34;&gt;&#xD;&#xA;  增加、删除元素&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a2%9e%e5%8a%a0%e5%88%a0%e9%99%a4%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;s.add(x)：将元素 x 添加到集合中。&lt;/li&gt;&#xA;&lt;li&gt;s.update(iterable)：将可迭代对象中的所有元素加到集合中。&lt;/li&gt;&#xA;&lt;li&gt;s.remove(x)：删除元素 x，若不存在则抛 KeyError。&lt;/li&gt;&#xA;&lt;li&gt;s.discard(x)：删除元素 x，若不存在不抛异常。&lt;/li&gt;&#xA;&lt;li&gt;s.pop()：随机删除并返回一个元素（集合是无序的）。&lt;/li&gt;&#xA;&lt;li&gt;s.clear()：清空集合。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dict&#34;&gt;&#xD;&#xA;  Dict&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dict&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h4 id=&#34;访问赋值&#34;&gt;&#xD;&#xA;  访问、赋值&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%ae%bf%e9%97%ae%e8%b5%8b%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;d[key]：获取键 key 对应的值，若 key 不存在抛 KeyError。&lt;/li&gt;&#xA;&lt;li&gt;d.get(key[, default])：获取键 key 的值，若不存在返回 default（默认为 None）。&lt;/li&gt;&#xA;&lt;li&gt;d[key] = value：新增或修改键值对。&lt;/li&gt;&#xA;&lt;li&gt;d.setdefault(key[, default])：若 key 存在，返回对应值；若不存在，则将 key: default 加入字典并返回 default。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;删除&#34;&gt;&#xD;&#xA;  删除&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a0%e9%99%a4&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;d.pop(key[, default])：删除键 key 并返回对应值；若不存在且未给 default，抛 KeyError；若提供 default，返回 default。&lt;/li&gt;&#xA;&lt;li&gt;d.popitem()：随机（实际是 LIFO 顺序）删除并返回一对 (key, value)；Python3.7+ 中为删除最后插入的键值对。&lt;/li&gt;&#xA;&lt;li&gt;del d[key]：删除键 key，若不存在抛 KeyError。&lt;/li&gt;&#xA;&lt;li&gt;d.clear()：清空所有键值对。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;遍历&#34;&gt;&#xD;&#xA;  遍历&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;for k in d:：遍历所有键（同 for k in d.keys():）。&lt;/li&gt;&#xA;&lt;li&gt;for k, v in d.items():：同时遍历键和值。&lt;/li&gt;&#xA;&lt;li&gt;for v in d.values():：遍历所有值。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;更新&#34;&gt;&#xD;&#xA;  更新&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9b%b4%e6%96%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;d.update(other_dict_or_iterable)：用另一个字典或键值对可迭代对象更新 d，相同键会被覆盖，新键追加。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;视图views&#34;&gt;&#xD;&#xA;  视图（views）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a7%86%e5%9b%beviews&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;d.keys()、d.values()、d.items() 分别返回可迭代的视图对象，实时反映字典变化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;其他常用操作&#34;&gt;&#xD;&#xA;  其他常用操作&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b6%e4%bb%96%e5%b8%b8%e7%94%a8%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;len(d)：键值对数量。&lt;/li&gt;&#xA;&lt;li&gt;key in d：判断键是否存在于字典中。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/hidden/Java%E8%B5%84%E6%96%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/hidden/Java%E8%B5%84%E6%96%99/</guid>
      <description>&lt;h1 id=&#34;目录&#34;&gt;&#xD;&#xA;  目录&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e9%98%9f%e5%88%97&#34;&gt;队列&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e9%9d%9e%e9%98%bb%e5%a1%9e%e9%98%9f%e5%88%97%e9%80%82%e7%94%a8%e4%ba%8e%e5%8d%95%e7%ba%bf%e7%a8%8b%e6%88%96%e6%89%8b%e5%8a%a8%e5%90%8c%e6%ad%a5&#34;&gt;非阻塞队列（适用于单线程或手动同步）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e9%98%bb%e5%a1%9e%e9%98%9f%e5%88%97javautilconcurrent-%e5%8c%85&#34;&gt;阻塞队列（&lt;code&gt;java.util.concurrent&lt;/code&gt; 包）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e6%97%a0%e9%94%81%e9%ab%98%e6%80%a7%e8%83%bd%e9%98%9f%e5%88%97%e9%9d%9e%e9%98%bb%e5%a1%9e%e5%b9%b6%e5%8f%91%e9%98%9f%e5%88%97&#34;&gt;无锁/高性能队列（非阻塞并发队列）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%af%b9%e6%af%94%e6%80%bb%e7%bb%93&#34;&gt;对比总结&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%85%b8%e5%9e%8b%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;典型使用场景&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#linkedlist-%e7%9a%84%e4%b8%bb%e8%a6%81%e7%89%b9%e6%80%a7&#34;&gt;LinkedList 的主要特性&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#list-%e6%8e%a5%e5%8f%a3%e7%9a%84%e6%96%b9%e6%b3%95&#34;&gt;List 接口的方法&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#deque%e5%8f%8c%e7%ab%af%e9%98%9f%e5%88%97%e6%96%b9%e6%b3%95&#34;&gt;Deque（双端队列）方法&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#queue-%e6%96%b9%e6%b3%95&#34;&gt;Queue 方法&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%88%9b%e5%bb%ba%e7%ba%bf%e7%a8%8b%e7%9a%84%e4%b8%a4%e7%a7%8d%e6%96%b9%e5%bc%8f&#34;&gt;创建线程的两种方式&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e7%bb%a7%e6%89%bf-thread-%e7%b1%bb&#34;&gt;继承 &lt;code&gt;Thread&lt;/code&gt; 类&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0-runnable-%e6%8e%a5%e5%8f%a3%e6%8e%a8%e8%8d%90&#34;&gt;实现 &lt;code&gt;Runnable&lt;/code&gt; 接口（推荐）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#thread-%e5%b8%b8%e7%94%a8%e6%96%b9%e6%b3%95%e4%b8%80%e8%a7%88&#34;&gt;&lt;code&gt;Thread&lt;/code&gt; 常用方法一览&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;队列&#34;&gt;&#xD;&#xA;  队列&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;非阻塞队列适用于单线程或手动同步&#34;&gt;&#xD;&#xA;  非阻塞队列（适用于单线程或手动同步）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%9e%e9%98%bb%e5%a1%9e%e9%98%9f%e5%88%97%e9%80%82%e7%94%a8%e4%ba%8e%e5%8d%95%e7%ba%bf%e7%a8%8b%e6%88%96%e6%89%8b%e5%8a%a8%e5%90%8c%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;实现类&lt;/th&gt;&#xA;          &lt;th&gt;特点&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;实现了 &lt;code&gt;Deque&lt;/code&gt; 和 &lt;code&gt;Queue&lt;/code&gt;，可以作为普通队列或双端队列使用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;PriorityQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;元素按优先级排列（非 FIFO），不支持并发&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ArrayDeque&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;高性能双端队列，非线程安全&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;阻塞队列javautilconcurrent-包&#34;&gt;&#xD;&#xA;  阻塞队列（&lt;code&gt;java.util.concurrent&lt;/code&gt; 包）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%98%bb%e5%a1%9e%e9%98%9f%e5%88%97javautilconcurrent-%e5%8c%85&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;实现类&lt;/th&gt;&#xA;          &lt;th&gt;特点&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;有界阻塞队列，数组实现，支持 FIFO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;LinkedBlockingQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;可选容量的阻塞队列，链表实现，FIFO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;无界，带优先级排序，不保证 FIFO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;DelayQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;元素按延迟时间排序，仅在到期后才能取出&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;SynchronousQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;每个插入操作必须等待一个对应的取出操作（零容量）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;LinkedTransferQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;支持生产者等待消费者、容量无界&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;BlockingDeque&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;支持阻塞的双端队列操作（如 &lt;code&gt;LinkedBlockingDeque&lt;/code&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;无锁高性能队列非阻塞并发队列&#34;&gt;&#xD;&#xA;  无锁/高性能队列（非阻塞并发队列）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a0%e9%94%81%e9%ab%98%e6%80%a7%e8%83%bd%e9%98%9f%e5%88%97%e9%9d%9e%e9%98%bb%e5%a1%9e%e5%b9%b6%e5%8f%91%e9%98%9f%e5%88%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;实现类&lt;/th&gt;&#xA;          &lt;th&gt;特点&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;无界、基于链表、适用于高并发（非阻塞）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ConcurrentLinkedDeque&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;双端无锁队列，适合并发环境&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;对比总结&#34;&gt;&#xD;&#xA;  对比总结&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%af%b9%e6%af%94%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;队列类型&lt;/th&gt;&#xA;          &lt;th&gt;是否阻塞&lt;/th&gt;&#xA;          &lt;th&gt;是否线程安全&lt;/th&gt;&#xA;          &lt;th&gt;是否有界&lt;/th&gt;&#xA;          &lt;th&gt;是否支持优先级&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;LinkedList&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;PriorityQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;LinkedBlockingQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;可选&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;DelayQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;是（延迟时间）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;SynchronousQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;是（零容量）&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;是&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;          &lt;td&gt;否&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;典型使用场景&#34;&gt;&#xD;&#xA;  典型使用场景&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b8%e5%9e%8b%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;任务调度 / 消息中转： &lt;code&gt;LinkedBlockingQueue&lt;/code&gt;, &lt;code&gt;DelayQueue&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/hidden/SQL%E8%B5%84%E6%96%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/hidden/SQL%E8%B5%84%E6%96%99/</guid>
      <description>&lt;h1 id=&#34;目录&#34;&gt;&#xD;&#xA;  目录&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e4%b8%80%e6%9f%a5%e8%af%a2%e6%95%b0%e6%8d%aeselect&#34;&gt;查询数据（SELECT）&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e6%9f%a5%e8%af%a2&#34;&gt;基本查询&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e6%9f%a5%e8%af%a2%e6%89%80%e6%9c%89%e5%ad%97%e6%ae%b5&#34;&gt;查询所有字段&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e6%9d%a1%e4%bb%b6where&#34;&gt;使用条件（WHERE）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e6%8e%92%e5%ba%8forder-by&#34;&gt;排序（ORDER BY）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%8e%bb%e9%87%8ddistinct&#34;&gt;去重（DISTINCT）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%88%86%e9%a1%b5limit--offset&#34;&gt;分页（LIMIT / OFFSET）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e4%ba%8c%e6%8f%92%e5%85%a5%e6%95%b0%e6%8d%aeinsert&#34;&gt;插入数据（INSERT）&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e6%8f%92%e5%85%a5%e5%8d%95%e8%a1%8c&#34;&gt;插入单行&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e6%8f%92%e5%85%a5%e5%a4%9a%e8%a1%8c&#34;&gt;插入多行&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e4%b8%89%e6%9b%b4%e6%96%b0%e6%95%b0%e6%8d%aeupdate&#34;&gt;更新数据（UPDATE）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%9b%9b%e5%88%a0%e9%99%a4%e6%95%b0%e6%8d%aedelete&#34;&gt;删除数据（DELETE）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e4%ba%94%e8%81%9a%e5%90%88%e5%87%bd%e6%95%b0group-by--having&#34;&gt;聚合函数（GROUP BY + HAVING）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%85%ad%e8%bf%9e%e6%8e%a5%e6%9f%a5%e8%af%a2join&#34;&gt;连接查询（JOIN）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e4%b8%83%e5%ad%90%e6%9f%a5%e8%af%a2subquery&#34;&gt;子查询（Subquery）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%85%abcase-%e8%a1%a8%e8%be%be%e5%bc%8f%e7%b1%bb%e4%bc%bc-if&#34;&gt;CASE 表达式（类似 IF）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e4%b9%9d%e5%88%9b%e5%bb%ba%e5%92%8c%e7%ae%a1%e7%90%86%e8%a1%a8%e7%bb%93%e6%9e%84ddl&#34;&gt;创建和管理表结构（DDL）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%8d%81%e5%b8%b8%e7%94%a8%e8%bf%90%e7%ae%97%e7%ac%a6%e9%80%9f%e6%9f%a5&#34;&gt;常用运算符速查&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xD;&#xA;  &lt;a href=&#34;#%e5%b8%b8%e8%a7%81%e7%bb%84%e5%90%88%e4%be%8b%e5%ad%90&#34;&gt;常见组合例子&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;sql常用语法&#34;&gt;&#xD;&#xA;  SQL常用语法&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sql%e5%b8%b8%e7%94%a8%e8%af%ad%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;一查询数据select&#34;&gt;&#xD;&#xA;  一、查询数据（SELECT）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%9f%a5%e8%af%a2%e6%95%b0%e6%8d%aeselect&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;基本查询&#34;&gt;&#xD;&#xA;  基本查询&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e6%9c%ac%e6%9f%a5%e8%af%a2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; column1, column2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table_name&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查询所有字段&#34;&gt;&#xD;&#xA;  查询所有字段&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9f%a5%e8%af%a2%e6%89%80%e6%9c%89%e5%ad%97%e6%ae%b5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table_name&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用条件where&#34;&gt;&#xD;&#xA;  使用条件（WHERE）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e6%9d%a1%e4%bb%b6where&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; name, age&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; users&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; gender &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;排序order-by&#34;&gt;&#xD;&#xA;  排序（ORDER BY）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%92%e5%ba%8forder-by&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; name, age&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; users&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; age &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;, name &lt;span style=&#34;color:#66d9ef&#34;&gt;ASC&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;去重distinct&#34;&gt;&#xD;&#xA;  去重（DISTINCT）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8e%bb%e9%87%8ddistinct&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;DISTINCT&lt;/span&gt; city &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; users;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;分页limit--offset&#34;&gt;&#xD;&#xA;  分页（LIMIT / OFFSET）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e9%a1%b5limit--offset&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- MySQL / PostgreSQL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; users &lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;OFFSET&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;二插入数据insert&#34;&gt;&#xD;&#xA;  二、插入数据（INSERT）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e6%8f%92%e5%85%a5%e6%95%b0%e6%8d%aeinsert&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;插入单行&#34;&gt;&#xD;&#xA;  插入单行&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%92%e5%85%a5%e5%8d%95%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; users (name, age)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;插入多行&#34;&gt;&#xD;&#xA;  插入多行&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8f%92%e5%85%a5%e5%a4%9a%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; users (name, age)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Carol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;三更新数据update&#34;&gt;&#xD;&#xA;  三、更新数据（UPDATE）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e6%9b%b4%e6%96%b0%e6%95%b0%e6%8d%aeupdate&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; users&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;四删除数据delete&#34;&gt;&#xD;&#xA;  四、删除数据（DELETE）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9b%e5%88%a0%e9%99%a4%e6%95%b0%e6%8d%aedelete&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; users&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; age &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;五聚合函数group-by--having&#34;&gt;&#xD;&#xA;  五、聚合函数（GROUP BY + HAVING）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%94%e8%81%9a%e5%90%88%e5%87%bd%e6%95%b0group-by--having&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; department, &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; total&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; employees&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; department&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HAVING&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常见聚合函数：&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/hidden/System-Design%E8%B5%84%E6%96%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/hidden/System-Design%E8%B5%84%E6%96%99/</guid>
      <description>&lt;h1 id=&#34;患者预约系统&#34;&gt;&#xD;&#xA;  患者预约系统&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%82%a3%e8%80%85%e9%a2%84%e7%ba%a6%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;功能需求&#34;&gt;&#xD;&#xA;  功能需求&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%9f%e8%83%bd%e9%9c%80%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;医生：设置可用时间段。&lt;/p&gt;&#xA;&lt;p&gt;患者：查看可用时间段并预约。&lt;/p&gt;&#xA;&lt;p&gt;系统：返回包含预约时段的字典。&lt;/p&gt;&#xA;&lt;h2 id=&#34;系统架构&#34;&gt;&#xD;&#xA;  系统架构&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;系统采用简化的架构，主要包括以下组件：&lt;/p&gt;&#xA;&lt;p&gt;数据存储：使用 Map 存储医生的可用时间段和预约信息。&lt;/p&gt;&#xA;&lt;p&gt;预约管理：处理预约的创建和查询。&lt;/p&gt;&#xA;&lt;h2 id=&#34;java-实现示例&#34;&gt;&#xD;&#xA;  Java 实现示例&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java-%e5%ae%9e%e7%8e%b0%e7%a4%ba%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.time.LocalDateTime;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.time.format.DateTimeFormatter;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.*;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppointmentScheduler&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; doctorAvailability &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; appointments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 添加医生的可用时间段&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addDoctorAvailability&lt;/span&gt;(String doctorId, List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; slots) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        doctorAvailability.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(doctorId, slots);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 获取医生的可用预约时间段&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getAvailableSlots&lt;/span&gt;(String doctorId) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; available &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; allSlots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; doctorAvailability.&lt;span style=&#34;color:#a6e22e&#34;&gt;getOrDefault&lt;/span&gt;(doctorId, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; bookedSlots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; appointments.&lt;span style=&#34;color:#a6e22e&#34;&gt;getOrDefault&lt;/span&gt;(doctorId, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (TimeSlot slot : allSlots) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;bookedSlots.&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;(slot)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                available.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(slot);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; available;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 为患者预约指定的时间段&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bookAppointment&lt;/span&gt;(String doctorId, String patientId, TimeSlot desiredSlot) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; availableSlots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getAvailableSlots(doctorId);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (availableSlots.&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;(desiredSlot)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            appointments.&lt;span style=&#34;color:#a6e22e&#34;&gt;computeIfAbsent&lt;/span&gt;(doctorId, k &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;()).&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(desiredSlot);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;预约成功：&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; desiredSlot);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;预约失败，时间段不可用。&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 获取医生的所有预约&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getAppointments&lt;/span&gt;(String doctorId) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; appointments.&lt;span style=&#34;color:#a6e22e&#34;&gt;getOrDefault&lt;/span&gt;(doctorId, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeSlot&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; LocalDateTime start;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; LocalDateTime end;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeSlot&lt;/span&gt;(LocalDateTime start, LocalDateTime end) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 重写 equals 和 hashCode 方法，以便在列表中正确比较 TimeSlot 对象&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(Object obj) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; obj) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(obj &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; TimeSlot)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TimeSlot other &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (TimeSlot) obj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; start.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(other.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; end.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(other.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hashCode&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Objects.&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;(start, end);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        DateTimeFormatter formatter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateTimeFormatter.&lt;span style=&#34;color:#a6e22e&#34;&gt;ofPattern&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yyyy-MM-dd HH:mm&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; start.&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;(formatter) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; - &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; end.&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;(formatter);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 示例使用&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Main&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        AppointmentScheduler scheduler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AppointmentScheduler();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String doctorId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Dr_Smith&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String patientId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patient_1&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 创建医生的可用时间段&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; slots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        LocalDateTime startTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LocalDateTime.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(2025, 5, 14, 9, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 8; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            TimeSlot slot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TimeSlot(startTime.&lt;span style=&#34;color:#a6e22e&#34;&gt;plusMinutes&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 30), startTime.&lt;span style=&#34;color:#a6e22e&#34;&gt;plusMinutes&lt;/span&gt;((i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 30));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            slots.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(slot);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 添加医生的可用时间段&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        scheduler.&lt;span style=&#34;color:#a6e22e&#34;&gt;addDoctorAvailability&lt;/span&gt;(doctorId, slots);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 获取并显示可用时间段&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; availableSlots &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scheduler.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAvailableSlots&lt;/span&gt;(doctorId);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;可用时间段：&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (TimeSlot slot : availableSlots) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(slot);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 预约一个时间段&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TimeSlot desiredSlot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; availableSlots.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        scheduler.&lt;span style=&#34;color:#a6e22e&#34;&gt;bookAppointment&lt;/span&gt;(doctorId, patientId, desiredSlot);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 显示所有预约&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TimeSlot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; appointments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scheduler.&lt;span style=&#34;color:#a6e22e&#34;&gt;getAppointments&lt;/span&gt;(doctorId);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;所有预约：&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (TimeSlot appointment : appointments) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(appointment);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;说明&#34;&gt;&#xD;&#xA;  说明&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%b4%e6%98%8e&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;医生可用时间段：通过 addDoctorAvailability 方法添加，系统会根据指定的时间范围生成所有可用的时间段。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/hidden/%E6%9E%B6%E6%9E%84%E8%B5%84%E6%96%99/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/hidden/%E6%9E%B6%E6%9E%84%E8%B5%84%E6%96%99/</guid>
      <description>&lt;p&gt;Below are &lt;strong&gt;10 Java&lt;/strong&gt; and &lt;strong&gt;10 Microservices&lt;/strong&gt; technical questions—each with concise bilingual answers tailored to your background and the Doctolib Senior Software Engineer role.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;&#xD;&#xA;  Summary&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#summary&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;结合您在简历和动机信中强调的 &lt;strong&gt;Java 全栈&lt;/strong&gt;、&lt;strong&gt;微服务&lt;/strong&gt; 和 &lt;strong&gt;快速学习&lt;/strong&gt; 能力，以及 Doctolib 对 &lt;strong&gt;后端 Java&lt;/strong&gt;、&lt;strong&gt;可扩展架构&lt;/strong&gt; 的需求，下列问题覆盖核心概念、常见陷阱和实战应用，帮助您在面试中脱颖而出。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;一java-相关问题&#34;&gt;&#xD;&#xA;  一、Java 相关问题&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80java-%e7%9b%b8%e5%85%b3%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-为什么说-java-是平台无关的&#34;&gt;&#xD;&#xA;  1. 为什么说 Java 是平台无关的？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e4%b8%ba%e4%bb%80%e4%b9%88%e8%af%b4-java-%e6%98%af%e5%b9%b3%e5%8f%b0%e6%97%a0%e5%85%b3%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;EN:&lt;/strong&gt; Java bytecode runs on any JVM regardless of underlying OS or hardware, thanks to the “write once, run anywhere” design. (&#xD;&#xA;  &lt;a href=&#34;https://www.geeksforgeeks.org/java-interview-questions/?utm_source=chatgpt.com&#34; title=&#34;Java Interview Questions and Answers | GeeksforGeeks&#34;&gt;GeeksforGeeks&lt;/a&gt;)&#xA;&lt;strong&gt;CN：&lt;/strong&gt; Java 编译生成的字节码 (.class) 可以在任何安装了 JVM 的系统上运行，实现“一次编写，到处运行”(&#xD;&#xA;  &lt;a href=&#34;https://www.geeksforgeeks.org/java-interview-questions/?utm_source=chatgpt.com&#34; title=&#34;Java Interview Questions and Answers | GeeksforGeeks&#34;&gt;GeeksforGeeks&lt;/a&gt;)。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/shortcodes/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/shortcodes/buttons/</guid>
      <description>&lt;h1 id=&#34;buttons&#34;&gt;&#xD;&#xA;  Buttons&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#buttons&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Buttons are styled links that can lead to local page or external link.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xD;&#xA;  Example&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tpl&#34; data-lang=&#34;tpl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;relref&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;Get Home&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;Contribute&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a  href=&#34;http://localhost:1313/&#34;   class=&#34;book-btn&#34;&gt;Get Home&lt;/a&gt;&#xD;&#xA;&#xA;&lt;a  href=&#34;https://github.com/alex-shpak/hugo-book&#34;   target=&#34;_blank&#34; rel=&#34;noopener&#34;  class=&#34;book-btn&#34;&gt;Contribute&lt;/a&gt;&#xD;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/shortcodes/columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/shortcodes/columns/</guid>
      <description>&lt;h1 id=&#34;columns&#34;&gt;&#xD;&#xA;  Columns&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#columns&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Columns help organize shorter pieces of content horizontally for readability.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xD;&#xA;  Example&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{% columns [ratio=&amp;#34;1:1&amp;#34;] [class=&amp;#34;...&amp;#34;] %}} &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- begin columns block --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Left Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- magic separator, between columns --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Mid Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- magic separator, between columns --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Right Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{% /columns %}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xD;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xD;&#xA;&lt;h3 id=&#34;left-content&#34;&gt;&#xD;&#xA;  Left Content&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#left-content&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat&#xA;stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa&#xA;protulit, sed sed aere valvis inhaesuro Pallas animam: qui &lt;em&gt;quid&lt;/em&gt;, ignes.&#xA;Miseratus fonte Ditis conubia.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/shortcodes/details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/shortcodes/details/</guid>
      <description>&lt;h1 id=&#34;details&#34;&gt;&#xD;&#xA;  Details&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#details&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Details shortcode is a helper for &lt;code&gt;details&lt;/code&gt; html5 element. It is going to replace &lt;code&gt;expand&lt;/code&gt; shortcode.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xD;&#xA;  Example&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tpl&#34; data-lang=&#34;tpl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;details&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;## Markdown content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;details&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tpl&#34; data-lang=&#34;tpl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;details&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Title&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;## Markdown content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;details&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;details open&gt;&lt;summary&gt;Title&lt;/summary&gt;&#xD;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;markdown-content&#34;&gt;&#xD;&#xA;  Markdown content&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#markdown-content&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Lorem markdownum insigne&amp;hellip;&lt;/p&gt;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;/details&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/shortcodes/hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/shortcodes/hints/</guid>
      <description>&lt;h1 id=&#34;hints&#34;&gt;&#xD;&#xA;  Hints&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hints&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Hint shortcode can be used as hint/alerts/notification block.&lt;br&gt;&#xA;There are 3 colors to choose: &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt; and &lt;code&gt;danger&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tpl&#34; data-lang=&#34;tpl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hint&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;warning&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;danger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**Markdown content**  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hint&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example&#34;&gt;&#xD;&#xA;  Example&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;Markdown content&lt;/strong&gt;&lt;br&gt;&#xA;Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat&#xA;stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xD;&#xA;&lt;blockquote class=&#34;book-hint warning&#34;&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;Markdown content&lt;/strong&gt;&lt;br&gt;&#xA;Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat&#xA;stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/shortcodes/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/shortcodes/mermaid/</guid>
      <description>&lt;h1 id=&#34;mermaid-chart&#34;&gt;&#xD;&#xA;  Mermaid Chart&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mermaid-chart&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;  &lt;a href=&#34;https://mermaid-js.github.io/&#34;&gt;MermaidJS&lt;/a&gt; is library for generating svg charts and diagrams from text.&lt;/p&gt;&#xA;&lt;blockquote class=&#34;book-hint info&#34;&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;Override Mermaid initialization config&lt;/strong&gt;&lt;br&gt;&#xA;To override the &#xD;&#xA;  &lt;a href=&#34;https://mermaid-js.github.io/mermaid/#/Setup&#34;&gt;initialization config&lt;/a&gt; for Mermaid,&#xA;create a &lt;code&gt;mermaid.json&lt;/code&gt; file in your &lt;code&gt;assets&lt;/code&gt; folder!&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xD;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xD;&#xA;  Example&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xD;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tpl&#34; data-lang=&#34;tpl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mermaid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stateDiagram-v2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    State1: The state with a note&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    note right of State1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Important information! You can write&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        notes.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    end note&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    State1 --&amp;gt; State2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    note left of State2 : This is the note to the left.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mermaid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;&#xD;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xD;&#xA;&lt;script src=&#34;http://localhost:1313/mermaid.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;  &lt;script&gt;mermaid.initialize({&#xD;&#xA;  &#34;flowchart&#34;: {&#xD;&#xA;    &#34;useMaxWidth&#34;:true&#xD;&#xA;  },&#xD;&#xA;  &#34;theme&#34;: &#34;default&#34;&#xD;&#xA;}&#xD;&#xA;)&lt;/script&gt;&#xD;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;&#xD;&#xA;stateDiagram-v2&#xD;&#xA;    State1: The state with a note&#xD;&#xA;    note right of State1&#xD;&#xA;        Important information! You can write&#xD;&#xA;        notes.&#xD;&#xA;    end note&#xD;&#xA;    State1 --&gt; State2&#xD;&#xA;    note left of State2 : This is the note to the left.&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/shortcodes/section/first-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/shortcodes/section/first-page/</guid>
      <description>&lt;h1 id=&#34;first-page&#34;&gt;&#xD;&#xA;  First page&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#first-page&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/shortcodes/section/second-page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/shortcodes/section/second-page/</guid>
      <description>&lt;h1 id=&#34;second-page&#34;&gt;&#xD;&#xA;  Second Page&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#second-page&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/shortcodes/tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/shortcodes/tabs/</guid>
      <description>&lt;h1 id=&#34;tabs&#34;&gt;&#xD;&#xA;  Tabs&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tabs&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Tabs let you organize content by context, for example installation instructions for each supported platform.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tpl&#34; data-lang=&#34;tpl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tabs&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tab&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MacOS&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt; # MacOS Content &lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tab&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tab&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Linux&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt; # Linux Content &lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tab&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tab&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Windows&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt; # Windows Content &lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tab&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tabs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example&#34;&gt;&#xD;&#xA;  Example&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;book-tabs&#34;&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;input type=&#34;radio&#34; class=&#34;toggle&#34; name=&#34;tabs-0&#34; id=&#34;tabs-0-0&#34; checked=&#34;checked&#34; /&gt;&#xD;&#xA;&lt;label for=&#34;tabs-0-0&#34;&gt;MacOS&lt;/label&gt;&#xD;&#xA;&lt;div class=&#34;book-tabs-content markdown-inner&#34;&gt;&lt;h1 id=&#34;macos&#34;&gt;&#xD;&#xA;  MacOS&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#macos&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;This is tab &lt;strong&gt;MacOS&lt;/strong&gt; content.&lt;/p&gt;&#xA;&lt;p&gt;Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat&#xA;stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa&#xA;protulit, sed sed aere valvis inhaesuro Pallas animam: qui &lt;em&gt;quid&lt;/em&gt;, ignes.&#xA;Miseratus fonte Ditis conubia.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Doctolib 系统设计</title>
      <link>http://localhost:1313/docs/study/system-design/doctolib-system-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/doctolib-system-design/</guid>
      <description>&lt;p&gt;以下给出一个面向生产环境、可扩展且高可用的微服务架构设计方案，重点关注“患者搜索与预约”这一日历（Calendar）功能的重构。方案会针对各子系统划分、技术选型、可扩展性、容错、数据一致性、多区域部署等方面进行说明，并针对每个组件选用的语言或技术做出理由说明。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-非功能需求与业务规模&#34;&gt;&#xD;&#xA;  1. 非功能需求与业务规模&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%9d%9e%e5%8a%9f%e8%83%bd%e9%9c%80%e6%b1%82%e4%b8%8e%e4%b8%9a%e5%8a%a1%e8%a7%84%e6%a8%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;规模要求&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;患者数量：50M&lt;/li&gt;&#xA;&lt;li&gt;从业者数量：500K&lt;/li&gt;&#xA;&lt;li&gt;并发搜索：700 次/秒&lt;/li&gt;&#xA;&lt;li&gt;并发预约（booking）：90 次/秒&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持快速上线新国家/地区&lt;/li&gt;&#xA;&lt;li&gt;支持水平扩展（水平扩容实例）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;高可用、容错、降级&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单点故障需避免&lt;/li&gt;&#xA;&lt;li&gt;任一组件出故障时，应保证核心功能（如查询缓存、只读搜索）尽可能可用，写操作可做限流或降级提示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;数据一致性&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;预约（Booking）流程需强一致或可接受的约束下的弱一致（依实践设计），但冲突需被正确检测并妥善处理。&lt;/li&gt;&#xA;&lt;li&gt;搜索结果可采用近实时（Eventual Consistency）方式更新。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;响应时延&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;搜索响应：百毫秒级&lt;/li&gt;&#xA;&lt;li&gt;预约确认：次秒级体验&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全与合规&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;涉及医疗数据或个人信息，需符合相关法规（如 GDPR、HIPAA 等，视具体国家要求）&lt;/li&gt;&#xA;&lt;li&gt;传输加密（TLS），存储加密，细粒度权限控制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;可观察性&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全链路追踪、日志、指标监控、告警&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;自动化运维 / CI/CD&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于容器化与基础设施即代码（IaC），实现流水线自动化部署、滚动升级、灰度发布&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-总体架构概览&#34;&gt;&#xD;&#xA;  2. 总体架构概览&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e6%80%bb%e4%bd%93%e6%9e%b6%e6%9e%84%e6%a6%82%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;采用微服务架构 + API Gateway + 服务网格（可选） + 多区域部署 + 弹性伸缩。核心组件：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;API Gateway&lt;/strong&gt;：统一入口，做认证鉴权、限流、路由。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Auth 服务&lt;/strong&gt;：处理登录、认证、授权（OAuth2 / JWT）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;User 服务&lt;/strong&gt;：管理患者与从业者的 Profile 信息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Search 服务&lt;/strong&gt;：负责处理按位置、专科、可用时段等条件的搜索请求；依赖搜索索引（Elasticsearch）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Availability 服务&lt;/strong&gt;：维护和计算从业者可预约时段（working hours + 例外情况 + 节假日 + 已有预约冲突）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Booking 服务&lt;/strong&gt;：处理预约创建、修改、取消事务，确保并发安全与一致性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Notification 服务&lt;/strong&gt;：异步发送邮件/SMS/Push 推送（预约确认、提醒、变更通知）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Analytics / Monitoring 服务&lt;/strong&gt;（或外部）：收集日志、指标，用于监控与数据分析。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Payment / Billing 服务&lt;/strong&gt;（如需付费预约，可选）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;配置与管理服务&lt;/strong&gt;：管理多国家/地区配置（时区、节假日规则、语言、合规设置等）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步消息平台&lt;/strong&gt;（如 Kafka）：用于事件流（Event Bus），实现微服务间的解耦异步通信，如预约事件、索引更新、通知触发等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缓存层&lt;/strong&gt;：Redis，用于热点数据、短期缓存、分布式锁等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;：关系型数据库（PostgreSQL/CockroachDB/Vitess+MySQL/Aurora 等）；可根据跨区域需求选择分布式SQL（如 CockroachDB）或各区域独立数据库并做异步复制。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;搜索引擎&lt;/strong&gt;：Elasticsearch 或 OpenSearch，用于地理位置与属性过滤、可用性初筛索引等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;基础设施与部署&lt;/strong&gt;：容器化（Docker）、Kubernetes（EKS/GKE/AKS 或自托管 K8s）、Terraform/CloudFormation 管理资源，多区域集群部署。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;下面分模块详细阐述，并说明选型理由。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTTP 协议各版本比较</title>
      <link>http://localhost:1313/docs/study/network/http-comparison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/network/http-comparison/</guid>
      <description>&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;特性/版本&lt;/th&gt;&#xA;          &lt;th&gt;HTTP/1.0&lt;/th&gt;&#xA;          &lt;th&gt;HTTP/1.1&lt;/th&gt;&#xA;          &lt;th&gt;HTTP/2&lt;/th&gt;&#xA;          &lt;th&gt;HTTP/3&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;发布时间&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;1996&lt;/td&gt;&#xA;          &lt;td&gt;1997&lt;/td&gt;&#xA;          &lt;td&gt;2015&lt;/td&gt;&#xA;          &lt;td&gt;2022&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;连接管理&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;每个请求建立新连接（短连接）&lt;/td&gt;&#xA;          &lt;td&gt;默认长连接（Connection: keep-alive）&lt;/td&gt;&#xA;          &lt;td&gt;基于单个 TCP 连接多路复用&lt;/td&gt;&#xA;          &lt;td&gt;基于 QUIC（UDP）多路复用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;请求/响应格式&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;文本协议，明文&lt;/td&gt;&#xA;          &lt;td&gt;文本协议，明文&lt;/td&gt;&#xA;          &lt;td&gt;二进制协议，头压缩（HPACK）&lt;/td&gt;&#xA;          &lt;td&gt;二进制协议，改进头压缩（QPACK）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;多路复用&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;不支持&lt;/td&gt;&#xA;          &lt;td&gt;不支持&lt;/td&gt;&#xA;          &lt;td&gt;支持，多个请求复用一个连接&lt;/td&gt;&#xA;          &lt;td&gt;支持，且在 UDP 上减少延迟&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;请求优先级&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;不支持&lt;/td&gt;&#xA;          &lt;td&gt;不支持&lt;/td&gt;&#xA;          &lt;td&gt;支持请求优先级和流量控制&lt;/td&gt;&#xA;          &lt;td&gt;支持请求优先级和更灵活的流控&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;头部压缩&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;无&lt;/td&gt;&#xA;          &lt;td&gt;无&lt;/td&gt;&#xA;          &lt;td&gt;使用 HPACK 压缩头部&lt;/td&gt;&#xA;          &lt;td&gt;使用 QPACK 改进头部压缩&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;服务器推送&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;不支持&lt;/td&gt;&#xA;          &lt;td&gt;不支持&lt;/td&gt;&#xA;          &lt;td&gt;支持服务器推送&lt;/td&gt;&#xA;          &lt;td&gt;支持服务器推送&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;传输层协议&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;TCP&lt;/td&gt;&#xA;          &lt;td&gt;TCP&lt;/td&gt;&#xA;          &lt;td&gt;TCP&lt;/td&gt;&#xA;          &lt;td&gt;基于 QUIC（UDP）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;明文，通常搭配 HTTPS&lt;/td&gt;&#xA;          &lt;td&gt;明文，通常搭配 HTTPS&lt;/td&gt;&#xA;          &lt;td&gt;依赖 TLS 1.2 或更高&lt;/td&gt;&#xA;          &lt;td&gt;依赖 QUIC 的内置加密&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;性能提升点&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;无&lt;/td&gt;&#xA;          &lt;td&gt;长连接减少握手成本&lt;/td&gt;&#xA;          &lt;td&gt;多路复用减少队头阻塞（Head-of-Line Blocking）&lt;/td&gt;&#xA;          &lt;td&gt;QUIC减少连接建立时延和丢包重传延迟&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;应用场景&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;简单静态网页&lt;/td&gt;&#xA;          &lt;td&gt;大多数现有网站和API&lt;/td&gt;&#xA;          &lt;td&gt;高并发、多资源加载网站、视频流&lt;/td&gt;&#xA;          &lt;td&gt;对延迟敏感的应用，如游戏、视频&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;版本详细说明&#34;&gt;&#xD;&#xA;  版本详细说明&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%88%e6%9c%ac%e8%af%a6%e7%bb%86%e8%af%b4%e6%98%8e&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;http10&#34;&gt;&#xD;&#xA;  HTTP/1.0&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#http10&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个请求都要建立一个新的 TCP 连接，效率低。&lt;/li&gt;&#xA;&lt;li&gt;无持久连接，不支持流水线请求。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;http11&#34;&gt;&#xD;&#xA;  HTTP/1.1&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#http11&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;引入持久连接，默认开启长连接，减少连接建立次数。&lt;/li&gt;&#xA;&lt;li&gt;支持管道化请求（pipelining），但实际应用有限。&lt;/li&gt;&#xA;&lt;li&gt;支持分块传输编码（Chunked Transfer-Encoding），适合流式传输。&lt;/li&gt;&#xA;&lt;li&gt;缺点：多个请求依然串行，存在队头阻塞（Head-of-Line Blocking）问题。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;http2&#34;&gt;&#xD;&#xA;  HTTP/2&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#http2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于二进制分帧（frame）传输，多路复用多个请求在一个 TCP 连接上并发执行。&lt;/li&gt;&#xA;&lt;li&gt;头部使用 HPACK 压缩，减少冗余。&lt;/li&gt;&#xA;&lt;li&gt;支持服务器推送，服务器主动发送资源。&lt;/li&gt;&#xA;&lt;li&gt;解决了 HTTP/1.x 的队头阻塞问题，但仍受 TCP 队头阻塞影响。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;http3&#34;&gt;&#xD;&#xA;  HTTP/3&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#http3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于 QUIC 协议（基于 UDP），减少连接建立延迟和重传延迟。&lt;/li&gt;&#xA;&lt;li&gt;QUIC 内置加密和多路复用，避免 TCP 队头阻塞。&lt;/li&gt;&#xA;&lt;li&gt;更适合移动端和高丢包环境，提升用户体验。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Java.util.concurrent 包</title>
      <link>http://localhost:1313/docs/introspection/juc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/introspection/juc/</guid>
      <description>&lt;p&gt;Java 中的 &lt;strong&gt;JUC（java.util.concurrent）&lt;/strong&gt; 是并发编程的核心包，提供了大量强大、高性能的工具类来简化线程操作和并发控制。&lt;/p&gt;&#xA;&lt;p&gt;下面是对 JUC 中&lt;strong&gt;最常用类和接口的详细分类与解析&lt;/strong&gt;，帮助你构建对 Java 并发编程的完整认识。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-一juc-核心模块总览&#34;&gt;&#xD;&#xA;  🌳 一、JUC 核心模块总览&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%80juc-%e6%a0%b8%e5%bf%83%e6%a8%a1%e5%9d%97%e6%80%bb%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java.util.concurrent.*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Executor 框架（线程池）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 同步器（Locks、CountDownLatch、Semaphore、CyclicBarrier）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 并发集合（ConcurrentHashMap、CopyOnWriteArrayList 等）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── 原子变量（AtomicXXX）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── Fork/Join 框架&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── CompletableFuture、Future&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── ScheduledExecutor、BlockingQueue 等&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-二executor-框架线程池相关&#34;&gt;&#xD;&#xA;  🚀 二、Executor 框架（线程池相关）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8cexecutor-%e6%a1%86%e6%9e%b6%e7%ba%bf%e7%a8%8b%e6%b1%a0%e7%9b%b8%e5%85%b3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;类/接口&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;最基础的接口，只有一个方法 &lt;code&gt;execute(Runnable)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;提供 &lt;code&gt;submit()&lt;/code&gt;、&lt;code&gt;shutdown()&lt;/code&gt; 等高级控制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;可自定义线程池参数的核心实现类&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ScheduledExecutorService&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;支持定时或周期任务执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;工厂类，提供常用线程池的创建方法（如 &lt;code&gt;newFixedThreadPool()&lt;/code&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;-推荐使用方式&#34;&gt;&#xD;&#xA;  ☑️ 推荐使用方式&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%8e%a8%e8%8d%90%e4%bd%bf%e7%94%a8%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;避免 &lt;code&gt;Executors.newXxx()&lt;/code&gt; 静态方法，建议自己构造 &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ExecutorService pool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ThreadPoolExecutor(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    4, 8, 60, TimeUnit.&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LinkedBlockingQueue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(100)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-三同步器lock信号量栅栏等&#34;&gt;&#xD;&#xA;  🧱 三、同步器（Lock、信号量、栅栏等）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%89%e5%90%8c%e6%ad%a5%e5%99%a8lock%e4%bf%a1%e5%8f%b7%e9%87%8f%e6%a0%85%e6%a0%8f%e7%ad%89&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-lockcondition&#34;&gt;&#xD;&#xA;  1. Lock/Condition&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-lockcondition&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;类/接口&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;比 &lt;code&gt;synchronized&lt;/code&gt; 更灵活，支持中断、非阻塞获取&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ReentrantLock&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;可重入锁，支持公平/非公平锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;ReadWriteLock&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;读写分离，提高并发性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;类似 &lt;code&gt;Object.wait/notify&lt;/code&gt;，配合 Lock 使用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka Exactly-Once</title>
      <link>http://localhost:1313/docs/study/middleware/kafka/exactly-once/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/middleware/kafka/exactly-once/</guid>
      <description>&lt;h1 id=&#34;流程&#34;&gt;&#xD;&#xA;  流程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;幂等生产者（生产者 Producer ID + 分区维护 Sequence Number）&lt;/li&gt;&#xA;&lt;li&gt;事务协调者带 _transaction_state（用户 Transaction ID + 生产者 epoch + 分区 Control Messages + 消费者 LSO）&lt;/li&gt;&#xA;&lt;li&gt;完整流程：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;事务初始化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;生产者寻找事务协调者（Transactional Coordinator）。&lt;/li&gt;&#xA;&lt;li&gt;生产者向事务协调者获取  PID。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;事务开始&lt;/li&gt;&#xA;&lt;li&gt;Consume-Process-Produce：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;消费者（流处理应用同时作为消费者和生产者）从源 Topic 消费消息并做处理。&lt;/li&gt;&#xA;&lt;li&gt;生产者同步消息所要发往的  Topic-Partition 信息给事务协调者。&lt;/li&gt;&#xA;&lt;li&gt;生产者向目标 Topic-Partition 发送消息。&lt;/li&gt;&#xA;&lt;li&gt;生产者同步提交位点所要发往的  Topic-Partition （内部 Topic __consumer_offsets）信息给事务协调者。&lt;/li&gt;&#xA;&lt;li&gt;生产者通知 消费组协调者（Group Coordinator，服务端负责感知消费组变化的 Broker）提交位点（仅持久化位点，但并 未更新缓存，因此直到事务提交前对消费者不可见）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;提交/回滚事务&#xA;&lt;ul&gt;&#xA;&lt;li&gt;生产者告知事务协调者事务 执行结果（提交/回滚）。&lt;/li&gt;&#xA;&lt;li&gt;事务协调者向事务所涉及的分区 Leader 发送 控制消息标记事务执行结果，同时事务协调者给生产者响应事务已提交/回滚成功。&lt;/li&gt;&#xA;&lt;li&gt;待所有分区 Leader 将控制消息持久化（任何一个失败都会进行无限重试）后，事务协调者将该事务状态修改为已提交/回滚，事务结束。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;下面基于上述 Exactly-Once 语义实现的内容，对“重要场景”与“关键设计”分别进行归纳与解释。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;归纳与解释&#34;&gt;&#xD;&#xA;  归纳与解释&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bd%92%e7%ba%b3%e4%b8%8e%e8%a7%a3%e9%87%8a&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;1-重要场景及-kafka-在其中的角色&#34;&gt;&#xD;&#xA;  1. 重要场景及 Kafka 在其中的角色&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e9%87%8d%e8%a6%81%e5%9c%ba%e6%99%af%e5%8f%8a-kafka-%e5%9c%a8%e5%85%b6%e4%b8%ad%e7%9a%84%e8%a7%92%e8%89%b2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;At-Most-Once / At-Least-Once vs Exactly-Once 流处理场景对比&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>KaTeX</title>
      <link>http://localhost:1313/docs/shortcodes/katex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/shortcodes/katex/</guid>
      <description>&lt;h1 id=&#34;katex&#34;&gt;&#xD;&#xA;  KaTeX&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#katex&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;KaTeX shortcode let you render math typesetting in markdown document. See &#xD;&#xA;  &lt;a href=&#34;https://katex.org/&#34;&gt;KaTeX&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xD;&#xA;  Example&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xD;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{&amp;lt; katex display=true &amp;gt;}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f(x) = &lt;span style=&#34;color:#66d9ef&#34;&gt;\int&lt;/span&gt;_{-&lt;span style=&#34;color:#66d9ef&#34;&gt;\infty&lt;/span&gt;}^&lt;span style=&#34;color:#66d9ef&#34;&gt;\infty\hat&lt;/span&gt; f(&lt;span style=&#34;color:#66d9ef&#34;&gt;\xi&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;\,&lt;/span&gt;e^{2 &lt;span style=&#34;color:#66d9ef&#34;&gt;\pi&lt;/span&gt; i &lt;span style=&#34;color:#66d9ef&#34;&gt;\xi&lt;/span&gt; x}&lt;span style=&#34;color:#66d9ef&#34;&gt;\,&lt;/span&gt;d&lt;span style=&#34;color:#66d9ef&#34;&gt;\xi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{&amp;lt; /katex &amp;gt;}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;&#xD;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xD;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://localhost:1313/katex/katex.min.css&#34; /&gt;&#xD;&#xA;&lt;script defer src=&#34;http://localhost:1313/katex/katex.min.js&#34;&gt;&lt;/script&gt;&#xD;&#xA;&lt;script defer src=&#34;http://localhost:1313/katex/auto-render.min.js&#34; onload=&#34;renderMathInElement(document.body);&#34;&gt;&lt;/script&gt;&lt;span&gt;&#xD;&#xA;  \[&#xD;&#xA;f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi&#xD;&#xA;\]&#xD;&#xA;&lt;/span&gt;&#xD;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;h2 id=&#34;display-mode-example&#34;&gt;&#xD;&#xA;  Display Mode Example&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#display-mode-example&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Here is some inline example: &lt;span&gt;&#xD;&#xA;  \(\pi(x)\)&#xD;&#xA;&lt;/span&gt;&#xD;&#xA;, rendered in the same line. And below is &lt;code&gt;display&lt;/code&gt; example, having &lt;code&gt;display: block&lt;/code&gt;&#xA;&lt;span&gt;&#xD;&#xA;  \[&#xD;&#xA;f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi&#xD;&#xA;\]&#xD;&#xA;&lt;/span&gt;&#xD;&#xA;&#xA;Text continues here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Netty 详解</title>
      <link>http://localhost:1313/docs/study/middleware/netty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/middleware/netty/</guid>
      <description>&lt;h2 id=&#34;1-netty-简介&#34;&gt;&#xD;&#xA;  1. Netty 简介&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-netty-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Netty 是一个基于 Java 的异步事件驱动网络应用框架，简化了网络通信程序的开发。它提供高性能、高可靠性的异步网络通信能力，支持多种协议，广泛应用于分布式系统、高性能服务器、RPC 框架等场景。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-netty-架构与核心组件&#34;&gt;&#xD;&#xA;  2. Netty 架构与核心组件&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-netty-%e6%9e%b6%e6%9e%84%e4%b8%8e%e6%a0%b8%e5%bf%83%e7%bb%84%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;21-线程模型&#34;&gt;&#xD;&#xA;  2.1 线程模型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%ba%bf%e7%a8%8b%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;EventLoopGroup&lt;/strong&gt;：线程组，管理一组 EventLoop。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;EventLoop&lt;/strong&gt;：负责处理 Channel 的所有 I/O 操作，单线程处理多个 Channel，避免多线程同步开销。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通常服务端有两组线程池：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;BossGroup&lt;/strong&gt;：负责接受新连接。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;WorkerGroup&lt;/strong&gt;：负责处理连接读写。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;22-channel&#34;&gt;&#xD;&#xA;  2.2 Channel&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-channel&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;表示一个网络连接，封装了底层的 Socket 通道。&#xA;常用实现有：&lt;code&gt;NioSocketChannel&lt;/code&gt;（基于 NIO），&lt;code&gt;EpollSocketChannel&lt;/code&gt;（Linux epoll），&lt;code&gt;OioSocketChannel&lt;/code&gt;（阻塞 I/O）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;23-channelpipeline-与-channelhandler&#34;&gt;&#xD;&#xA;  2.3 ChannelPipeline 与 ChannelHandler&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-channelpipeline-%e4%b8%8e-channelhandler&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ChannelPipeline&lt;/strong&gt;：相当于责任链，保存一系列 ChannelHandler。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ChannelHandler&lt;/strong&gt;：处理 I/O 事件和数据，分为入站（Inbound）和出站（Outbound）两种。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;消息流经 ChannelPipeline 依次传递给 ChannelHandler 进行处理，支持解码、编码、业务逻辑等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;24-future-与-promise&#34;&gt;&#xD;&#xA;  2.4 Future 与 Promise&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-future-%e4%b8%8e-promise&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ChannelFuture&lt;/strong&gt;：异步操作结果的表示，所有 I/O 操作均异步返回 ChannelFuture。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Promise&lt;/strong&gt;：可以写入结果的 Future，便于异步操作结果通知。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-netty-工作流程&#34;&gt;&#xD;&#xA;  3. Netty 工作流程&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-netty-%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;启动 ServerBootstrap&lt;/strong&gt;，绑定端口。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;BossGroup 监听客户端连接&lt;/strong&gt;，收到连接后注册到 WorkerGroup 的 EventLoop。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;WorkerGroup 负责 I/O 读写事件&lt;/strong&gt;，触发 ChannelPipeline 中对应的 Handler。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据处理&lt;/strong&gt;：数据从网络读入 ByteBuf，经过解码器转为业务消息，业务 Handler 处理后编码返回 ByteBuf 写回客户端。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步操作&lt;/strong&gt;：所有 I/O 操作均非阻塞，调用后立即返回 ChannelFuture，完成时触发监听器。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;4-关键特性&#34;&gt;&#xD;&#xA;  4. 关键特性&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e5%85%b3%e9%94%ae%e7%89%b9%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步非阻塞&lt;/strong&gt;：基于 Java NIO，提升高并发场景性能。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;零拷贝&lt;/strong&gt;：通过 ByteBuf 实现零拷贝内存管理，减少 GC 压力。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高度可定制&lt;/strong&gt;：支持自定义协议编解码、各种传输协议。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;事件驱动&lt;/strong&gt;：支持丰富事件回调，便于扩展。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;跨平台支持&lt;/strong&gt;：支持 NIO、EPOLL、KQueue 等多种 I/O 模型。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;5-常用模块&#34;&gt;&#xD;&#xA;  5. 常用模块&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e5%b8%b8%e7%94%a8%e6%a8%a1%e5%9d%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ByteBuf&lt;/strong&gt;：高性能的缓冲区，替代 Java NIO ByteBuffer。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Codec&lt;/strong&gt;：编解码器，如 &lt;code&gt;StringDecoder&lt;/code&gt;、&lt;code&gt;ProtobufDecoder&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Handler&lt;/strong&gt;：业务逻辑处理。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Bootstrap / ServerBootstrap&lt;/strong&gt;：客户端和服务端启动类。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;6-使用场景举例&#34;&gt;&#xD;&#xA;  6. 使用场景举例&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af%e4%b8%be%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高性能聊天系统（IM）&lt;/li&gt;&#xA;&lt;li&gt;分布式 RPC 框架（Dubbo 等）&lt;/li&gt;&#xA;&lt;li&gt;实时游戏服务器&lt;/li&gt;&#xA;&lt;li&gt;高并发 HTTP/2 和 WebSocket 服务&lt;/li&gt;&#xA;&lt;li&gt;自定义协议通信服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;7-简单示例&#34;&gt;&#xD;&#xA;  7. 简单示例&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7-%e7%ae%80%e5%8d%95%e7%a4%ba%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EchoServer&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EventLoopGroup bossGroup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NioEventLoopGroup(1);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EventLoopGroup workerGroup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NioEventLoopGroup();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ServerBootstrap b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ServerBootstrap();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            b.&lt;span style=&#34;color:#a6e22e&#34;&gt;group&lt;/span&gt;(bossGroup, workerGroup)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             .&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;(NioServerSocketChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             .&lt;span style=&#34;color:#a6e22e&#34;&gt;childHandler&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ChannelInitializer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SocketChannel&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initChannel&lt;/span&gt;(SocketChannel ch) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     ChannelPipeline pipeline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ch.&lt;span style=&#34;color:#a6e22e&#34;&gt;pipeline&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     pipeline.&lt;span style=&#34;color:#a6e22e&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringDecoder());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     pipeline.&lt;span style=&#34;color:#a6e22e&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringEncoder());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     pipeline.&lt;span style=&#34;color:#a6e22e&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SimpleChannelInboundHandler&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;channelRead0&lt;/span&gt;(ChannelHandlerContext ctx, String msg) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; msg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             ctx.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeAndFlush&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Echo: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; msg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ChannelFuture f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(8080).&lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            f.&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;closeFuture&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            bossGroup.&lt;span style=&#34;color:#a6e22e&#34;&gt;shutdownGracefully&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            workerGroup.&lt;span style=&#34;color:#a6e22e&#34;&gt;shutdownGracefully&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;</description>
    </item>
    <item>
      <title>OpenTelemetry 全链路追踪</title>
      <link>http://localhost:1313/docs/introspection/trace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/introspection/trace/</guid>
      <description>&lt;p&gt;在微服务架构中使用 OpenTelemetry 实现全链路追踪是提升可 observability（可观测性）和系统可维护性的关键步骤。以下是一些最佳实践，涵盖从设计、实现到部署运维的完整视角。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-一opentelemetry-简介&#34;&gt;&#xD;&#xA;  🌐 一、OpenTelemetry 简介&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%80opentelemetry-%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;OpenTelemetry 是由 CNCF（Cloud Native Computing Foundation）托管的开放标准，支持 &lt;strong&gt;分布式追踪（Tracing）&lt;/strong&gt;、&lt;strong&gt;指标（Metrics）&lt;/strong&gt; 和 &lt;strong&gt;日志（Logs）&lt;/strong&gt; 的采集与导出。它支持多语言，能够将数据导出至多种后端（如 Jaeger、Prometheus、Grafana Tempo、Datadog、Zipkin 等）。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-二全链路追踪的核心概念&#34;&gt;&#xD;&#xA;  📦 二、全链路追踪的核心概念&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%85%a8%e9%93%be%e8%b7%af%e8%bf%bd%e8%b8%aa%e7%9a%84%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Trace（追踪）&lt;/strong&gt;：一次完整的调用链（如用户下单请求）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Span（跨度）&lt;/strong&gt;：调用链中的单个操作（如订单服务调用库存服务）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Context（上下文）&lt;/strong&gt;：跨服务传递 trace 的元信息（如 trace id）。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-三在微服务架构中使用-opentelemetry-的最佳实践&#34;&gt;&#xD;&#xA;  🔧 三、在微服务架构中使用 OpenTelemetry 的最佳实践&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%89%e5%9c%a8%e5%be%ae%e6%9c%8d%e5%8a%a1%e6%9e%b6%e6%9e%84%e4%b8%ad%e4%bd%bf%e7%94%a8-opentelemetry-%e7%9a%84%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;-1-统一规范和自动化接入&#34;&gt;&#xD;&#xA;  ✅ 1. &lt;strong&gt;统一规范和自动化接入&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-%e7%bb%9f%e4%b8%80%e8%a7%84%e8%8c%83%e5%92%8c%e8%87%aa%e5%8a%a8%e5%8c%96%e6%8e%a5%e5%85%a5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;选择统一的 SDK 版本&lt;/strong&gt;：所有服务使用相同版本的 OpenTelemetry SDK。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;使用自动注入的方式接入 HTTP / gRPC 框架&lt;/strong&gt;：例如 Spring Boot + Spring Cloud Sleuth，Python FastAPI + OpenTelemetry middleware，Go + OpenTelemetry HTTP 插件。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;尽量避免手动创建 span，使用封装的 middleware 或框架支持&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-2-统一上下文传递context-propagation&#34;&gt;&#xD;&#xA;  🔗 2. &lt;strong&gt;统一上下文传递（Context Propagation）&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-%e7%bb%9f%e4%b8%80%e4%b8%8a%e4%b8%8b%e6%96%87%e4%bc%a0%e9%80%92context-propagation&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用标准协议（如 W3C Trace Context）传递 trace 上下文。&lt;/li&gt;&#xA;&lt;li&gt;在所有服务间调用（REST/gRPC/Kafka/NATS）时，显式或自动传递 &lt;code&gt;traceparent&lt;/code&gt;、&lt;code&gt;baggage&lt;/code&gt; 等 headers。&lt;/li&gt;&#xA;&lt;li&gt;确保所有服务的网关、API 层、异步消息系统都能正确传递 trace context。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-3-选择合适的后端exporter&#34;&gt;&#xD;&#xA;  📤 3. &lt;strong&gt;选择合适的后端（Exporter）&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-3-%e9%80%89%e6%8b%a9%e5%90%88%e9%80%82%e7%9a%84%e5%90%8e%e7%ab%afexporter&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;常见导出目标：&lt;/p&gt;</description>
    </item>
    <item>
      <title>PostgreSQL vs MySQL (InnoDB) 选型</title>
      <link>http://localhost:1313/docs/study/database/postgresql-mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/database/postgresql-mysql/</guid>
      <description>&lt;p&gt;PostgreSQL 和 MySQL 的选型，常见于后端架构设计中。两者都是主流开源关系型数据库，各有优势。决定性因素往往取决于项目的需求、团队的经验和使用场景。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-决定-postgresql-vs-mysql-的关键几点如下&#34;&gt;&#xD;&#xA;  ✅ 决定 PostgreSQL vs MySQL 的关键几点如下：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%86%b3%e5%ae%9a-postgresql-vs-mysql-%e7%9a%84%e5%85%b3%e9%94%ae%e5%87%a0%e7%82%b9%e5%a6%82%e4%b8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;决定点&lt;/th&gt;&#xA;          &lt;th&gt;PostgreSQL&lt;/th&gt;&#xA;          &lt;th&gt;MySQL&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;1. 标准兼容性 &amp;amp; 复杂查询支持&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;✅ 优秀的 SQL 标准兼容性，支持复杂查询、窗口函数、CTE、并发写优化等高级特性。适合复杂业务逻辑。&lt;/td&gt;&#xA;          &lt;td&gt;❌ 查询功能稍弱，对复杂查询支持不如 Postgres。更适合 CRUD 类型系统。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;2. JSON 支持&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;✅ 强大的 JSON / JSONB 数据类型支持，几乎等同于文档数据库功能。&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 有 JSON 支持，但功能较弱，主要用于存储，不利于复杂查询。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;3. 一致性与事务支持&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;✅ 真正的 MVCC，多版本并发控制，实现级别的事务隔离（支持 SERIALIZABLE），更适合金融/高可靠系统。&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ InnoDB 虽支持事务，但隔离性和一致性在高并发时略逊一筹。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;4. 插件/扩展能力&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;✅ 支持用户自定义函数（UDF）、PostGIS、全文检索等强大扩展机制。&lt;/td&gt;&#xA;          &lt;td&gt;❌ 扩展性不如 Postgres，主要靠内置功能。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;5. 性能（单点读写）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 查询优化能力强，但单纯的 CRUD 性能略低于 MySQL。&lt;/td&gt;&#xA;          &lt;td&gt;✅ 对简单查询/写入优化很好，CRUD 系统性能优于 Postgres。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;6. 社区生态/学习成本&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 功能多但复杂，学习曲线略高，文档丰富。&lt;/td&gt;&#xA;          &lt;td&gt;✅ 使用更广泛，生态成熟，学习上手快。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;7. 兼容性和托管服务&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;✅ AWS RDS, Aurora, GCP, Azure 均支持，兼容较好。&lt;/td&gt;&#xA;          &lt;td&gt;✅ 所有主流云平台支持，部分平台如阿里云/腾讯云更偏向 MySQL。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;8. 数据量与扩展性&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;✅ 更适合大数据场景（例如 TB 级别），表分区、逻辑分区做得较好。&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 表结构大时管理不如 PostgreSQL 灵活。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-结论建议实际选型建议&#34;&gt;&#xD;&#xA;  🏁 结论建议（实际选型建议）：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%bb%93%e8%ae%ba%e5%bb%ba%e8%ae%ae%e5%ae%9e%e9%99%85%e9%80%89%e5%9e%8b%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;-选择-postgresql-的场景&#34;&gt;&#xD;&#xA;  ✅ 选择 PostgreSQL 的场景：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%80%89%e6%8b%a9-postgresql-%e7%9a%84%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;业务逻辑复杂，需要高级查询功能；&lt;/li&gt;&#xA;&lt;li&gt;大量使用 JSON / 半结构化数据；&lt;/li&gt;&#xA;&lt;li&gt;需要强一致性事务；&lt;/li&gt;&#xA;&lt;li&gt;构建复杂系统（如 BI、ERP、金融）；&lt;/li&gt;&#xA;&lt;li&gt;需要空间数据、全文搜索或其他扩展功能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-选择-mysql-的场景&#34;&gt;&#xD;&#xA;  ✅ 选择 MySQL 的场景：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%80%89%e6%8b%a9-mysql-%e7%9a%84%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Web 系统、轻量 CRUD 类应用；&lt;/li&gt;&#xA;&lt;li&gt;对性能要求高但事务需求不高；&lt;/li&gt;&#xA;&lt;li&gt;团队已有 MySQL 经验；&lt;/li&gt;&#xA;&lt;li&gt;快速迭代的初创项目或中小型系统；&lt;/li&gt;&#xA;&lt;li&gt;云平台默认提供（如阿里云、腾讯云偏好 MySQL）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-一致性与事务支持postgresql-vs-mysql&#34;&gt;&#xD;&#xA;  ✅ 一致性与事务支持：PostgreSQL vs MySQL&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%80%e8%87%b4%e6%80%a7%e4%b8%8e%e4%ba%8b%e5%8a%a1%e6%94%af%e6%8c%81postgresql-vs-mysql&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;-1-postgresql事务一致性更强&#34;&gt;&#xD;&#xA;  🔹 1. PostgreSQL：事务一致性更强&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-postgresql%e4%ba%8b%e5%8a%a1%e4%b8%80%e8%87%b4%e6%80%a7%e6%9b%b4%e5%bc%ba&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;-真正的-mvcc多版本并发控制&#34;&gt;&#xD;&#xA;  ✅ 真正的 &lt;strong&gt;MVCC（多版本并发控制）&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%9c%9f%e6%ad%a3%e7%9a%84-mvcc%e5%a4%9a%e7%89%88%e6%9c%ac%e5%b9%b6%e5%8f%91%e6%8e%a7%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PostgreSQL 对每个事务生成&lt;strong&gt;自己的数据快照&lt;/strong&gt;，实现无锁读写。&lt;/li&gt;&#xA;&lt;li&gt;写入时并不会阻塞读取，冲突由事务隔离等级控制，保证并发安全。&lt;/li&gt;&#xA;&lt;li&gt;实现机制更贴近学术定义，&lt;strong&gt;事务隔离更严格、可控性更好&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-支持完整的-sql-标准隔离级别&#34;&gt;&#xD;&#xA;  ✅ 支持完整的 SQL 标准隔离级别：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%94%af%e6%8c%81%e5%ae%8c%e6%95%b4%e7%9a%84-sql-%e6%a0%87%e5%87%86%e9%9a%94%e7%a6%bb%e7%ba%a7%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;READ COMMITTED&lt;/code&gt;（默认）&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;REPEATABLE READ&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SERIALIZABLE&lt;/code&gt;（通过 Serializable Snapshot Isolation 实现，非锁定式，适合金融类应用）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-高度可靠的-wal预写日志机制&#34;&gt;&#xD;&#xA;  ✅ 高度可靠的 WAL（预写日志）机制：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%ab%98%e5%ba%a6%e5%8f%af%e9%9d%a0%e7%9a%84-wal%e9%a2%84%e5%86%99%e6%97%a5%e5%bf%97%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;所有修改操作先写日志，再写磁盘，崩溃后可以精确恢复。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据恢复机制成熟、安全性更高&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-衍生优势&#34;&gt;&#xD;&#xA;  🔍 衍生优势：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%a1%8d%e7%94%9f%e4%bc%98%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;更适合对&lt;strong&gt;数据一致性要求极高&lt;/strong&gt;的系统，如：银行、交易所、账本类系统。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-2-mysql一致性不如-postgresql-稳健&#34;&gt;&#xD;&#xA;  🔹 2. MySQL：一致性不如 PostgreSQL 稳健&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-mysql%e4%b8%80%e8%87%b4%e6%80%a7%e4%b8%8d%e5%a6%82-postgresql-%e7%a8%b3%e5%81%a5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;-依赖-innodb-引擎默认提供事务支持&#34;&gt;&#xD;&#xA;  ⚠️ 依赖 InnoDB 引擎（默认）提供事务支持：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%be%9d%e8%b5%96-innodb-%e5%bc%95%e6%93%8e%e9%bb%98%e8%ae%a4%e6%8f%90%e4%be%9b%e4%ba%8b%e5%8a%a1%e6%94%af%e6%8c%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;也实现了 MVCC，但实现细节与 PostgreSQL 不同。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;REPEATABLE READ&lt;/code&gt; 是默认隔离级别，使用**间隙锁（Gap Lock）**避免幻读，但容易引发死锁和性能瓶颈。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-serializable-支持有限&#34;&gt;&#xD;&#xA;  ⚠️ SERIALIZABLE 支持有限：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-serializable-%e6%94%af%e6%8c%81%e6%9c%89%e9%99%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是通过加锁实现，性能开销大，不推荐在高并发场景使用。&lt;/li&gt;&#xA;&lt;li&gt;实际中，很少系统用 MySQL 启用 SERIALIZABLE 隔离级别。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-潜在问题&#34;&gt;&#xD;&#xA;  🚨 潜在问题：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%bd%9c%e5%9c%a8%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在高并发、复杂事务场景下，一致性可能出现“边缘案例”问题；&lt;/li&gt;&#xA;&lt;li&gt;特别在主从复制中，默认是&lt;strong&gt;异步复制&lt;/strong&gt;，会导致&lt;strong&gt;读写延迟或脏读&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-数据量与扩展性postgresql-vs-mysql&#34;&gt;&#xD;&#xA;  ✅ 数据量与扩展性：PostgreSQL vs MySQL&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%95%b0%e6%8d%ae%e9%87%8f%e4%b8%8e%e6%89%a9%e5%b1%95%e6%80%a7postgresql-vs-mysql&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;-1-postgresql面向大规模数据更具优势&#34;&gt;&#xD;&#xA;  🔹 1. PostgreSQL：面向大规模数据更具优势&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-postgresql%e9%9d%a2%e5%90%91%e5%a4%a7%e8%a7%84%e6%a8%a1%e6%95%b0%e6%8d%ae%e6%9b%b4%e5%85%b7%e4%bc%98%e5%8a%bf&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;-表分区partitioning能力更强&#34;&gt;&#xD;&#xA;  ✅ 表分区（Partitioning）能力更强&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%a1%a8%e5%88%86%e5%8c%bapartitioning%e8%83%bd%e5%8a%9b%e6%9b%b4%e5%bc%ba&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持声明式分区（PostgreSQL 10+）；&lt;/li&gt;&#xA;&lt;li&gt;支持范围、列表、哈希分区；&lt;/li&gt;&#xA;&lt;li&gt;查询优化器可以自动&lt;strong&gt;分区裁剪（Partition Pruning）&lt;/strong&gt;，大数据量时性能更稳定；&lt;/li&gt;&#xA;&lt;li&gt;非常适合&lt;strong&gt;日志库、时间序列库、大表数据归档&lt;/strong&gt;场景。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-并行查询能力&#34;&gt;&#xD;&#xA;  ✅ 并行查询能力&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%b9%b6%e8%a1%8c%e6%9f%a5%e8%af%a2%e8%83%bd%e5%8a%9b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持并行 Seq Scan、并行聚合（Aggregate）、并行索引扫描；&lt;/li&gt;&#xA;&lt;li&gt;对 OLAP 友好（虽然不是专门为 OLAP 设计）；&lt;/li&gt;&#xA;&lt;li&gt;大数据集查询性能明显优于 MySQL。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-扩展性强可以外挂插件如-timescaledb做时间序列分布式处理&#34;&gt;&#xD;&#xA;  ✅ 扩展性强：可以外挂插件（如 TimescaleDB）做时间序列、分布式处理。&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%89%a9%e5%b1%95%e6%80%a7%e5%bc%ba%e5%8f%af%e4%bb%a5%e5%a4%96%e6%8c%82%e6%8f%92%e4%bb%b6%e5%a6%82-timescaledb%e5%81%9a%e6%97%b6%e9%97%b4%e5%ba%8f%e5%88%97%e5%88%86%e5%b8%83%e5%bc%8f%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-2-mysql轻量快速但扩展能力有限&#34;&gt;&#xD;&#xA;  🔹 2. MySQL：轻量快速但扩展能力有限&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-mysql%e8%bd%bb%e9%87%8f%e5%bf%ab%e9%80%9f%e4%bd%86%e6%89%a9%e5%b1%95%e8%83%bd%e5%8a%9b%e6%9c%89%e9%99%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;-分区支持较弱&#34;&gt;&#xD;&#xA;  ⚠️ 分区支持较弱：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%88%86%e5%8c%ba%e6%94%af%e6%8c%81%e8%be%83%e5%bc%b1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持分区表，但功能受限，不支持外键、全文索引等；&lt;/li&gt;&#xA;&lt;li&gt;分区优化器能力较弱，很多查询无法自动命中合适分区；&lt;/li&gt;&#xA;&lt;li&gt;实际应用中，&lt;strong&gt;大部分公司会选择手动做“分库分表”&lt;/strong&gt; 而非使用原生分区。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-扩展能力靠中间件实现&#34;&gt;&#xD;&#xA;  ⚠️ 扩展能力靠中间件实现：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%89%a9%e5%b1%95%e8%83%bd%e5%8a%9b%e9%9d%a0%e4%b8%ad%e9%97%b4%e4%bb%b6%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;遇到 TB 级别或热点大表，常依赖 Sharding 中间件（如 ShardingSphere、Vitess）；&lt;/li&gt;&#xA;&lt;li&gt;架构更复杂，维护成本更高；&lt;/li&gt;&#xA;&lt;li&gt;很难做到 PostgreSQL 那种“开箱即用”的分区和扩展能力。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-总结对比深度场景推荐&#34;&gt;&#xD;&#xA;  📌 总结对比（深度场景推荐）：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%80%bb%e7%bb%93%e5%af%b9%e6%af%94%e6%b7%b1%e5%ba%a6%e5%9c%ba%e6%99%af%e6%8e%a8%e8%8d%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;维度&lt;/th&gt;&#xA;          &lt;th&gt;PostgreSQL&lt;/th&gt;&#xA;          &lt;th&gt;MySQL&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;事务隔离能力&lt;/td&gt;&#xA;          &lt;td&gt;强：支持可串行化隔离，MVCC 机制严谨&lt;/td&gt;&#xA;          &lt;td&gt;弱：SERIALIZABLE 实现粗糙，容易死锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;写入一致性保障&lt;/td&gt;&#xA;          &lt;td&gt;强：WAL + MVCC + 快照机制&lt;/td&gt;&#xA;          &lt;td&gt;一般：InnoDB MVCC 有局限，复制异步&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;并发性能&lt;/td&gt;&#xA;          &lt;td&gt;高并发下更稳健&lt;/td&gt;&#xA;          &lt;td&gt;并发高时容易死锁或锁等待&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;大数据分区&lt;/td&gt;&#xA;          &lt;td&gt;支持多种分区方式，自动优化&lt;/td&gt;&#xA;          &lt;td&gt;分区功能弱，需手动实现或依赖中间件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;并行查询&lt;/td&gt;&#xA;          &lt;td&gt;支持，OLAP 友好&lt;/td&gt;&#xA;          &lt;td&gt;不支持并行查询&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;插件扩展&lt;/td&gt;&#xA;          &lt;td&gt;丰富，如时序库、地理空间等&lt;/td&gt;&#xA;          &lt;td&gt;少，功能主要靠核心功能或外部方案&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-最终建议事务大数据场景&#34;&gt;&#xD;&#xA;  ✅ 最终建议（事务+大数据场景）：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%9c%80%e7%bb%88%e5%bb%ba%e8%ae%ae%e4%ba%8b%e5%8a%a1%e5%a4%a7%e6%95%b0%e6%8d%ae%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;✅ 如果你要构建 &lt;strong&gt;金融系统&lt;/strong&gt;、&lt;strong&gt;审计系统&lt;/strong&gt;、&lt;strong&gt;复杂账本系统&lt;/strong&gt;，或处理 &lt;strong&gt;TB 级大表、复杂报表分析&lt;/strong&gt; → &lt;strong&gt;优选 PostgreSQL&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;⚠️ 如果你是&lt;strong&gt;以读写性能优先的中小型系统&lt;/strong&gt;、&lt;strong&gt;偏 CRUD 操作、单表不大&lt;/strong&gt;，或者已有大量 MySQL 资产 → &lt;strong&gt;MySQL 依然可行&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;你的这些问题都非常关键，涉及数据库内核、事务模型以及数据库在不同场景下的表现。以下是针对每个问题的详细解析，配合类比和示意，便于理解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python 基础</title>
      <link>http://localhost:1313/docs/study/base/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/base/python/</guid>
      <description>&lt;h3 id=&#34;1-python基础知识答案&#34;&gt;&#xD;&#xA;  1. Python基础知识答案&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-python%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e7%ad%94%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;数据类型&#34;&gt;&#xD;&#xA;  数据类型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Python中有哪些内置数据类型？它们之间有什么区别？&lt;/strong&gt;&#xA;Python的内置数据类型主要包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;数字（Numbers）&lt;/strong&gt;: &lt;code&gt;int&lt;/code&gt; (整数), &lt;code&gt;float&lt;/code&gt; (浮点数), &lt;code&gt;complex&lt;/code&gt; (复数)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;布尔值（Boolean）&lt;/strong&gt;: &lt;code&gt;bool&lt;/code&gt; (True/False)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;字符串（String）&lt;/strong&gt;: &lt;code&gt;str&lt;/code&gt; (不可变的字符序列)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;列表（List）&lt;/strong&gt;: &lt;code&gt;list&lt;/code&gt; (可变的有序序列，元素可以是不同类型)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;元组（Tuple）&lt;/strong&gt;: &lt;code&gt;tuple&lt;/code&gt; (不可变的有序序列，元素可以是不同类型)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;字典（Dictionary）&lt;/strong&gt;: &lt;code&gt;dict&lt;/code&gt; (可变的无序键值对集合，键必须是不可变的，值可以是任意类型)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;集合（Set）&lt;/strong&gt;: &lt;code&gt;set&lt;/code&gt; (可变的无序不重复元素集合)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;不可变集合（Frozen Set）&lt;/strong&gt;: &lt;code&gt;frozenset&lt;/code&gt; (不可变的无序不重复元素集合)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要区别在于：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;可变性（Mutability）&lt;/strong&gt;: 列表、字典、集合是&lt;strong&gt;可变&lt;/strong&gt;的，创建后可以修改；数字、字符串、元组、frozenset是&lt;strong&gt;不可变&lt;/strong&gt;的，创建后不能修改。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;有序性（Order）&lt;/strong&gt;: 列表、元组、字符串是有序的，可以通过索引访问；字典（Python 3.7+ 保证插入顺序，3.6及以前版本是无序的）、集合是无序的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;重复性（Duplication）&lt;/strong&gt;: 列表、元组、字符串可以包含重复元素；集合和frozenset不允许重复元素。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;键值对&lt;/strong&gt;: 只有字典是键值对形式的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;什么是可变（mutable）和不可变（immutable）对象？请举例说明。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;不可变对象（Immutable Objects）&lt;/strong&gt;: 一旦创建，其内存中的值就不能被改变。对不可变对象进行修改操作，实际上是创建了一个新的对象。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;: &lt;strong&gt;数字&lt;/strong&gt;、&lt;strong&gt;字符串&lt;/strong&gt;、&lt;strong&gt;元组&lt;/strong&gt;、&lt;strong&gt;frozenset&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- end list --&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 字符串是不可变的&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(id(s)) &lt;span style=&#34;color:#75715e&#34;&gt;# 查看内存地址&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 看起来修改了s，但实际上创建了一个新的字符串对象&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(id(s)) &lt;span style=&#34;color:#75715e&#34;&gt;# 内存地址已改变&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 元组是不可变的&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# t[0] = 10 # 这会报错：TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;可变对象（Mutable Objects）&lt;/strong&gt;: 创建后，可以对其内容进行修改，而无需改变其内存地址。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;: &lt;strong&gt;列表&lt;/strong&gt;、&lt;strong&gt;字典&lt;/strong&gt;、&lt;strong&gt;集合&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- end list --&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 列表是可变的&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(id(l)) &lt;span style=&#34;color:#75715e&#34;&gt;# 查看内存地址&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 直接在原对象上修改&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(id(l)) &lt;span style=&#34;color:#75715e&#34;&gt;# 内存地址不变&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;深拷贝和浅拷贝有什么区别？何时使用它们？&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>React 知识</title>
      <link>http://localhost:1313/docs/study/frontend/react-knowledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/frontend/react-knowledge/</guid>
      <description>&lt;p&gt;This is an extensive list covering almost every aspect of React development! I&amp;rsquo;ll provide concise, effective answers for each, suitable for an interview context. Remember to &lt;strong&gt;personalize these answers with your own project examples and specific experiences&lt;/strong&gt; to make them more impactful.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-react-核心基础&#34;&gt;&#xD;&#xA;  💡 React 核心基础&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-react-%e6%a0%b8%e5%bf%83%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;react-的核心原理是什么&#34;&gt;&#xD;&#xA;  React 的核心原理是什么？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#react-%e7%9a%84%e6%a0%b8%e5%bf%83%e5%8e%9f%e7%90%86%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;React 的核心原理是&lt;strong&gt;声明式 UI 和组件化&lt;/strong&gt;。我们通过声明式地描述 UI 应该长什么样（给定状态），React 会负责更新 UI 以匹配这个声明。它将 UI 拆分成独立、可复用的组件，每个组件管理自己的状态并渲染特定的 UI 片段。通过&lt;strong&gt;虚拟 DOM 和 Diff 算法&lt;/strong&gt;，React 高效地更新真实 DOM，只修改必要的部分，从而提升性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RPC 框架</title>
      <link>http://localhost:1313/docs/study/system-design/rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/rpc/</guid>
      <description>&lt;p&gt;设计一个高可用且高性能的 RPC 框架需要从体系结构、通信机制、安全与可观测性等多方面进行设计。以下是中英文版本的综合建议。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-中文版&#34;&gt;&#xD;&#xA;  ✅ 中文版&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%ad%e6%96%87%e7%89%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-接口定义与协议-idl--序列化&#34;&gt;&#xD;&#xA;  1. 接口定义与协议 (IDL + 序列化)&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%8e%a5%e5%8f%a3%e5%ae%9a%e4%b9%89%e4%b8%8e%e5%8d%8f%e8%ae%ae-idl--%e5%ba%8f%e5%88%97%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 Interface Definition Language（如 Protocol Buffers / Thrift IDL）清晰定义服务接口，实现跨语言支持并生成类型安全的代码 (&#xD;&#xA;  &lt;a href=&#34;https://www.bulbapp.io/p/9305367f-53c0-4082-bec6-65f2f90c6a8c/a-guide-to-designing-and-developing-an-effective-rpc-framework?utm_source=chatgpt.com&#34; title=&#34;A Guide to Designing and Developing an Effective RPC Framework | BULB&#34;&gt;bulbapp.io&lt;/a&gt;, &#xD;&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Thrift?utm_source=chatgpt.com&#34; title=&#34;Apache Thrift&#34;&gt;en.wikipedia.org&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;li&gt;序列化建议使用高效二进制格式（如 Protobuf、Cap’n Proto）＋可选压缩（如 Snappy/LZ4），提升传输效率(&#xD;&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Cap%27n_Proto?utm_source=chatgpt.com&#34; title=&#34;Cap&amp;#39;n Proto&#34;&gt;en.wikipedia.org&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-传输层--网络通信&#34;&gt;&#xD;&#xA;  2. 传输层 &amp;amp; 网络通信&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e4%bc%a0%e8%be%93%e5%b1%82--%e7%bd%91%e7%bb%9c%e9%80%9a%e4%bf%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于 HTTP/2 或原始 TCP，支持双向流（gRPC）与异步调用模型（如 Netty、非阻塞 IO）。&lt;/li&gt;&#xA;&lt;li&gt;连接池与会话管理：使用连接复用、心跳检测，确保连接稳定和高并发性能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-客户端-stub-与-server-骨架&#34;&gt;&#xD;&#xA;  3. 客户端 Stub 与 Server 骨架&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e5%ae%a2%e6%88%b7%e7%ab%af-stub-%e4%b8%8e-server-%e9%aa%a8%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端生成 Stub，封装序列化、网络调用、超时和重试逻辑（建议支持幂等重试、超时控制）。&lt;/li&gt;&#xA;&lt;li&gt;服务端使用拦截器链（Interceptor）模式处理强制认证、限流、日志、监控埋点等事务，解耦关注点(&#xD;&#xA;  &lt;a href=&#34;https://google.github.io/building-secure-and-reliable-systems/raw/ch12.html?utm_source=chatgpt.com&#34; title=&#34;Chapter 12: Building Secure and Reliable Systems&#34;&gt;google.github.io&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-服务注册与发现&#34;&gt;&#xD;&#xA;  4. 服务注册与发现&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c%e4%b8%8e%e5%8f%91%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;集成注册中心（如 Consul、Nacos、Eureka、Zookeeper），自动负载均衡、健康检查。&lt;/li&gt;&#xA;&lt;li&gt;客户端支持负载均衡策略（轮询、一致性哈希、权重），并自动感知服务增删。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-错误处理与容错&#34;&gt;&#xD;&#xA;  5. 错误处理与容错&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e9%94%99%e8%af%af%e5%a4%84%e7%90%86%e4%b8%8e%e5%ae%b9%e9%94%99&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;定义统一的错误码和重试策略（基于幂等性 + 指数退避 + 副作用重试）。&lt;/li&gt;&#xA;&lt;li&gt;实现断路器（circuit breaker）、降级策略，防止错误扩散(&#xD;&#xA;  &lt;a href=&#34;https://programming.vip/docs/teach-you-to-write-an-rpc-framework-hand-in-hand.html?utm_source=chatgpt.com&#34; title=&#34;Teach you to write an RPC framework hand in hand&#34;&gt;programming.vip&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6-安全与授权&#34;&gt;&#xD;&#xA;  6. 安全与授权&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-%e5%ae%89%e5%85%a8%e4%b8%8e%e6%8e%88%e6%9d%83&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持 TLS 加密、双向认证及 OAuth/JWT 认证方式。&lt;/li&gt;&#xA;&lt;li&gt;排除注入式安全漏洞，确保传输与接口访问安全。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7-性能优化与可观测性&#34;&gt;&#xD;&#xA;  7. 性能优化与可观测性&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7-%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96%e4%b8%8e%e5%8f%af%e8%a7%82%e6%b5%8b%e6%80%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端 Stub 支持压缩与批量请求，降低延迟与并发连接数。&lt;/li&gt;&#xA;&lt;li&gt;集成监控系统（Prometheus、Grafana、Opentelemetry），记录请求耗时、错误率、QPS、线程池状况等。&lt;/li&gt;&#xA;&lt;li&gt;支持分布式 Tracing（如 OpenTracing/Jaeger），便于故障分析与延迟追踪。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8-测试与部署&#34;&gt;&#xD;&#xA;  8. 测试与部署&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#8-%e6%b5%8b%e8%af%95%e4%b8%8e%e9%83%a8%e7%bd%b2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提供单元测试、集成测试和性能压测脚本（例如基于 gRPC 框架或 HTTP2）。&lt;/li&gt;&#xA;&lt;li&gt;引入 CI/CD 和容器部署（Docker + Kubernetes），配套健康检查和滚动升级机制。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-english-version&#34;&gt;&#xD;&#xA;  ✅ English Version&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-english-version&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-interface-definition--serialization&#34;&gt;&#xD;&#xA;  1. Interface Definition &amp;amp; Serialization&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-interface-definition--serialization&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use an IDL (e.g., Protobuf or Thrift) to define service contracts, enabling cross-language support and codegen for type-safe client/server stubs (&#xD;&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Thrift?utm_source=chatgpt.com&#34; title=&#34;Apache Thrift&#34;&gt;en.wikipedia.org&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Opt for efficient binary serialization (Protobuf, Cap’n Proto) with optional compression (Snappy/LZ4) to optimize payload size and speed (&#xD;&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Cap%27n_Proto?utm_source=chatgpt.com&#34; title=&#34;Cap&amp;#39;n Proto&#34;&gt;en.wikipedia.org&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-transport-layer--communication&#34;&gt;&#xD;&#xA;  2. Transport Layer &amp;amp; Communication&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-transport-layer--communication&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Leverage HTTP/2 or raw TCP with bidirectional streaming (gRPC) or custom async I/O for high concurrency.&lt;/li&gt;&#xA;&lt;li&gt;Implement connection pooling and heartbeats to manage resource usage and reduce latency.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-client-stub--server-skeleton&#34;&gt;&#xD;&#xA;  3. Client Stub &amp;amp; Server Skeleton&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-client-stub--server-skeleton&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Client stubs wrap serialization, network calls, timeouts, and retry mechanisms (with idempotent retries and timeout support) (&#xD;&#xA;  &lt;a href=&#34;https://www.bulbapp.io/p/9305367f-53c0-4082-bec6-65f2f90c6a8c/a-guide-to-designing-and-developing-an-effective-rpc-framework?utm_source=chatgpt.com&#34; title=&#34;A Guide to Designing and Developing an Effective RPC Framework | BULB&#34;&gt;bulbapp.io&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Use interceptor chains on the server to handle auth, logging, rate-limiting, metrics, and tracing—enabling clear separation of concerns .&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-service-discovery--load-balancing&#34;&gt;&#xD;&#xA;  4. Service Discovery &amp;amp; Load Balancing&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-service-discovery--load-balancing&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Integrate with service registries (Consul, Nacos, Eureka, ZooKeeper) for auto-discovery and LB.&lt;/li&gt;&#xA;&lt;li&gt;Implement client-side load balancing (round-robin, consistent hashing, weighted) and support dynamic updates.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-error-handling--resilience&#34;&gt;&#xD;&#xA;  5. Error Handling &amp;amp; Resilience&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-error-handling--resilience&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Define consistent error codes; support retry strategies with exponential backoff, focusing on idempotent operations.&lt;/li&gt;&#xA;&lt;li&gt;Incorporate circuit breakers and fallback mechanisms to prevent cascading failures (&#xD;&#xA;  &lt;a href=&#34;https://programming.vip/docs/teach-you-to-write-an-rpc-framework-hand-in-hand.html?utm_source=chatgpt.com&#34; title=&#34;Teach you to write an RPC framework hand in hand&#34;&gt;programming.vip&lt;/a&gt;, &#xD;&#xA;  &lt;a href=&#34;https://www.bulbapp.io/p/9305367f-53c0-4082-bec6-65f2f90c6a8c/a-guide-to-designing-and-developing-an-effective-rpc-framework?utm_source=chatgpt.com&#34; title=&#34;A Guide to Designing and Developing an Effective RPC Framework | BULB&#34;&gt;bulbapp.io&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6-security--authentication&#34;&gt;&#xD;&#xA;  6. Security &amp;amp; Authentication&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#6-security--authentication&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Support TLS encryption, mTLS, and token-based authentication (OAuth2/JWT).&lt;/li&gt;&#xA;&lt;li&gt;Enforce strict validation to protect against injection and unauthorized access.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7-performance--observability&#34;&gt;&#xD;&#xA;  7. Performance &amp;amp; Observability&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#7-performance--observability&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Enable payload compression and batch requests to lower latency and throughput overhead.&lt;/li&gt;&#xA;&lt;li&gt;Instrument with Prometheus/Grafana/OpenTelemetry to monitor QPS, latency, errors, thread metrics.&lt;/li&gt;&#xA;&lt;li&gt;Integrate distributed tracing (OpenTelemetry, Jaeger) for end-to-end request visibility .&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8-testing--deployment&#34;&gt;&#xD;&#xA;  8. Testing &amp;amp; Deployment&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#8-testing--deployment&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Provide unit/integration tests and benchmark tools to validate correctness and performance.&lt;/li&gt;&#xA;&lt;li&gt;Package with Docker/Kubernetes, including health checks and rolling upgrades, integrated via CI/CD pipelines.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-总结&#34;&gt;&#xD;&#xA;  🧠 总结&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;设计一个高质量 RPC 框架应聚焦以下方向：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Saga 模式最佳实践</title>
      <link>http://localhost:1313/docs/study/base/saga-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/base/saga-best-practices/</guid>
      <description>&lt;h2 id=&#34;saga-服务设计的实践经验&#34;&gt;&#xD;&#xA;  Saga 服务设计的实践经验&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#saga-%e6%9c%8d%e5%8a%a1%e8%ae%be%e8%ae%a1%e7%9a%84%e5%ae%9e%e8%b7%b5%e7%bb%8f%e9%aa%8c&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;允许空补偿&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空补偿：原服务未执行，补偿服务执行了&lt;/li&gt;&#xA;&lt;li&gt;出现原因：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原服务 超时（丢包）&lt;/li&gt;&#xA;&lt;li&gt;Saga 事务触发 回滚&lt;/li&gt;&#xA;&lt;li&gt;未收到 原服务请求，先收到 补偿请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所以服务设计时需要允许空补偿, 即没有找到要补偿的业务主键时返回补偿成功并将原业务主键记录下来&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;防悬挂控制&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;悬挂：补偿服务 比 原服务 先执行&lt;/li&gt;&#xA;&lt;li&gt;出现原因：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原服务 超时（拥堵）&lt;/li&gt;&#xA;&lt;li&gt;Saga 事务回滚，触发 回滚&lt;/li&gt;&#xA;&lt;li&gt;拥堵的 原服务 到达&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所以要检查当前业务主键是否已经在空补偿记录下来的业务主键中存在，如果存在则要拒绝服务的执行&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;幂等控制&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原服务与补偿服务都需要保证幂等性, 由于网络可能超时, 可以设置重试策略，重试发生时要通过幂等控制避免业务数据重复更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;缺乏隔离性的应对&#34;&gt;&#xD;&#xA;  缺乏隔离性的应对&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%ba%e4%b9%8f%e9%9a%94%e7%a6%bb%e6%80%a7%e7%9a%84%e5%ba%94%e5%af%b9&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于 Saga 事务不保证隔离性, 在极端情况下可能由于脏写无法完成回滚操作, 比如举一个极端的例子, 分布式事务内先给用户 A 充值, 然后给用户 B 扣减余额, 如果在给 A 用户充值成功, 在事务提交以前, A 用户把余额消费掉了, 如果事务发生回滚, 这时则没有办法进行补偿了。这就是缺乏隔离性造成的典型的问题, 实践中一般的应对方法是：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;业务流程设计时遵循“宁可长款, 不可短款”的原则, 长款意思是客户少了钱机构多了钱, 以机构信誉可以给客户退款, 反之则是短款, 少的钱可能追不回来了。所以在业务流程设计上一定是先扣款。&lt;/li&gt;&#xA;&lt;li&gt;有些业务场景可以允许让业务最终成功, 在回滚不了的情况下可以继续重试完成后面的流程, 所以状态机引擎除了提供“回滚”能力还需要提供“向前”恢复上下文继续执行的能力, 让业务最终执行成功, 达到最终一致性的目的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;性能优化&#34;&gt;&#xD;&#xA;  性能优化&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;配置客户端参数&lt;code&gt;client.rm.report.success.enable=false&lt;/code&gt;，可以在当分支事务执行成功时不上报分支状态到 server，从而提升性能。&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;当上一个分支事务的状态还没有上报的时候，下一个分支事务已注册，可以认为上一个实际已成功&lt;/p&gt;</description>
    </item>
    <item>
      <title>方案</title>
      <link>http://localhost:1313/docs/study/cache/solution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/cache/solution/</guid>
      <description>&lt;h2 id=&#34;-一常见缓存方案对比&#34;&gt;&#xD;&#xA;  ✅ 一、常见缓存方案对比&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%80%e5%b8%b8%e8%a7%81%e7%bc%93%e5%ad%98%e6%96%b9%e6%a1%88%e5%af%b9%e6%af%94&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缓存策略&lt;/th&gt;&#xA;          &lt;th&gt;特点&lt;/th&gt;&#xA;          &lt;th&gt;适合场景&lt;/th&gt;&#xA;          &lt;th&gt;优缺点&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Redis 集群&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;分布式内存数据库，支持多数据结构、持久化、分片&lt;/td&gt;&#xA;          &lt;td&gt;高频访问、分布式系统、跨服务缓存&lt;/td&gt;&#xA;          &lt;td&gt;✅ 功能强，支持过期策略、发布订阅、Lua 脚本&lt;br&gt;❌ 成本较高、复杂度较大&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Memcached&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;高性能 key-value 内存缓存，无持久化&lt;/td&gt;&#xA;          &lt;td&gt;简单 kv 缓存、大量读、无数据结构需求&lt;/td&gt;&#xA;          &lt;td&gt;✅ 速度快，轻量级&lt;br&gt;❌ 不支持复杂数据结构、数据易丢失&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;本地缓存（如 Guava Cache）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;服务进程内存缓存&lt;/td&gt;&#xA;          &lt;td&gt;热点数据、本地配置、小规模缓存&lt;/td&gt;&#xA;          &lt;td&gt;✅ 极快访问、无网络延迟&lt;br&gt;❌ 不共享、易过期不一致&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;CDN 缓存（如 Cloudflare、AWS CloudFront）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;基于 HTTP 静态文件缓存&lt;/td&gt;&#xA;          &lt;td&gt;图片、视频、前端静态资源&lt;/td&gt;&#xA;          &lt;td&gt;✅ 全球加速，用户端就近获取&lt;br&gt;❌ 不适用于动态数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-二如何选择最终方案&#34;&gt;&#xD;&#xA;  ✅ 二、如何选择最终方案？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%ba%8c%e5%a6%82%e4%bd%95%e9%80%89%e6%8b%a9%e6%9c%80%e7%bb%88%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;选择缓存方案的依据，通常围绕 &lt;strong&gt;一致性需求 + 热点程度 + 成本 + 技术复杂度&lt;/strong&gt; 这几方面展开。&lt;/p&gt;&#xA;&lt;h3 id=&#34;示例某-saas-平台接口缓存选择路径&#34;&gt;&#xD;&#xA;  示例：某 SaaS 平台接口缓存选择路径&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%a4%ba%e4%be%8b%e6%9f%90-saas-%e5%b9%b3%e5%8f%b0%e6%8e%a5%e5%8f%a3%e7%bc%93%e5%ad%98%e9%80%89%e6%8b%a9%e8%b7%af%e5%be%84&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;选项&lt;/th&gt;&#xA;          &lt;th&gt;原因&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❌ 本地缓存&lt;/td&gt;&#xA;          &lt;td&gt;数据在多服务实例间不共享，不适用于高一致性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;❌ Memcached&lt;/td&gt;&#xA;          &lt;td&gt;不支持持久化、集群化不方便，数据结构能力弱&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ Redis 集群&lt;/td&gt;&#xA;          &lt;td&gt;支持 key 过期、LRU 淘汰策略、支持分布式部署，可支撑高并发&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;✅ CDN（搭配使用）&lt;/td&gt;&#xA;          &lt;td&gt;用于前端静态资源、公共 API GET 缓存，减轻后端压力&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;最终方案：&lt;/p&gt;</description>
    </item>
    <item>
      <title>高可用性</title>
      <link>http://localhost:1313/docs/study/system-design/high-availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/high-availability/</guid>
      <description>&lt;h1 id=&#34;服务宕机与网络分区时保证系统可用性--cap-原则解析&#34;&gt;&#xD;&#xA;  服务宕机与网络分区时保证系统可用性 &amp;amp; CAP 原则解析&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9c%8d%e5%8a%a1%e5%ae%95%e6%9c%ba%e4%b8%8e%e7%bd%91%e7%bb%9c%e5%88%86%e5%8c%ba%e6%97%b6%e4%bf%9d%e8%af%81%e7%b3%bb%e7%bb%9f%e5%8f%af%e7%94%a8%e6%80%a7--cap-%e5%8e%9f%e5%88%99%e8%a7%a3%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;一服务宕机或网络分区时如何保证系统整体可用&#34;&gt;&#xD;&#xA;  一、服务宕机或网络分区时如何保证系统整体可用？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%9c%8d%e5%8a%a1%e5%ae%95%e6%9c%ba%e6%88%96%e7%bd%91%e7%bb%9c%e5%88%86%e5%8c%ba%e6%97%b6%e5%a6%82%e4%bd%95%e4%bf%9d%e8%af%81%e7%b3%bb%e7%bb%9f%e6%95%b4%e4%bd%93%e5%8f%af%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-多副本冗余部署&#34;&gt;&#xD;&#xA;  1. 多副本冗余部署&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%a4%9a%e5%89%af%e6%9c%ac%e5%86%97%e4%bd%99%e9%83%a8%e7%bd%b2&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对关键服务部署多实例，分布在不同节点或可用区，防止单点故障导致服务不可用。&lt;/li&gt;&#xA;&lt;li&gt;通过负载均衡自动切换到健康实例。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-健康检查与自动故障转移&#34;&gt;&#xD;&#xA;  2. 健康检查与自动故障转移&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e5%81%a5%e5%ba%b7%e6%a3%80%e6%9f%a5%e4%b8%8e%e8%87%aa%e5%8a%a8%e6%95%85%e9%9a%9c%e8%bd%ac%e7%a7%bb&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用健康探针（Liveness/Readiness Probe）检测服务状态，异常自动剔除。&lt;/li&gt;&#xA;&lt;li&gt;K8s、服务网格等支持自动流量路由调整。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-限流熔断和降级&#34;&gt;&#xD;&#xA;  3. 限流、熔断和降级&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e9%99%90%e6%b5%81%e7%86%94%e6%96%ad%e5%92%8c%e9%99%8d%e7%ba%a7&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;防止故障传播，减少故障扩散范围，保障核心服务可用。&lt;/li&gt;&#xA;&lt;li&gt;在部分依赖不可用时，提供降级功能维持核心体验。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-数据副本与异步复制&#34;&gt;&#xD;&#xA;  4. 数据副本与异步复制&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e6%95%b0%e6%8d%ae%e5%89%af%e6%9c%ac%e4%b8%8e%e5%bc%82%e6%ad%a5%e5%a4%8d%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保证数据多副本存储，避免单点数据丢失。&lt;/li&gt;&#xA;&lt;li&gt;异步复制减少同步阻塞，提高可用性，但存在一定数据一致性风险。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-设计幂等和重试机制&#34;&gt;&#xD;&#xA;  5. 设计幂等和重试机制&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e8%ae%be%e8%ae%a1%e5%b9%82%e7%ad%89%e5%92%8c%e9%87%8d%e8%af%95%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;保障请求安全重试，避免因网络抖动导致的数据错误。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;二cap-原则简介&#34;&gt;&#xD;&#xA;  二、CAP 原则简介&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8ccap-%e5%8e%9f%e5%88%99%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;CAP 定理指出，分布式系统不能同时完美满足：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;C（一致性 Consistency）&lt;/strong&gt;：所有节点读到的数据是一致的，最新的写入立即可见。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;A（可用性 Availability）&lt;/strong&gt;：每个请求都能得到响应（成功或失败），系统对所有节点持续可用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;P（分区容忍性 Partition Tolerance）&lt;/strong&gt;：系统能在网络分区（节点间消息丢失或延迟）时继续运行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;由于网络分区不可避免，系统设计时需在&lt;strong&gt;一致性&lt;/strong&gt;和&lt;strong&gt;可用性&lt;/strong&gt;之间权衡。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;三实际系统中的-cap-取舍&#34;&gt;&#xD;&#xA;  三、实际系统中的 CAP 取舍&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89%e5%ae%9e%e9%99%85%e7%b3%bb%e7%bb%9f%e4%b8%ad%e7%9a%84-cap-%e5%8f%96%e8%88%8d&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;取舍方向&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;          &lt;th&gt;典型场景或技术&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;CP（优先一致性）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;保证数据强一致性，分区时牺牲可用性（部分请求可能失败）&lt;/td&gt;&#xA;          &lt;td&gt;传统关系型数据库、分布式事务系统&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;AP（优先可用性）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;保证系统持续响应，允许短暂数据不一致，后续进行数据同步修正&lt;/td&gt;&#xA;          &lt;td&gt;大规模互联网应用、缓存系统、部分 NoSQL&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;CA（理论上的理想）&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;不考虑网络分区，只在单节点或强同步场景下能实现&lt;/td&gt;&#xA;          &lt;td&gt;单机系统或网络稳定环境&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;四结合场景的实践建议&#34;&gt;&#xD;&#xA;  四、结合场景的实践建议&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9b%e7%bb%93%e5%90%88%e5%9c%ba%e6%99%af%e7%9a%84%e5%ae%9e%e8%b7%b5%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心业务（如支付、订单）&lt;/strong&gt;：更倾向于&lt;strong&gt;CP&lt;/strong&gt;，确保数据准确，允许部分请求失败或延迟。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;用户体验相关（如浏览、推荐）&lt;/strong&gt;：可偏向&lt;strong&gt;AP&lt;/strong&gt;，保证响应速度和可用性，允许短暂的数据不一致。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;采用异步补偿和最终一致性设计&lt;/strong&gt;：用 Saga 模式等实现业务流程的补偿，提升系统可用性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;五总结&#34;&gt;&#xD;&#xA;  五、总结&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%94%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;关注点&lt;/th&gt;&#xA;          &lt;th&gt;设计策略&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;宕机/分区容忍&lt;/td&gt;&#xA;          &lt;td&gt;多副本冗余、健康检查、自动故障转移、降级限流&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CAP权衡&lt;/td&gt;&#xA;          &lt;td&gt;根据业务优先级选CP或AP，设计幂等与补偿机制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;系统弹性&lt;/td&gt;&#xA;          &lt;td&gt;利用异步机制与最终一致性，提升可用性同时保证数据正确性&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>缓存一致性</title>
      <link>http://localhost:1313/docs/study/system-design/cache-consistency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/system-design/cache-consistency/</guid>
      <description>&lt;h2 id=&#34;延迟双删-vs-kafka&#34;&gt;&#xD;&#xA;  延迟双删 vs Kafka&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bb%b6%e8%bf%9f%e5%8f%8c%e5%88%a0-vs-kafka&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;对比维度&lt;/th&gt;&#xA;          &lt;th&gt;延迟双删&lt;/th&gt;&#xA;          &lt;th&gt;Kafka 缓存失效通知&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;实现难度&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;简单，代码内实现&lt;/td&gt;&#xA;          &lt;td&gt;需要接入 Kafka + 消费机制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;缓存一致性控制力&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;不稳定（延迟期间仍可能被覆盖）&lt;/td&gt;&#xA;          &lt;td&gt;强一致（通知所有消费者实时失效）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;适应多服务 / 多副本&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;差，需每个服务都实现&lt;/td&gt;&#xA;          &lt;td&gt;强，多服务可统一订阅通知&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;异步解耦能力&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;弱，紧耦合在业务逻辑中&lt;/td&gt;&#xA;          &lt;td&gt;强，数据库变更 → 异步通知&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;故障可追溯性&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;差，删失败难定位&lt;/td&gt;&#xA;          &lt;td&gt;强，Kafka 留存消息可回溯&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;网络异常容错性&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;差，失败后不易重试&lt;/td&gt;&#xA;          &lt;td&gt;好，可消费失败后重试&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>介绍</title>
      <link>http://localhost:1313/docs/example/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/example/introduction/</guid>
      <description>&lt;h1 id=&#34;中文索引页&#34;&gt;&#xD;&#xA;  中文索引页&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ad%e6%96%87%e7%b4%a2%e5%bc%95%e9%a1%b5&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xD;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;astris-ipse-furtiva&#34;&gt;&#xD;&#xA;  Astris ipse furtiva&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#astris-ipse-furtiva&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Est in vagis et Pittheus tu arge accipiter regia iram vocatur nurus. Omnes ut&#xA;olivae sensit &lt;strong&gt;arma sorori&lt;/strong&gt; deducit, inesset &lt;strong&gt;crudus&lt;/strong&gt;, ego vetuere aliis,&#xA;modo arsit? Utinam rapta fiducia valuere litora &lt;em&gt;adicit cursu&lt;/em&gt;, ad facies&lt;/p&gt;&#xA;  &lt;/div&gt;&#xD;&#xA;&lt;div class=&#34;flex-even markdown-inner&#34; style=&#34;flex-grow: 1;&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;suis-quot-vota&#34;&gt;&#xD;&#xA;  Suis quot vota&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#suis-quot-vota&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Ea &lt;em&gt;furtique&lt;/em&gt; risere fratres edidit terrae magis. Colla tam mihi tenebat:&#xA;miseram excita suadent es pecudes iam. Concilio &lt;em&gt;quam&lt;/em&gt; velatus posset ait quod&#xA;nunc! Fragosis suae dextra geruntur functus vulgata.&lt;/p&gt;</description>
    </item>
    <item>
      <title>美团-1</title>
      <link>http://localhost:1313/docs/hidden/meituan-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/hidden/meituan-1/</guid>
      <description>&lt;p&gt;以下按你的简历经历和关键技术点，针对每条职责和成就，列出面试官可能追问的细节问题，并给出示范性回答思路。回答思路可结合你个人真实经验补充具体数字或工具细节。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;一202205--202505-汇丰软件开发广东有限公司上海分公司-高级全栈工程师&#34;&gt;&#xD;&#xA;  一、2022.05 – 2025.05 汇丰软件开发（广东）有限公司上海分公司 高级全栈工程师&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80202205--202505-%e6%b1%87%e4%b8%b0%e8%bd%af%e4%bb%b6%e5%bc%80%e5%8f%91%e5%b9%bf%e4%b8%9c%e6%9c%89%e9%99%90%e5%85%ac%e5%8f%b8%e4%b8%8a%e6%b5%b7%e5%88%86%e5%85%ac%e5%8f%b8-%e9%ab%98%e7%ba%a7%e5%85%a8%e6%a0%88%e5%b7%a5%e7%a8%8b%e5%b8%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-设计并实现基于-java--spring-boot-的云原生微服务平台在-kubernetes--docker-环境中部署无状态服务结合自动扩容与负载均衡通过数据库分片与事务控制支撑-5000-tps峰值可扩展至万级并发系统可用性达到-999并在架构中嵌入加密传输权限校验与审计日志等措施符合银行安全合规标准&#34;&gt;&#xD;&#xA;  1. “设计并实现基于 Java + Spring Boot 的云原生微服务平台：在 Kubernetes + Docker 环境中部署无状态服务，结合自动扩容与负载均衡，通过数据库分片与事务控制支撑 5,000+ TPS、峰值可扩展至万级并发，系统可用性达到 99.9%+，并在架构中嵌入加密传输、权限校验与审计日志等措施，符合银行安全合规标准。”&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%ae%be%e8%ae%a1%e5%b9%b6%e5%ae%9e%e7%8e%b0%e5%9f%ba%e4%ba%8e-java--spring-boot-%e7%9a%84%e4%ba%91%e5%8e%9f%e7%94%9f%e5%be%ae%e6%9c%8d%e5%8a%a1%e5%b9%b3%e5%8f%b0%e5%9c%a8-kubernetes--docker-%e7%8e%af%e5%a2%83%e4%b8%ad%e9%83%a8%e7%bd%b2%e6%97%a0%e7%8a%b6%e6%80%81%e6%9c%8d%e5%8a%a1%e7%bb%93%e5%90%88%e8%87%aa%e5%8a%a8%e6%89%a9%e5%ae%b9%e4%b8%8e%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e9%80%9a%e8%bf%87%e6%95%b0%e6%8d%ae%e5%ba%93%e5%88%86%e7%89%87%e4%b8%8e%e4%ba%8b%e5%8a%a1%e6%8e%a7%e5%88%b6%e6%94%af%e6%92%91-5000-tps%e5%b3%b0%e5%80%bc%e5%8f%af%e6%89%a9%e5%b1%95%e8%87%b3%e4%b8%87%e7%ba%a7%e5%b9%b6%e5%8f%91%e7%b3%bb%e7%bb%9f%e5%8f%af%e7%94%a8%e6%80%a7%e8%be%be%e5%88%b0-999%e5%b9%b6%e5%9c%a8%e6%9e%b6%e6%9e%84%e4%b8%ad%e5%b5%8c%e5%85%a5%e5%8a%a0%e5%af%86%e4%bc%a0%e8%be%93%e6%9d%83%e9%99%90%e6%a0%a1%e9%aa%8c%e4%b8%8e%e5%ae%a1%e8%ae%a1%e6%97%a5%e5%bf%97%e7%ad%89%e6%8e%aa%e6%96%bd%e7%ac%a6%e5%90%88%e9%93%b6%e8%a1%8c%e5%ae%89%e5%85%a8%e5%90%88%e8%a7%84%e6%a0%87%e5%87%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;可能面试官提问&#34;&gt;&#xD;&#xA;  可能面试官提问&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%af%e8%83%bd%e9%9d%a2%e8%af%95%e5%ae%98%e6%8f%90%e9%97%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;架构整体设计&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;问：请画一下该微服务平台的整体架构图，重点组件如何交互？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;回答思路：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;描述 API 网关或 ingress（如 Kong/Nginx/Envoy）负责流量入口；后端 Spring Boot 微服务通过 Service Mesh（如 Istio/Linkerd）或自研方案进行服务发现与调用；&lt;/li&gt;&#xA;&lt;li&gt;数据层：分片后的 MySQL 集群、读写分离方案；Redis 缓存层；消息队列（如 Kafka）用于异步解耦；&lt;/li&gt;&#xA;&lt;li&gt;部署层：Docker 容器打包，Kubernetes 集群部署；Horizontal Pod Autoscaler、Cluster Autoscaler；负载均衡（K8s Service、云 LB）；&lt;/li&gt;&#xA;&lt;li&gt;安全层：TLS 证书管理、服务间 mTLS；权限校验（OAuth2/JWT 或内部 IAM）；审计日志组件（日志收集到 ELK 或集中审计系统）；&lt;/li&gt;&#xA;&lt;li&gt;监控与预警：Prometheus + Grafana 或内部监控平台，告警规则；链路追踪（Zipkin/Sleuth 或内部 APM）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;注意：结合银行场景要提及合规要求（加密传输、审计、访问控制、隔离策略等）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Kubernetes + Docker 部署细节&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>美团方向</title>
      <link>http://localhost:1313/docs/hidden/fangxiang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/hidden/fangxiang/</guid>
      <description>&lt;p&gt;以下内容分为若干部分，帮助你针对美团“JAVA高级开发工程师（大模型电话应用方向）”岗位进行充分准备，包括背景调研、技术要点、系统设计思路、可能面试题及回答思路、软技能与团队协作等。所有观点尽量结合公开资料，并在关键陈述后提供引用。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;一公司与业务背景调研&#34;&gt;&#xD;&#xA;  一、公司与业务背景调研&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e5%85%ac%e5%8f%b8%e4%b8%8e%e4%b8%9a%e5%8a%a1%e8%83%8c%e6%99%af%e8%b0%83%e7%a0%94&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;美团AI战略及大模型能力&lt;/strong&gt;&#xA;美团近年来在AI领域持续加码，自研大模型“龙猫”，并在内部提高开发效率与客服效率，如财报电话会提到“AI客服效率提升超20%”和“计划推出覆盖所有服务的AI助手” (&#xD;&#xA;  &lt;a href=&#34;https://wallstreetcn.com/articles/3743634?utm_source=chatgpt.com&#34; title=&#34;美团电话会全文：全面进军AI、看好中东市场高利润率、骑手社保试点 ...&#34;&gt;wallstreetcn.com&lt;/a&gt;, &#xD;&#xA;  &lt;a href=&#34;https://www.letsclouds.com/news/meituan-ai-model-gpt4o-level?utm_source=chatgpt.com&#34; title=&#34;美团AI 业务进展：基础大模型能力接近GPT-4o 水平&#34;&gt;letsclouds.com&lt;/a&gt;)。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面试中可以提到：对大模型在客服、电话应用场景的意义、有何技术挑战、以及如何与业务结合。&lt;/li&gt;&#xA;&lt;li&gt;可关注美团AI应用的多层次：基础设施、产品中的AI、工作中的AI三层(&#xD;&#xA;  &lt;a href=&#34;https://wallstreetcn.com/articles/3743634?utm_source=chatgpt.com&#34; title=&#34;美团电话会全文：全面进军AI、看好中东市场高利润率、骑手社保试点 ...&#34;&gt;wallstreetcn.com&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;美团电话/语音交互现状&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;美团已有智能语音服务实践，如通过 MRCP 协议与 FreeSWITCH 对接，实现实时 ASR/TTS 转换，用于呼叫中心业务(&#xD;&#xA;  &lt;a href=&#34;https://tech.meituan.com/2023/03/09/practice-and-application-of-mrcp-in-voice-interaction-of-meituan.html?utm_source=chatgpt.com&#34; title=&#34;MRCP在美团语音交互中的实践和应用&#34;&gt;tech.meituan.com&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;li&gt;也有智能外呼机器人在催单、确认等场景的实践，并有完整的意图训练与优化流程(&#xD;&#xA;  &lt;a href=&#34;https://blog.csdn.net/qq_25438419/article/details/145567537?utm_source=chatgpt.com&#34; title=&#34;美团智能外呼机器人意图训练全流程原创 - CSDN博客&#34;&gt;blog.csdn.net&lt;/a&gt;)。&lt;/li&gt;&#xA;&lt;li&gt;可在面试中展示你对电话交互系统（呼叫中心接入、ASR/TTS、意图识别、对话管理、机器人外呼/呼入流程）的理解和思考。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;业务价值与目标&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;大模型电话应用方向，核心是提升用户体验、降低人力成本、提高呼叫质量和转化率；&lt;/li&gt;&#xA;&lt;li&gt;需要兼顾高可用、高并发、实时性、稳定性、安全合规（用户隐私、语音数据安全等）；&lt;/li&gt;&#xA;&lt;li&gt;数据能力: 大量通话、意图、对话结果数据，需要构建数据大盘、监控、指标评估与优化闭环。&lt;/li&gt;&#xA;&lt;li&gt;跨团队合作: 需与风控、路由、用户分层等团队对接，为电话决策提供能力支持，需理解业务需求、数据流及联动方式。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;二核心技术要点与能力准备&#34;&gt;&#xD;&#xA;  二、核心技术要点与能力准备&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8c%e6%a0%b8%e5%bf%83%e6%8a%80%e6%9c%af%e8%a6%81%e7%82%b9%e4%b8%8e%e8%83%bd%e5%8a%9b%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-分布式系统与高并发架构&#34;&gt;&#xD;&#xA;  1. 分布式系统与高并发架构&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%88%86%e5%b8%83%e5%bc%8f%e7%b3%bb%e7%bb%9f%e4%b8%8e%e9%ab%98%e5%b9%b6%e5%8f%91%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;高可用与可扩展设计&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;熟悉常见微服务架构模式：服务拆分原则、服务注册与发现、熔断降级、限流、负载均衡、服务治理。&lt;/li&gt;&#xA;&lt;li&gt;了解如何在高并发环境下进行容量规划（如呼入/外呼潮汐流量）、弹性伸缩（Kubernetes、容器化部署、自动扩容策略）。&lt;/li&gt;&#xA;&lt;li&gt;设计时考虑无状态服务与状态持久化分离，利用缓存、消息队列解耦峰值流量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;中间件与异步处理&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;熟悉 Redis（缓存、分布式锁）、Kafka（消息队列、流式处理）、ZooKeeper（服务治理或可替代方案如 etcd/Consul）、RocketMQ 等。理解事务、锁、并发实现机制及其在高并发场景下的调优。&lt;/li&gt;&#xA;&lt;li&gt;异步消息架构：如何处理呼叫结果、ASR异步回调、长尾重试、失败打点、死信队列设计。&lt;/li&gt;&#xA;&lt;li&gt;设计“幂等”及容错处理，如重复消息、部分失败如何补偿。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;数据库与性能优化&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MySQL：分库分表策略、读写分离、索引优化、查询性能调优；大规模调用下的连接池、慢查询分析、归档策略等。&lt;/li&gt;&#xA;&lt;li&gt;NoSQL选型：在需要存储用户会话上下文或短期缓存时，何时使用Redis/Mongo/Cassandra等；考虑一致性、可用性、延迟。&lt;/li&gt;&#xA;&lt;li&gt;对大规模日志或通话记录，可引入分布式存储（如HDFS/S3）、搜索引擎（如Elasticsearch）以便快速检索与分析。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;RPC与序列化&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;熟悉RPC框架（如 gRPC、Thrift、Dubbo 等），理解通信模型、网络IO（NIO/Netty）、序列化协议（Protobuf、JSON、Thrift协议）的性能、兼容性与扩展性。&lt;/li&gt;&#xA;&lt;li&gt;服务治理、版本管理、灰度发布在多版本迭代场景下的方案。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;JVM与性能调优&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;熟悉JVM调优思路：GC调优（不同GC算法对延迟和吞吐的影响）、内存泄露分析、线程池管理、IO模型（NIO/AIO）、网络offload等。&lt;/li&gt;&#xA;&lt;li&gt;关注异步、非阻塞IO在高并发呼叫场景下的适用性：如对接ASR/TTS服务时需处理大量并发连接。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;多线程与并发&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;深入理解Java多线程、并发包（java.util.concurrent），线程池设计、锁与无锁编程（CAS、原子类）、并发容器。&lt;/li&gt;&#xA;&lt;li&gt;Spring在并发控制上的能力，如异步任务执行、@Async、TaskExecutor配置、线程隔离策略。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-spring原理与框架能力&#34;&gt;&#xD;&#xA;  2. Spring原理与框架能力&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-spring%e5%8e%9f%e7%90%86%e4%b8%8e%e6%a1%86%e6%9e%b6%e8%83%bd%e5%8a%9b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Spring核心原理&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>授权码模式</title>
      <link>http://localhost:1313/docs/study/middleware/oauth2/auth-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/middleware/oauth2/auth-code/</guid>
      <description>&lt;h2 id=&#34;1-用户授权与鉴权机制设计要点&#34;&gt;&#xD;&#xA;  1. 用户授权与鉴权机制设计要点&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e7%94%a8%e6%88%b7%e6%8e%88%e6%9d%83%e4%b8%8e%e9%89%b4%e6%9d%83%e6%9c%ba%e5%88%b6%e8%ae%be%e8%ae%a1%e8%a6%81%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;授权-vs-鉴权&#34;&gt;&#xD;&#xA;  授权 vs 鉴权&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%88%e6%9d%83-vs-%e9%89%b4%e6%9d%83&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;授权（Authorization）&lt;/strong&gt;：确定用户或客户端是否有权限访问某资源或执行某操作。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;鉴权（Authentication）&lt;/strong&gt;：验证用户身份是否真实。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;常见技术与方案&#34;&gt;&#xD;&#xA;  常见技术与方案&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e8%a7%81%e6%8a%80%e6%9c%af%e4%b8%8e%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;技术&lt;/th&gt;&#xA;          &lt;th&gt;作用&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;OAuth2&lt;/td&gt;&#xA;          &lt;td&gt;授权框架&lt;/td&gt;&#xA;          &lt;td&gt;支持第三方应用代表用户访问资源，常用于开放API和SSO场景。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;JWT (JSON Web Token)&lt;/td&gt;&#xA;          &lt;td&gt;鉴权令牌&lt;/td&gt;&#xA;          &lt;td&gt;无状态Token，包含用户信息和权限，便于分布式系统鉴权。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Session&lt;/td&gt;&#xA;          &lt;td&gt;鉴权状态管理&lt;/td&gt;&#xA;          &lt;td&gt;服务器端保存用户登录状态，适合单体或小型应用。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Token刷新&lt;/td&gt;&#xA;          &lt;td&gt;保持鉴权状态&lt;/td&gt;&#xA;          &lt;td&gt;使用刷新Token获取新的访问Token，减少用户重新登录频率。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;权限模型&lt;/td&gt;&#xA;          &lt;td&gt;细粒度权限控制&lt;/td&gt;&#xA;          &lt;td&gt;RBAC（基于角色）和ACL（基于访问控制列表）是常见模型。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-设计建议&#34;&gt;&#xD;&#xA;  2. 设计建议&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-%e8%ae%be%e8%ae%a1%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;认证使用OAuth2 + JWT&lt;/strong&gt;：&#xA;OAuth2提供标准授权流程，JWT用于访问令牌，支持无状态鉴权和微服务调用。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Token设计&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Access Token&lt;/strong&gt;：有效期较短，携带用户身份及权限。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Refresh Token&lt;/strong&gt;：有效期较长，用于获取新的Access Token。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;权限控制&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;RBAC&lt;/strong&gt;：用户分配角色，角色对应权限，简单易维护。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ACL&lt;/strong&gt;：对资源和用户的访问权限做细粒度控制，适合复杂场景。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全加固&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HTTPS传输所有Token。&lt;/li&gt;&#xA;&lt;li&gt;Token签名和加密。&lt;/li&gt;&#xA;&lt;li&gt;定期刷新Token。&lt;/li&gt;&#xA;&lt;li&gt;防止Token泄露和重放攻击。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-oauth2-授权码模式authorization-code-grant详细步骤&#34;&gt;&#xD;&#xA;  3. OAuth2 授权码模式（Authorization Code Grant）详细步骤&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-oauth2-%e6%8e%88%e6%9d%83%e7%a0%81%e6%a8%a1%e5%bc%8fauthorization-code-grant%e8%af%a6%e7%bb%86%e6%ad%a5%e9%aa%a4&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;授权码模式主要用于服务器端应用，流程如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;用户请求授权&lt;/strong&gt;&#xA;用户在客户端（如浏览器）访问需要授权的功能，客户端将用户重定向到授权服务器的授权端点，附带客户端ID、回调地址、请求权限范围（scope）等参数。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;用户登录并授权&lt;/strong&gt;&#xA;授权服务器要求用户登录（如果未登录），并请求用户同意客户端申请的权限范围。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;授权码返回客户端&lt;/strong&gt;&#xA;用户同意后，授权服务器将授权码（Authorization Code）通过浏览器重定向发送到客户端预先注册的回调地址。&lt;/p&gt;</description>
    </item>
    <item>
      <title>算法</title>
      <link>http://localhost:1313/docs/study/base/algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/base/algorithm/</guid>
      <description>&lt;h1 id=&#34;-20-个最常见算法题型--解题思路--模板java版&#34;&gt;&#xD;&#xA;  ✅ 20 个最常见算法题型 + 解题思路 &amp;amp; 模板（Java版）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-20-%e4%b8%aa%e6%9c%80%e5%b8%b8%e8%a7%81%e7%ae%97%e6%b3%95%e9%a2%98%e5%9e%8b--%e8%a7%a3%e9%a2%98%e6%80%9d%e8%b7%af--%e6%a8%a1%e6%9d%bfjava%e7%89%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;适合力扣 0-200 题重点训练，也适用于面试快速准备&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-1-两数之和哈希表&#34;&gt;&#xD;&#xA;  🧩 1. 两数之和（哈希表）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;题型&lt;/strong&gt;：数组 + 查找&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// LC 1. Two Sum&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twoSum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; nums, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; complement &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (map.&lt;span style=&#34;color:#a6e22e&#34;&gt;containsKey&lt;/span&gt;(complement))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;{map.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(complement), i};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        map.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-2-三数之和排序--双指针&#34;&gt;&#xD;&#xA;  🧩 2. 三数之和（排序 + 双指针）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-%e4%b8%89%e6%95%b0%e4%b9%8b%e5%92%8c%e6%8e%92%e5%ba%8f--%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h2 id=&#34;-解题思路最佳解&#34;&gt;&#xD;&#xA;  ✅ 解题思路（最佳解）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%a7%a3%e9%a2%98%e6%80%9d%e8%b7%af%e6%9c%80%e4%bd%b3%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-先排序排序--双指针的前提&#34;&gt;&#xD;&#xA;  1. &lt;strong&gt;先排序（排序 + 双指针的前提）&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%85%88%e6%8e%92%e5%ba%8f%e6%8e%92%e5%ba%8f--%e5%8f%8c%e6%8c%87%e9%92%88%e7%9a%84%e5%89%8d%e6%8f%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;排序是为了：&lt;/p&gt;</description>
    </item>
    <item>
      <title>往返时间（Round Trip Time）</title>
      <link>http://localhost:1313/docs/study/network/rtt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/network/rtt/</guid>
      <description>&lt;h1 id=&#34;-什么是-rtt&#34;&gt;&#xD;&#xA;  🔁 什么是 RTT？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%bb%80%e4%b9%88%e6%98%af-rtt&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;RTT（Round Trip Time）&lt;/strong&gt;：一个完整的“请求-响应”往返时间。&lt;/li&gt;&#xA;&lt;li&gt;当我们说 &lt;strong&gt;2-RTT&lt;/strong&gt;，意思是连接建立需要 2 次完整的往返消息交互。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;-一2-rtt-连接建立流程tcp--tls-12&#34;&gt;&#xD;&#xA;  ✅ 一、2-RTT 连接建立流程（TCP + TLS 1.2）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%802-rtt-%e8%bf%9e%e6%8e%a5%e5%bb%ba%e7%ab%8b%e6%b5%81%e7%a8%8btcp--tls-12&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;这是传统 HTTPS 的流程：TCP + TLS 1.2。&lt;/p&gt;&#xA;&lt;h3 id=&#34;-所需-rtt2-次&#34;&gt;&#xD;&#xA;  ⏱️ 所需 RTT：&lt;strong&gt;2 次&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%89%80%e9%9c%80-rtt2-%e6%ac%a1&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h3 id=&#34;-过程&#34;&gt;&#xD;&#xA;  🔄 过程：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%bf%87%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;h4 id=&#34;-第-1-rtttcp-三次握手连接层&#34;&gt;&#xD;&#xA;  🧩 第 1 RTT：TCP 三次握手（连接层）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%ac%ac-1-rtttcp-%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e8%bf%9e%e6%8e%a5%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;客户端发送 &lt;code&gt;SYN&lt;/code&gt; → 请求建立连接&lt;/li&gt;&#xA;&lt;li&gt;服务端回复 &lt;code&gt;SYN + ACK&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;客户端回复 &lt;code&gt;ACK&lt;/code&gt; → &lt;strong&gt;TCP 连接建立&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;-第-2-rtttls-12-握手安全层&#34;&gt;&#xD;&#xA;  🧩 第 2 RTT：TLS 1.2 握手（安全层）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e7%ac%ac-2-rtttls-12-%e6%8f%a1%e6%89%8b%e5%ae%89%e5%85%a8%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;客户端发送 &lt;code&gt;ClientHello&lt;/code&gt;（包含加密参数）&lt;/li&gt;&#xA;&lt;li&gt;服务端返回 &lt;code&gt;ServerHello&lt;/code&gt; + 证书 + 公钥&lt;/li&gt;&#xA;&lt;li&gt;客户端验证证书、协商密钥，发送加密的 &lt;code&gt;PreMasterSecret&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;服务端确认密钥后双方可开始加密通信&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;👉 &lt;strong&gt;总共两次 RTT 才能开始传输应用层数据（如 HTTP 请求）&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>微服务通信</title>
      <link>http://localhost:1313/docs/study/middleware/kafka/microservices-comm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/middleware/kafka/microservices-comm/</guid>
      <description>&lt;p&gt;Kafka 本身在“Kafka 主题内部”的生产者到消费者环节，可以通过幂等生产者 + 事务机制实现“恰好一次”（Exactly-Once）的消息写入和消费-offset 提交。但在微服务通信的更广泛场景中，往往涉及将消息消费后的结果写入外部系统（如数据库）或调用其他服务，这时要达到端到端的“恰好一次”则更复杂，需要配合额外设计与模式。&lt;/p&gt;&#xA;&lt;h2 id=&#34;kafka-内部的-exactly-once-保证&#34;&gt;&#xD;&#xA;  &lt;strong&gt;Kafka 内部的 Exactly-Once 保证&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kafka-%e5%86%85%e9%83%a8%e7%9a%84-exactly-once-%e4%bf%9d%e8%af%81&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用幂等生产者（Producer ID + 分区内序列号 + 服务端判重）可保证单会话、单分区写入不重复。&lt;/li&gt;&#xA;&lt;li&gt;引入事务（Transactional ID + Transaction Coordinator + WriteTxnMarker + read_committed 消费模式 + sendOffsetsToTransaction），可将“消费消息→处理→生产新消息”与“提交消费 offset”放在同一事务内，确保要么都生效要么都不生效，从而在同一个 Kafka 流程链上实现恰好一次处理。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;微服务通信的挑战&#34;&gt;&#xD;&#xA;  &lt;strong&gt;微服务通信的挑战&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%be%ae%e6%9c%8d%e5%8a%a1%e9%80%9a%e4%bf%a1%e7%9a%84%e6%8c%91%e6%88%98&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;外部系统事务不可跨 Kafka 事务自动协调&lt;/strong&gt;：Kafka 事务只能保证 Kafka 内部的写入与 offset 提交原子性，无法直接与外部数据库或其它消息队列的事务做分布式两阶段提交。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;服务间调用或数据库写入的幂等性&lt;/strong&gt;：若服务处理消息后要写数据库或调用下游服务，需要保证该步骤幂等或者可回滚，否则即使 Kafka 端不重复，外部操作仍可能因重试导致重复或漏处理。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;网络或进程故障时的一致性边界&lt;/strong&gt;：处理过程中若播出消息已提交但外部写入失败，或相反，都可能导致不一致。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;常见解决模式&#34;&gt;&#xD;&#xA;  &lt;strong&gt;常见解决模式&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e8%a7%81%e8%a7%a3%e5%86%b3%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-outbox-模式&#34;&gt;&#xD;&#xA;  1. &lt;strong&gt;Outbox 模式&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-outbox-%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt; * 在业务数据库的同一个事务内，同时写入主业务表和“outbox 表”记录待发送的消息。事务提交后，由专门的进程或 Debezium 等 CDC 工具读取 outbox 表并向 Kafka 发送消息。这样可保证“业务写入与消息投递”在同一数据库事务隔离中，无漏发；发送到 Kafka 时再通过幂等或事务控制避免重复投递。&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;2-idempotent-消费与处理&#34;&gt;&#xD;&#xA;  2. &lt;strong&gt;Idempotent 消费与处理&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-idempotent-%e6%b6%88%e8%b4%b9%e4%b8%8e%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt; * 下游服务在消费 Kafka 消息写入数据库时，设计幂等写入（如基于业务主键做 UPSERT，或记录已处理消息 ID 以去重）。即便重试消费，也不会导致多次副作用。&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;3-事务协调与补偿saga&#34;&gt;&#xD;&#xA;  3. &lt;strong&gt;事务协调与补偿（Saga）&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-%e4%ba%8b%e5%8a%a1%e5%8d%8f%e8%b0%83%e4%b8%8e%e8%a1%a5%e5%81%bfsaga&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt; * 对于跨多个服务或系统的业务，将大事务拆分为多个本地事务，并设计补偿逻辑：失败时回滚已生效的步骤。配合可靠消息（Kafka 生产）与幂等处理，可在一定程度上保证最終一致性。&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;4-双写校验&#34;&gt;&#xD;&#xA;  4. &lt;strong&gt;双写+校验&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-%e5%8f%8c%e5%86%99%e6%a0%a1%e9%aa%8c&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt; * 消费消息后同时往 Kafka 和数据库写入，但需外部校验或异步补偿来处理可能的写入不一致，通常结合重试策略与幂等设计。&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;5-exactly-once-semantics-eos-for-kafka-streams&#34;&gt;&#xD;&#xA;  5. &lt;strong&gt;Exactly-Once Semantics (EOS) for Kafka Streams&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-exactly-once-semantics-eos-for-kafka-streams&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;pre&gt;&lt;code&gt; * 如果微服务本身使用 Kafka Streams，并且流处理结果也写回 Kafka，再由另一个服务消费并写数据库，可在 Kafka Streams 侧利用事务保证流内部恰好一次。但写到外部 DB 时，仍需借助 Outbox 或幂等写入等方式。&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;实践建议&#34;&gt;&#xD;&#xA;  &lt;strong&gt;实践建议&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%9e%e8%b7%b5%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;尽量把核心业务状态写入同一数据库事务时触发 outbox 消息，再由 Kafka 负责后续分发。&lt;/li&gt;&#xA;&lt;li&gt;消费端写数据库时使用幂等或存在检查；避免依赖单纯 Kafka 事务就认为外部写入也“恰好一次”。&lt;/li&gt;&#xA;&lt;li&gt;在可能的场景下，将更多逻辑留在 Kafka Streams 或 ksqlDB 等框架内，减少外部系统交互，利用其内建事务能力。&lt;/li&gt;&#xA;&lt;li&gt;明确 SLA：很多系统接受“至少一次”加幂等处理即可；若必须严格恰好一次，需要结合上述模式并接受复杂度和性能成本。&lt;/li&gt;&#xA;&lt;li&gt;对延迟、吞吐与可用性的权衡：出于高可用，往往避免分布式两阶段提交，转而用补偿或幂等设计。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;结论&#34;&gt;&#xD;&#xA;  &lt;strong&gt;结论&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%93%e8%ae%ba&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Kafka 可在自身范围内（“读 Kafka → 处理 → 写 Kafka → 提交 offset”）做到 Exactly-Once，但在微服务通信中若涉及外部数据库或其它服务，需要借助 Outbox、幂等写入、补偿事务（Saga）等模式来接近端到端恰好一次。无需强求跨多系统的分布式两阶段提交（复杂且易成瓶颈），而是通过可靠消息、幂等设计与补偿逻辑，实现在常见微服务场景下的业务正确性和最终一致性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>重放攻击</title>
      <link>http://localhost:1313/docs/study/security/replay-attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/security/replay-attack/</guid>
      <description>&lt;p&gt;重放攻击（&lt;strong&gt;Replay Attack&lt;/strong&gt;）是一种网络攻击手段，攻击者&lt;strong&gt;拦截并保存合法请求的数据包&lt;/strong&gt;，然后&lt;strong&gt;在稍后“重发”这些数据包&lt;/strong&gt;到服务器，试图欺骗系统重复执行某些操作（如转账、登录等）。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-一句话理解&#34;&gt;&#xD;&#xA;  🧨 一句话理解：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%80%e5%8f%a5%e8%af%9d%e7%90%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;攻击者不是伪造请求，而是“复读”别人发的合法请求来骗系统重复操作！&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-举个例子&#34;&gt;&#xD;&#xA;  📦 举个例子：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%be%e4%b8%aa%e4%be%8b%e5%ad%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;你在网银发送了如下转账请求（加密传输）：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /transfer&#xD;&#xA;{&#xD;&#xA;  &amp;#34;to&amp;#34;: &amp;#34;Alice&amp;#34;,&#xD;&#xA;  &amp;#34;amount&amp;#34;: 100&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;攻击者通过某种方式（如网络监听）捕获了这条请求，然后在你不知情的情况下&lt;strong&gt;原样重放&lt;/strong&gt;这条请求。&lt;/p&gt;&#xA;&lt;p&gt;结果系统再次转账了 100 元到 Alice，&lt;strong&gt;你损失了 200 元&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-为什么这条旧的请求还会被服务器接受&#34;&gt;&#xD;&#xA;  🧠 为什么这条“旧的请求”还会被服务器接受？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%ba%e4%bb%80%e4%b9%88%e8%bf%99%e6%9d%a1%e6%97%a7%e7%9a%84%e8%af%b7%e6%b1%82%e8%bf%98%e4%bc%9a%e8%a2%ab%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%8e%a5%e5%8f%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;因为很多系统：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;没有识别请求是否重复&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;没对请求加时间戳 / 唯一标识&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;加密是对内容加密，不代表防止重发&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-重放攻击常见于哪些协议场景&#34;&gt;&#xD;&#xA;  🔐 重放攻击常见于哪些协议场景？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%87%8d%e6%94%be%e6%94%bb%e5%87%bb%e5%b8%b8%e8%a7%81%e4%ba%8e%e5%93%aa%e4%ba%9b%e5%8d%8f%e8%ae%ae%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;场景&lt;/th&gt;&#xA;          &lt;th&gt;原因&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;HTTPS（0-RTT 模式）&lt;/td&gt;&#xA;          &lt;td&gt;早期数据可能在握手前被接受&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;API 接口（如支付接口）&lt;/td&gt;&#xA;          &lt;td&gt;攻击者重放旧接口实现重复操作&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;登录认证（token）&lt;/td&gt;&#xA;          &lt;td&gt;旧 token 被截获后仍可登录&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;智能设备通信&lt;/td&gt;&#xA;          &lt;td&gt;设备控制指令被复用（开锁、支付等）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-如何防御重放攻击&#34;&gt;&#xD;&#xA;  🛡️ 如何防御重放攻击？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%a6%82%e4%bd%95%e9%98%b2%e5%be%a1%e9%87%8d%e6%94%be%e6%94%bb%e5%87%bb&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;-1-使用唯一请求-idnonce&#34;&gt;&#xD;&#xA;  ✅ 1. 使用唯一请求 ID（nonce）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-%e4%bd%bf%e7%94%a8%e5%94%af%e4%b8%80%e8%af%b7%e6%b1%82-idnonce&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个请求携带唯一的随机字符串&lt;/li&gt;&#xA;&lt;li&gt;服务端校验是否已处理过该 ID（如 Redis 去重）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-2-添加时间戳并设有效期&#34;&gt;&#xD;&#xA;  ✅ 2. 添加时间戳并设有效期&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-%e6%b7%bb%e5%8a%a0%e6%97%b6%e9%97%b4%e6%88%b3%e5%b9%b6%e8%ae%be%e6%9c%89%e6%95%88%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请求中携带当前时间&lt;/li&gt;&#xA;&lt;li&gt;服务器验证是否在允许的时间窗口内（如 2 分钟）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-3-使用-hmac-签名请求参数&#34;&gt;&#xD;&#xA;  ✅ 3. 使用 HMAC 签名请求参数&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-3-%e4%bd%bf%e7%94%a8-hmac-%e7%ad%be%e5%90%8d%e8%af%b7%e6%b1%82%e5%8f%82%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端对请求参数 + 时间戳生成签名&lt;/li&gt;&#xA;&lt;li&gt;服务端验证签名是否正确、是否被篡改&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-4-使用-tls-防中间人监听基础防线&#34;&gt;&#xD;&#xA;  ✅ 4. 使用 TLS 防中间人监听（基础防线）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-4-%e4%bd%bf%e7%94%a8-tls-%e9%98%b2%e4%b8%ad%e9%97%b4%e4%ba%ba%e7%9b%91%e5%90%ac%e5%9f%ba%e7%a1%80%e9%98%b2%e7%ba%bf&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果攻击者无法截获原始数据，就不能重放&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-5-对-0-rtt-请求做幂等性校验quictls-13-特别注意&#34;&gt;&#xD;&#xA;  ✅ 5. 对 0-RTT 请求做幂等性校验（QUIC/TLS 1.3 特别注意）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-5-%e5%af%b9-0-rtt-%e8%af%b7%e6%b1%82%e5%81%9a%e5%b9%82%e7%ad%89%e6%80%a7%e6%a0%a1%e9%aa%8cquictls-13-%e7%89%b9%e5%88%ab%e6%b3%a8%e6%84%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;拒绝非幂等类型（如 POST/PUT）使用 0-RTT&lt;/li&gt;&#xA;&lt;li&gt;服务端缓存并验证历史 0-RTT 请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-补充幂等请求-vs-非幂等请求&#34;&gt;&#xD;&#xA;  💡 补充：幂等请求 vs 非幂等请求&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%a1%a5%e5%85%85%e5%b9%82%e7%ad%89%e8%af%b7%e6%b1%82-vs-%e9%9d%9e%e5%b9%82%e7%ad%89%e8%af%b7%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;请求类型&lt;/th&gt;&#xA;          &lt;th&gt;是否幂等&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;GET&lt;/td&gt;&#xA;          &lt;td&gt;✅&lt;/td&gt;&#xA;          &lt;td&gt;多次访问结果一样&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;POST&lt;/td&gt;&#xA;          &lt;td&gt;❌&lt;/td&gt;&#xA;          &lt;td&gt;多次发送可能产生副作用（如转账）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;PUT&lt;/td&gt;&#xA;          &lt;td&gt;✅&lt;/td&gt;&#xA;          &lt;td&gt;设置某值，多次是一样的&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DELETE&lt;/td&gt;&#xA;          &lt;td&gt;✅/❌&lt;/td&gt;&#xA;          &lt;td&gt;一般幂等，但有特殊情况除外&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-总结一句话&#34;&gt;&#xD;&#xA;  🎯 总结一句话：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%80%bb%e7%bb%93%e4%b8%80%e5%8f%a5%e8%af%9d&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;重放攻击 = 重发旧的有效请求，欺骗系统重复执行操作。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>主流许可证对比</title>
      <link>http://localhost:1313/docs/study/base/license-comparison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/base/license-comparison/</guid>
      <description>&lt;h2 id=&#34;开源许可证对比表&#34;&gt;&#xD;&#xA;  开源许可证对比表&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81%e5%af%b9%e6%af%94%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;许可证名称&lt;/th&gt;&#xA;          &lt;th&gt;类型&lt;/th&gt;&#xA;          &lt;th&gt;专利授权&lt;/th&gt;&#xA;          &lt;th&gt;Copyleft 强度&lt;/th&gt;&#xA;          &lt;th&gt;商业兼容性&lt;/th&gt;&#xA;          &lt;th&gt;与 GPL 兼容性&lt;/th&gt;&#xA;          &lt;th&gt;适用场景&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;MIT&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;小型项目、库&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Apache 2.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;✅ 有&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;企业级项目、涉及专利&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;GPL v3.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;强 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;✅ 有&lt;/td&gt;&#xA;          &lt;td&gt;✅ 强&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 限制&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;开源项目、需强制开源&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;GPL v2.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;强 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 强&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 限制&lt;/td&gt;&#xA;          &lt;td&gt;❌ 否&lt;/td&gt;&#xA;          &lt;td&gt;传统开源项目&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;AGPL v3.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;强 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;✅ 有&lt;/td&gt;&#xA;          &lt;td&gt;✅ 最强&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 限制&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;SaaS、网络服务&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;LGPL v2.1&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;弱 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 弱&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;库、插件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;BSD 2-Clause&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;系统级组件、商业集成&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;BSD 3-Clause&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;商业软件、需署名保护&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Boost 1.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;C++ 库、工具链&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;CC0 1.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;公共领域&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;数据集、内容共享&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;EPL 2.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;弱 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;✅ 有&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 弱&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;企业软件、模块化项目&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;MPL 2.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;弱 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 部分&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 弱&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;浏览器、混合授权项目&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
  </channel>
</rss>
