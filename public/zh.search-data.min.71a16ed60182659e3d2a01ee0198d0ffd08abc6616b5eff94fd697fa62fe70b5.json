[{"id":0,"href":"/docs/example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":"\rCaput vino delphine in tamen vias\r#\rCognita laeva illo fracta\r#\rLorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere\r#\rPectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit\r#\rAurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua\r#\rIuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta\r#\rMortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":1,"href":"/docs/study/system-design/","title":"系统设计","section":"学习资料","content":"\r要求\r#\r1. 分布式、可扩展。\r#\r分布式：微服务、异步通信、分布式缓存、K8s 可扩展：HPA、分库分表、K8s DNS Service、多AZ、多国家 2. 用户可搜索、可预约、可重新安排、可取消，基于医生的位置、专科、可用时间。\r#\r搜索\r#\rCache Aside，Invalidate when Booking and Cancellation (TTL ~ minutes) Caffeine 异步延迟双删 权衡\r#\r优点 说明 ⚡ 高吞吐 Redis 命中率高，支持 QPS \u0026gt; 1000+ ⏱️ 低延迟 单医生查询 latency ≈ 几 ms ✅ 写后无读 Slot 数据预生成、写入后只读，适合缓存 🔁 异步更新 Cache 由 Kafka 驱动异步更新，无需强一致性 缺点 说明 🕒 数据轻微不一致 TTL 失效期间可能展示已被预约的 slot（在 Booking 阶段兜底） 🧠 Cache Invalidate 复杂 多服务写入 slot 状态需保证正确清除 Redis 缓存 📦 大量 slot Redis 内存占用需控制（可做分片 or 使用 Redis Cluster） 预约\r#\rRedlock 加锁 (TTL ~ seconds) 加入 Request ID 作为唯一性约束 数据库悲观锁（Pessimistic Lock）双检 插入预约（Appointment） 发布 AppointmentCreated 到 Kafka 释放锁（Unlock） 响应客户端 消费者（Search Service）Cache Invalidation 消费者（Notification Service）发送消息 权衡\r#\r优点 说明 ✅ 高一致性保障 锁+事务双重保证 ✅ 幂等设计 防止重复预约 ✅ 可观测性强 Kafka 推送事件用于追踪链路 ✅ 异步解耦 非核心逻辑（通知、缓存）不影响主流程性能 缺点 说明 ❗ Redis 不可用 Redlock 依赖 Redis，可引入降级机制（fallback DB lock） ❗ 高并发下延迟 拥塞在热点 slot（比如热门医生）可用队列排队缓解 ❗ 事务复杂性 需细致处理锁释放和回滚，避免死锁 重新安排\r#\rRedlock加锁 (TTL ~ seconds) 数据库悲观锁（Pessimistic Lock）双检 校验修改旧预约，插入新预约 发布 AppointmentRescheduled 到 Kafka 释放锁（Unlock） 响应客户端 消费者（Search Service）Cache Invalidation 消费者（Notification Service）发送消息 权衡\r#\r优点 说明 ✅ 一致性保障 事务更新 + 幂等控制，避免错约/重复约 ✅ 双 slot 安全管理 显式释放旧 slot、锁定新 slot ✅ 解耦逻辑 Kafka 用于通知与缓存刷新，主流程不阻塞 缺点 说明 ❗ 新旧 slot 状态切换逻辑复杂 需要明确状态流转模型 ❗ Redis 不可用影响锁 降级 fallback：数据库悲观锁 ❗ 用户误操作可能导致重复 reschedule 需限制频率，增强幂等性保障 取消\r#\rRedlock加锁 (TTL ~ seconds) 数据库悲观锁（Pessimistic Lock）双检 校验修改旧预约 发布 AppointmentCanceled 到 Kafka 释放锁（Unlock） 响应客户端 消费者（Search Service）Cache Invalidation 消费者（Notification Service）发送消息 权衡\r#\r3. 服务5000万用户，50万医生，每秒700次搜索，每秒90次预约。\r#\r4. 轻松拓展新地区。\r#\r配置层面隔离（Spring Cloud Config） 数据库分库（Date Partitioning） 通用服务（Common Services）和差异化定制（Custom Services） API设计（/fr, /de） 多租户部署（namespace） 日志标签（Label） 5. 要考虑服务之间的扩展性，容错性，数据一致性。\r#\r扩展性：HPA，Ingress Controller，Redis Cluster Slot，Kafka Brokers Partition, Database Sharding 容错性：Service Mesh，多AZ，Redis Redlock，Kafka 最终一致性：数据库事务，Redis Redlock，SAGA Pattern，异步消息（Async Message），重试（Retry），死信队列（Dead Letter Queue），缓存失效（Cache Invalidation），事件监听（Event-driven Monitoring） 问题\r#\r1. 搜索前（Search）需要经过鉴权（Authorization）吗？\r#\r如果不需要：\n把Search Service置前 这样可能更吸引用户 但是会增加访问量 2. 搜索时都有什么筛选条件（Filter Condition）？\r#\r如果涉及到距离，交通工具，路程用时等条件：\n可以设计第三方供应商（3rd-Party Vendors）提供地图（Map API）等接口 如果涉及到医生简介（Summary），全文搜索（Full-Text Search）:\n可以引入ElasticSearch 3. 我们不同国家的市场使用同一个应用（The only one app）吗？\r#\r如果是：\n国际化（Internationalization），时间、语言、货币、日期格式 配置开关（Feature Flag） 根据设备本地时间（Device Time）或者定位（Localization） 如果不是：\n部署过程要考虑更多模块 4. 预约会跨天（Span 2 days）吗？\r#\r要考虑数据库表结构（Database table structure) 代码逻辑中要考虑 5. 每秒700次搜索和90次预约是最高峰值（Maximum Peak Value）吗？\r#\r影响规模（Scale） 可扩展性和安全性\r#\r1. 可扩展性\r#\r方面 关键实践 水平扩展（Horizontal Scaling） 每个服务可以独立部署多个副本 服务自治（Service Autonomy） 各服务可独立扩缩，不依赖整体系统 容器化部署 使用 Docker + Kubernetes 实现自动扩缩容 负载均衡（Load Balancing） 使用 API Gateway 或 Service Mesh 均衡流量 异步通信 Kafka、RabbitMQ 等提高吞吐量和解耦 缓存策略 Redis、本地缓存，减少数据库压力 数据库分库分表 水平拆分提升并发能力 服务熔断/限流 Sentinel、Hystrix 防止雪崩效应 2. 安全性\r#\r安全领域 技术手段 身份认证（Authentication） OAuth 2.0、OIDC、JWT Token 服务授权（Authorization） RBAC、ABAC、API 权限网关 通信加密 HTTPS / TLS、gRPC + mTLS 服务间认证 Service Mesh（如 Istio）支持 mTLS 自动加密 API 网关安全 限流、防止重放攻击、请求签名验证 数据安全 数据加密（传输 + 存储）、脱敏、访问审计 容器安全 镜像扫描、Kubernetes 安全策略（PodSecurityPolicy） 日志审计 审计用户行为、异常访问记录 防攻击 防止 XSS / CSRF / SQL 注入，使用 WAF、防火墙等 优化\r#\r服务间通信双向TLS（Mutual TLS between services） 用Service Mesh统一做熔断、限流、重试（Centralized resiliency by service mesh） 多AZ部署，包括Services，Redis Cluster等（Multi-AZ） 二级缓存，一级Caffeine（Local），二级Redis（Distributed） 数据库读写分离（Read-Write Separation），分库分表（Sharding） 全链路Trace（Telemetry，end-to-end tracing） 固定时间批处理热点时间多（Scheduled batch to store hot time slots） "},{"id":2,"href":"/docs/example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":"\rAt me ipso nepotibus nunc celebratior genus\r#\rTanto oblite\r#\rLorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius\r#\rQuibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae\r#\rCredulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":3,"href":"/docs/study/tips/","title":"补充","section":"学习资料","content":"\r用途\r#\r1. API Gateway\r#\r身份验证（Authentication \u0026amp; Authorization） 速率限制（Rate Limit） 请求跟踪（Request Tracing） 熔断（Circuit Breaking） 2. Search Service\r#\rRedis + Database搜索 3. Booking Service\r#\rRedis Redlock，时段级锁定（Slot-level Locking），数据库事务（Transaction） Idempotency，Request ID 发布到Kafka进行缓存失效和通知 预约流程\r#\rRedlock加锁 数据库悲观锁（Pessimistic Lock）双检 插入预约（Appointment），加入Request ID作为唯一性约束 发布AppointmentCreated到Kafka 释放锁（Unlock） 响应客户端 消费者（Search Service）Cache Invalidation 消费者（Notification Service）发送消息 4. Database\r#\r数据库分区（Partition by country or Doctor‘s ID） 消息总线（Message Bus），用于解耦预约和缓存失效和通知 5. Notification Service\r#\rEmail Service or SMS Service （Sendgrid \u0026amp; Twilio） In-app notification （Firebase etc.) 扩展\r#\r根据CPU，Memory等进行横向拓展（Horizontal Pod Autoscaler） redis分片 数据库读写分离（Read-Write Separation） 数据库分区（Partition） 容错\r#\r熔断（Circuit Breaker， Resilience4j） 健康检查（Health Checks） 自我修复（Self-Healing） 告警（Alert） 安全\r#\r端到端TLS OAuth2登录 Rate Limit Logging 面试表述\r#\r负载均衡和熔断限流在哪里做，不在gateway做吗？\r#\r“我们在 Gateway 层做外部限流和初级熔断，用云厂商 LB + Ingress/Gateway 控制边缘流量；在 服务内部，客户端用 Ribbon 或 Envoy 做调用负载均衡，用 Resilience4j 做熔断和限流保护下游；在 平台侧，Kubernetes Service 负责 Pod 级别均衡，若引入 Service Mesh，则 Envoy sidecar 可做更细粒度的 LB、熔断、限流、流量镜像等高级功能。这样多层协同，既保护了下游服务，也保证了全链路的高可用和可控性。” k8s中推荐用什么方式做用户侧调用和服务间调用的负载均衡、限流、熔断？\r#\r“在边缘我们用云端 LB + Ingress 或 Envoy-based Gateway 做外部负载均衡和限流，可选性强且搭配插件化熔断；在服务内部调用层面，推荐用 Service Mesh（Envoy Sidecar）来透明做服务发现、客户端负载均衡、网络限流和熔断，代码层面再用 Resilience4j 对关键依赖做二次保护。” k8s需要做注册中心集群吗？\r#\r“在 Kubernetes 中，API Server + etcd + kube-proxy 本身就构成了高可用的服务注册与发现体系，我们只需创建 Service 资源，K8s 自动维护 Endpoints 并做 DNS/负载均衡。除非有跨集群或必须用 Spring Cloud Netflix 生态的遗留需求，否则不再额外部署注册中心集群，这样能简化架构并利用 K8s 的原生 HA 能力。” 待解决问题\r#\r如果快速将服务扩展到其他国家？\r#\r1. 目标拆解：支持多国家的能力需求\r#\r维度 要求说明 🏛 数据隔离 每个国家业务数据逻辑隔离（合规/监管要求） 🌐 业务配置差异 国家A/B 的工作日、货币、语言、时间等不同 🧰 服务逻辑差异 部分微服务逻辑可能略有差异 🚀 快速部署 新国家上线不需大改动，支持可配置部署 🔐 合规安全 数据主权（Data Residency）遵守各国法规 2. 配置驱动的多国家支持\r#\r方法 实现 配置中心 每个国家一份配置，如 config_fr.yaml, config_de.yaml 通过配置注入 控制：开放时间段、货币、支持语言、特殊逻辑开关 多租户标识（Tenant ID） 请求中传入国家 ID (X-Country: FR)，统一识别 "},{"id":4,"href":"/docs/example/table-of-contents/","title":"Table of Contents","section":"Example Site","content":"\rUbi loqui\r#\rMentem genus facietque salire tempus bracchia\r#\rLorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice\r#\rOra precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis\r#\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\rPlacabilis coactis nega ingemuit ignoscat nimia non\r#\rFrontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) {\rzif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive;\rgigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop),\rpanel_point_firmware);\rspyware_bash.statePopApplet = express_netbios_digital(\rinsertion_troubleshooting.brouter(recordFolderUs), 65);\r}\rrecursionCoreRay = -5;\rif (hub == non) {\rportBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard),\rfont_radcab, guidCmsScalable + reciprocalMatrixPim);\rleft.bug = screenshot;\r} else {\rtooltipOpacity = raw_process_permalink(webcamFontUser, -1);\rexecutable_router += tape;\r}\rif (tft) {\rbandwidthWeb *= social_page;\r} else {\rregular += 611883;\rthumbnail /= system_lag_keyboard;\r}\rCaesorum illa tu sentit micat vestes papyriferi\r#\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":5,"href":"/docs/example/","title":"Example Site","section":"Docs","content":"\rIntroduction\r#\rFerre hinnitibus erat accipitrem dixi Troiae tollens\r#\rLorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad\r#\rLocum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol\r#\rNec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue,\rviralItunesBalancing, bankruptcy_file_pptp)) {\rfile += ip_cybercrime_suffix;\r}\rif (runtimeSmartRom == netMarketingWord) {\rvirusBalancingWin *= scriptPromptBespoke + raster(post_drive,\rwindowsSli);\rcd = address_hertz_trojan;\rsoap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui);\r} else {\rmegabyte.api = modem_flowchart - web + syntaxHalftoneAddress;\r}\rif (3 \u0026lt; mebibyteNetworkAnimated) {\rpharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle(\rdvrSyntax, cdma);\radf_sla *= hoverCropDrive;\rtemplateNtfs = -1 - vertical;\r} else {\rexpressionCompressionVariable.bootMulti = white_eup_javascript(\rtable_suffix);\rguidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1,\rmanagementRosetta(webcamActivex), 740874);\r}\rvar virusTweetSsl = nullGigo;\rTrepident sitimque\r#\rSentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":6,"href":"/docs/example/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":"\r4th Level of Menu\r#\rCaesorum illa tu sentit micat vestes papyriferi\r#\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":7,"href":"/docs/example/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":"\r3rd Level of Menu\r#\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r"},{"id":8,"href":"/docs/example/hidden/","title":"Hidden","section":"Example Site","content":"\rThis page is hidden in menu\r#\rQuondam non pater est dignior ille Eurotas\r#\rLatent te facies\r#\rLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona\r#\rO fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer),\rpad.property_data_programming.sectorBrowserPpga(dataMask, 37,\rrecycleRup));\rintellectualVaporwareUser += -5 * 4;\rtraceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\rsurge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\rcommerce_add_ppc);\rif (lun_ipv) {\rverticalExtranet(1, thumbnail_ttl, 3);\rbar_graphics_jpeg(chipset - sector_xmp_beta);\r}\rFronde cetera dextrae sequens pennis voce muneris\r#\rActa cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software;\rif (internic \u0026gt; disk) {\remoticonLockCron += 37 + bps - 4;\rwan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\rsimplex -= downloadAccess;\r}\rvar volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\rsector(memory(firewire + interlaced, wired)); "},{"id":9,"href":"/docs/hidden/1/","title":"1st","section":"隐藏","content":"\rList\r#\r增加、插入元素\r#\rlst.append(x)：在末尾添加元素 x。 lst.extend(iterable)：在末尾一次性追加一个可迭代对象中的所有元素，相当于多次 append。 lst.insert(i, x)：在索引 i 位置插入元素 x，后面的元素右移。 删除元素\r#\rlst.pop([i])：删除并返回索引 i 处的元素，若不传 i，默认删除并返回最后一个元素。 lst.remove(x)：删除列表中第一个值为 x 的元素；若不存在则抛 ValueError。 del lst[i] / del lst[i:j]：通过 del 关键字删除索引 i 处或区间 [i:j] 内的元素。 lst.clear()：清空列表，等价于 del lst[:]。 查找与统计\r#\rlst.index(x[, start[, end]])：返回列表中值为 x 的第一个下标，可选指定查找区间。 lst.count(x)：统计列表中值为 x 的出现次数。 排序和反转\r#\rlst.sort(key=None, reverse=False)：就地（in-place）升序排序，支持 key 函数和 reverse=True（降序）。 lst.reverse()：就地反转列表顺序。 sorted(lst, key=None, reverse=False)：内建函数，返回新的排序后列表，不改变原列表。 复制\r#\rlst.copy()：浅拷贝列表，相当于 lst[:]。 其他常见操作\r#\rlen(lst)：返回列表长度。 lst[i] / lst[i:j:k]：索引或切片操作，可读可写（切片赋值时替换区间）。 i in lst：判断元素是否在列表中，时间复杂度 O(n)。 min(lst)、max(lst)：返回最小值/最大值（列表元素需可比较）。 Set\r#\r增加、删除元素\r#\rs.add(x)：将元素 x 添加到集合中。 s.update(iterable)：将可迭代对象中的所有元素加到集合中。 s.remove(x)：删除元素 x，若不存在则抛 KeyError。 s.discard(x)：删除元素 x，若不存在不抛异常。 s.pop()：随机删除并返回一个元素（集合是无序的）。 s.clear()：清空集合。 Dict\r#\r访问、赋值\r#\rd[key]：获取键 key 对应的值，若 key 不存在抛 KeyError。 d.get(key[, default])：获取键 key 的值，若不存在返回 default（默认为 None）。 d[key] = value：新增或修改键值对。 d.setdefault(key[, default])：若 key 存在，返回对应值；若不存在，则将 key: default 加入字典并返回 default。 删除\r#\rd.pop(key[, default])：删除键 key 并返回对应值；若不存在且未给 default，抛 KeyError；若提供 default，返回 default。 d.popitem()：随机（实际是 LIFO 顺序）删除并返回一对 (key, value)；Python3.7+ 中为删除最后插入的键值对。 del d[key]：删除键 key，若不存在抛 KeyError。 d.clear()：清空所有键值对。 遍历\r#\rfor k in d:：遍历所有键（同 for k in d.keys():）。 for k, v in d.items():：同时遍历键和值。 for v in d.values():：遍历所有值。 更新\r#\rd.update(other_dict_or_iterable)：用另一个字典或键值对可迭代对象更新 d，相同键会被覆盖，新键追加。 视图（views）\r#\rd.keys()、d.values()、d.items() 分别返回可迭代的视图对象，实时反映字典变化。 其他常用操作\r#\rlen(d)：键值对数量。 key in d：判断键是否存在于字典中。 "},{"id":10,"href":"/docs/hidden/Java%E8%B5%84%E6%96%99/","title":"Java资料","section":"隐藏","content":"\r目录\r#\r队列 非阻塞队列（适用于单线程或手动同步） 阻塞队列（java.util.concurrent 包） 无锁/高性能队列（非阻塞并发队列） 对比总结 典型使用场景 LinkedList 的主要特性 List 接口的方法 Deque（双端队列）方法 Queue 方法 创建线程的两种方式 继承 Thread 类 实现 Runnable 接口（推荐） Thread 常用方法一览 队列\r#\r非阻塞队列（适用于单线程或手动同步）\r#\r实现类 特点 LinkedList 实现了 Deque 和 Queue，可以作为普通队列或双端队列使用 PriorityQueue 元素按优先级排列（非 FIFO），不支持并发 ArrayDeque 高性能双端队列，非线程安全 阻塞队列（java.util.concurrent 包）\r#\r实现类 特点 ArrayBlockingQueue 有界阻塞队列，数组实现，支持 FIFO LinkedBlockingQueue 可选容量的阻塞队列，链表实现，FIFO PriorityBlockingQueue 无界，带优先级排序，不保证 FIFO DelayQueue 元素按延迟时间排序，仅在到期后才能取出 SynchronousQueue 每个插入操作必须等待一个对应的取出操作（零容量） LinkedTransferQueue 支持生产者等待消费者、容量无界 BlockingDeque 支持阻塞的双端队列操作（如 LinkedBlockingDeque） 无锁/高性能队列（非阻塞并发队列）\r#\r实现类 特点 ConcurrentLinkedQueue 无界、基于链表、适用于高并发（非阻塞） ConcurrentLinkedDeque 双端无锁队列，适合并发环境 对比总结\r#\r队列类型 是否阻塞 是否线程安全 是否有界 是否支持优先级 LinkedList 否 否 否 否 PriorityQueue 否 否 否 是 ArrayBlockingQueue 是 是 是 否 LinkedBlockingQueue 是 是 可选 否 PriorityBlockingQueue 是 是 否 是 DelayQueue 是 是 否 是（延迟时间） SynchronousQueue 是 是 是（零容量） 否 ConcurrentLinkedQueue 否 是 否 否 典型使用场景\r#\r任务调度 / 消息中转： LinkedBlockingQueue, DelayQueue\n高并发日志采集： ConcurrentLinkedQueue\n线程池任务队列： ArrayBlockingQueue, SynchronousQueue\n定时/优先级任务： PriorityBlockingQueue, DelayQueue\nLinkedList 的主要特性\r#\r双向链表实现：插入、删除元素效率高（相较于 ArrayList）\n元素可重复，允许 null\n非线程安全（需要手动同步）\nList 接口的方法\r#\r方法 说明 add(E e) 添加元素到末尾 add(int index, E element) 指定位置插入元素 remove(int index) 移除指定位置的元素 remove(Object o) 删除第一个匹配的元素 get(int index) 获取指定位置的元素 set(int index, E element) 设置指定位置的元素 indexOf(Object o) 查找元素首次出现的位置 lastIndexOf(Object o) 查找元素最后出现的位置 clear() 清空所有元素 size() 获取元素数量 isEmpty() 判断是否为空 Deque（双端队列）方法\r#\r方法 说明 addFirst(E e) 头部添加元素 addLast(E e) 尾部添加元素 removeFirst() 移除并返回第一个元素 removeLast() 移除并返回最后一个元素 getFirst() 获取第一个元素，不移除 getLast() 获取最后一个元素，不移除 offerFirst(E e) 头部插入元素，失败返回 false offerLast(E e) 尾部插入元素，失败返回 false pollFirst() 获取并移除第一个元素，队列空时返回 null pollLast() 获取并移除最后一个元素，队列空时返回 null peekFirst() 查看第一个元素，不移除 peekLast() 查看最后一个元素，不移除 Queue 方法\r#\r方法 说明 offer(E e) 添加元素到队尾 poll() 取出并移除队头元素 peek() 查看队头元素但不移除 创建线程的两种方式\r#\r继承 Thread 类\r#\rclass MyThread extends Thread { public void run() { System.out.println(\u0026#34;Thread is running\u0026#34;); } } MyThread t = new MyThread(); t.start(); // 启动线程 实现 Runnable 接口（推荐）\r#\rclass MyRunnable implements Runnable { public void run() { System.out.println(\u0026#34;Thread is running\u0026#34;); } } Thread t = new Thread(new MyRunnable()); t.start(); Thread 常用方法一览\r#\r方法名 说明 start() 启动线程（会调用 run() 方法） run() 线程执行的任务内容（可重写） sleep(long millis) 当前线程睡眠指定时间（毫秒） join() 等待某个线程执行完 interrupt() 中断线程（并不会强制停止） isInterrupted() 检查线程是否被中断 setPriority(int newPriority) 设置线程优先级（1~10） getPriority() 获取线程优先级 setName(String name) 设置线程名 getName() 获取线程名 setDaemon(boolean on) 设置为守护线程（在 start() 前调用） isDaemon() 判断是否是守护线程 currentThread() 获取当前正在执行的线程对象（静态方法） yield() 当前线程让出 CPU 执行权（不一定成功） isAlive() 判断线程是否仍在运行中 "},{"id":11,"href":"/docs/hidden/SQL%E8%B5%84%E6%96%99/","title":"Sql资料","section":"隐藏","content":"\r目录\r#\r查询数据（SELECT） 基本查询 查询所有字段 使用条件（WHERE） 排序（ORDER BY） 去重（DISTINCT） 分页（LIMIT / OFFSET） 插入数据（INSERT） 插入单行 插入多行 更新数据（UPDATE） 删除数据（DELETE） 聚合函数（GROUP BY + HAVING） 连接查询（JOIN） 子查询（Subquery） CASE 表达式（类似 IF） 创建和管理表结构（DDL） 常用运算符速查 常见组合例子 SQL常用语法\r#\r一、查询数据（SELECT）\r#\r基本查询\r#\rSELECT column1, column2 FROM table_name; 查询所有字段\r#\rSELECT * FROM table_name; 使用条件（WHERE）\r#\rSELECT name, age FROM users WHERE age \u0026gt;= 18 AND gender = \u0026#39;F\u0026#39;; 排序（ORDER BY）\r#\rSELECT name, age FROM users ORDER BY age DESC, name ASC; 去重（DISTINCT）\r#\rSELECT DISTINCT city FROM users; 分页（LIMIT / OFFSET）\r#\r-- MySQL / PostgreSQL SELECT * FROM users LIMIT 10 OFFSET 20; 二、插入数据（INSERT）\r#\r插入单行\r#\rINSERT INTO users (name, age) VALUES (\u0026#39;Alice\u0026#39;, 25); 插入多行\r#\rINSERT INTO users (name, age) VALUES (\u0026#39;Bob\u0026#39;, 30), (\u0026#39;Carol\u0026#39;, 22); 三、更新数据（UPDATE）\r#\rUPDATE users SET age = 26 WHERE name = \u0026#39;Alice\u0026#39;; 四、删除数据（DELETE）\r#\rDELETE FROM users WHERE age \u0026lt; 18; 五、聚合函数（GROUP BY + HAVING）\r#\rSELECT department, COUNT(*) AS total FROM employees GROUP BY department HAVING COUNT(*) \u0026gt; 5; 常见聚合函数：\n函数 作用 COUNT() 计数 SUM() 求和 AVG() 平均值 MAX() 最大值 MIN() 最小值 六、连接查询（JOIN）\r#\rSELECT u.name, o.order_id FROM users u JOIN orders o ON u.id = o.user_id; 七、子查询（Subquery）\r#\rSELECT name FROM users WHERE id IN ( SELECT user_id FROM orders WHERE amount \u0026gt; 100 ); 八、CASE 表达式（类似 IF）\r#\rSELECT name, CASE WHEN age \u0026lt; 18 THEN \u0026#39;minor\u0026#39; WHEN age \u0026lt; 65 THEN \u0026#39;adult\u0026#39; ELSE \u0026#39;senior\u0026#39; END AS age_group FROM users; 九、创建和管理表结构（DDL）\r#\r-- 创建表 CREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(100), age INT ); -- 修改表 ALTER TABLE users ADD email VARCHAR(255); -- 删除表 DROP TABLE users; 十、常用运算符速查\r#\r类别 运算符/关键字 比较 =, \u0026lt;\u0026gt;, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;= 范围 BETWEEN x AND y 集合 IN (..) 模糊匹配 LIKE '%abc%' 空值检查 IS NULL, IS NOT NULL 逻辑运算 AND, OR, NOT 常见组合例子\r#\rSELECT department, AVG(salary) FROM employees WHERE hire_date \u0026gt;= \u0026#39;2022-01-01\u0026#39; GROUP BY department ORDER BY AVG(salary) DESC LIMIT 5; "},{"id":12,"href":"/docs/hidden/System-Design%E8%B5%84%E6%96%99/","title":"System Design资料","section":"隐藏","content":"\r患者预约系统\r#\r功能需求\r#\r医生：设置可用时间段。\n患者：查看可用时间段并预约。\n系统：返回包含预约时段的字典。\n系统架构\r#\r系统采用简化的架构，主要包括以下组件：\n数据存储：使用 Map 存储医生的可用时间段和预约信息。\n预约管理：处理预约的创建和查询。\nJava 实现示例\r#\rimport java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.*; class AppointmentScheduler { private Map\u0026lt;String, List\u0026lt;TimeSlot\u0026gt;\u0026gt; doctorAvailability = new HashMap\u0026lt;\u0026gt;(); private Map\u0026lt;String, List\u0026lt;TimeSlot\u0026gt;\u0026gt; appointments = new HashMap\u0026lt;\u0026gt;(); // 添加医生的可用时间段 public void addDoctorAvailability(String doctorId, List\u0026lt;TimeSlot\u0026gt; slots) { doctorAvailability.put(doctorId, slots); } // 获取医生的可用预约时间段 public List\u0026lt;TimeSlot\u0026gt; getAvailableSlots(String doctorId) { List\u0026lt;TimeSlot\u0026gt; available = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;TimeSlot\u0026gt; allSlots = doctorAvailability.getOrDefault(doctorId, new ArrayList\u0026lt;\u0026gt;()); List\u0026lt;TimeSlot\u0026gt; bookedSlots = appointments.getOrDefault(doctorId, new ArrayList\u0026lt;\u0026gt;()); for (TimeSlot slot : allSlots) { if (!bookedSlots.contains(slot)) { available.add(slot); } } return available; } // 为患者预约指定的时间段 public boolean bookAppointment(String doctorId, String patientId, TimeSlot desiredSlot) { List\u0026lt;TimeSlot\u0026gt; availableSlots = getAvailableSlots(doctorId); if (availableSlots.contains(desiredSlot)) { appointments.computeIfAbsent(doctorId, k -\u0026gt; new ArrayList\u0026lt;\u0026gt;()).add(desiredSlot); System.out.println(\u0026#34;预约成功：\u0026#34; + desiredSlot); return true; } else { System.out.println(\u0026#34;预约失败，时间段不可用。\u0026#34;); return false; } } // 获取医生的所有预约 public List\u0026lt;TimeSlot\u0026gt; getAppointments(String doctorId) { return appointments.getOrDefault(doctorId, new ArrayList\u0026lt;\u0026gt;()); } } class TimeSlot { private LocalDateTime start; private LocalDateTime end; public TimeSlot(LocalDateTime start, LocalDateTime end) { this.start = start; this.end = end; } // 重写 equals 和 hashCode 方法，以便在列表中正确比较 TimeSlot 对象 @Override public boolean equals(Object obj) { if (this == obj) return true; if (!(obj instanceof TimeSlot)) return false; TimeSlot other = (TimeSlot) obj; return start.equals(other.start) \u0026amp;\u0026amp; end.equals(other.end); } @Override public int hashCode() { return Objects.hash(start, end); } @Override public String toString() { DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\u0026#34;yyyy-MM-dd HH:mm\u0026#34;); return start.format(formatter) + \u0026#34; - \u0026#34; + end.format(formatter); } } // 示例使用 public class Main { public static void main(String[] args) { AppointmentScheduler scheduler = new AppointmentScheduler(); String doctorId = \u0026#34;Dr_Smith\u0026#34;; String patientId = \u0026#34;Patient_1\u0026#34;; // 创建医生的可用时间段 List\u0026lt;TimeSlot\u0026gt; slots = new ArrayList\u0026lt;\u0026gt;(); LocalDateTime startTime = LocalDateTime.of(2025, 5, 14, 9, 0); for (int i = 0; i \u0026lt; 8; i++) { TimeSlot slot = new TimeSlot(startTime.plusMinutes(i * 30), startTime.plusMinutes((i + 1) * 30)); slots.add(slot); } // 添加医生的可用时间段 scheduler.addDoctorAvailability(doctorId, slots); // 获取并显示可用时间段 List\u0026lt;TimeSlot\u0026gt; availableSlots = scheduler.getAvailableSlots(doctorId); System.out.println(\u0026#34;可用时间段：\u0026#34;); for (TimeSlot slot : availableSlots) { System.out.println(slot); } // 预约一个时间段 TimeSlot desiredSlot = availableSlots.get(0); scheduler.bookAppointment(doctorId, patientId, desiredSlot); // 显示所有预约 List\u0026lt;TimeSlot\u0026gt; appointments = scheduler.getAppointments(doctorId); System.out.println(\u0026#34;所有预约：\u0026#34;); for (TimeSlot appointment : appointments) { System.out.println(appointment); } } } 说明\r#\r医生可用时间段：通过 addDoctorAvailability 方法添加，系统会根据指定的时间范围生成所有可用的时间段。\n获取可用时间段：getAvailableSlots 方法返回医生当前未被预约的时间段。\n预约时间段：bookAppointment 方法允许患者预约一个指定的时间段，如果该时间段可用，则预约成功。\n查看所有预约：getAppointments 方法返回医生的所有预约信息。\n"},{"id":13,"href":"/docs/hidden/%E6%9E%B6%E6%9E%84%E8%B5%84%E6%96%99/","title":"架构资料","section":"隐藏","content":"Below are 10 Java and 10 Microservices technical questions—each with concise bilingual answers tailored to your background and the Doctolib Senior Software Engineer role.\nSummary\r#\r结合您在简历和动机信中强调的 Java 全栈、微服务 和 快速学习 能力，以及 Doctolib 对 后端 Java、可扩展架构 的需求，下列问题覆盖核心概念、常见陷阱和实战应用，帮助您在面试中脱颖而出。\n一、Java 相关问题\r#\r1. 为什么说 Java 是平台无关的？\r#\rEN: Java bytecode runs on any JVM regardless of underlying OS or hardware, thanks to the “write once, run anywhere” design. (\rGeeksforGeeks) CN： Java 编译生成的字节码 (.class) 可以在任何安装了 JVM 的系统上运行，实现“一次编写，到处运行”(\rGeeksforGeeks)。\n2. 抽象类和接口有什么区别？\r#\rEN: An abstract class can have both method bodies and state (fields), while an interface (pre‑Java 8) only declares methods. A class can extend one abstract class but implement multiple interfaces. (\rReddit) CN： 抽象类既可包含具体方法也可存储状态，接口（Java 8 前）只能声明方法；类只能继承一个抽象类，却能实现多个接口。(\rReddit)\n3. Java 的垃圾回收是如何工作的？\r#\rEN: The JVM’s GC reclaims unreachable objects automatically, typically using generational collectors (young/gen0, old/gen1) to minimize pause times. (\rGeeksforGeeks) CN： JVM 垃圾回收器自动回收不可达对象，常用分代收集算法（新生代/老年代）以降低停顿。(\rGeeksforGeeks)\n4. 什么是装箱和拆箱？\r#\rEN: Autoboxing converts primitives (e.g., int) into wrappers (Integer) automatically; unboxing does the reverse. (\rReddit) CN： 自动装箱是将基本类型（如 int）隐式转换为其包装类（Integer），拆箱则相反。(\rReddit)\n5. HashMap 的底层结构是什么？\r#\rEN: A HashMap uses an array of buckets where each bucket is a linked list or red‑black tree (after threshold), with keys’ hashcodes determining bucket index. (\rGeeksforGeeks) CN： HashMap 底层用数组＋链表（或超阈值后转红黑树）存储键值对，哈希值决定元素落在哪个桶。(\rGeeksforGeeks)\n6. 如何实现线程安全的单例？\r#\rEN: Use a static inner helper class or enum singleton; both are thread‑safe and lazily initialized without explicit synchronization. (\rinterviewbit.com) CN： 可使用静态内部类或枚举单例，它们在类加载时线程安全且支持延迟初始化，无需手动锁。(\rinterviewbit.com)\n7. 描述 Java 8 中的 Stream 流操作。\r#\rEN: Streams allow declarative, lazy operations (map, filter, reduce) on collections, enabling parallelizable data pipelines. (\rinterviewbit.com) CN： Stream 提供声明式、惰性加载的链式操作（如 map、filter、reduce），并可简单地并行执行。(\rinterviewbit.com)\n8. synchronized 和 ReentrantLock 有何不同？\r#\rEN: synchronized is built‑in, blocks on acquisition; ReentrantLock is more flexible (tryLock, timed lock) and supports condition variables. (\rinterviewbit.com) CN： synchronized 为 JVM 内置锁且阻塞性获取；ReentrantLock 功能更强（支持 tryLock、可中断锁、条件变量）。(\rinterviewbit.com)\n9. 什么是 Java 中的异常分为 Checked 和 Unchecked？\r#\rEN: Checked exceptions (e.g., IOException) must be declared or caught; unchecked exceptions (subclasses of RuntimeException) need not be. (\rReddit) CN： Checked 异常（如 IOException）需在签名中声明或捕获，Unchecked 异常（RuntimeException 子类）则无需。(\rReddit)\n10. 描述 JIT 编译器的作用。\r#\rEN: The JIT (Just‑In‑Time) compiler in the JVM converts hot bytecode paths into native code at runtime to boost performance. (\rGeeksforGeeks) CN： JVM 中的 JIT 编译器在运行时将热点字节码编译成本地机器码，以提升执行效率。(\rGeeksforGeeks)\n二、微服务相关问题\r#\r1. 什么是微服务架构？\r#\rEN: Microservices split applications into small, independent services, each handling a single business capability and communicating over lightweight protocols. (\rMedium) CN： 微服务将应用拆分为多个小型独立服务，每个聚焦单一业务能力，通过轻量协议互相通信。(\rMedium)\n2. 单体架构与微服务有何区别？\r#\rEN: Monolith bundles all functions into one deployable unit; microservices decouple features into separately deployable services for independent scaling. (\rTuring) CN： 单体架构将所有功能打包部署，微服务则将其拆分为独立服务，可分别扩展与部署。(\rTuring)\n3. 服务发现怎么做？\r#\rEN: Use a registry (e.g., Eureka, Consul) where services register themselves; clients or gateway query registry to locate service instances. (\rMedium) CN： 使用服务注册中心（如 Eureka、Consul），服务启动时注册，客户端或网关通过它查找可用实例。(\rMedium)\n4. 什么是 API 网关？\r#\rEN: An API Gateway routes external requests to appropriate microservices, handles auth, rate‑limiting, and can aggregate responses. (\rMedium) CN： API 网关负责将外部请求路由到对应服务，同时做鉴权、限流，并可进行结果聚合。(\rMedium)\n5. 如何保证微服务安全？\r#\rEN: Use OAuth2/JWT for auth, HTTPS for transport security, and enforce scopes in the gateway or each service. (\rMedium) CN： 采用 OAuth2/JWT 做认证授权，全链路使用 HTTPS，并在网关或服务内校验权限。(\rMedium)\n6. 微服务间如何保证数据一致性？\r#\rEN: Prefer eventual consistency via event‑driven patterns (Kafka events) or SAGA orchestration with compensating transactions. (\rMedium) CN： 建议采用最终一致性方案，如事件驱动（Kafka）或 SAGA 模式的补偿事务。(\rMedium)\n7. 什么是熔断器（Circuit Breaker）？\r#\rEN: A circuit breaker (e.g., via Resilience4j) prevents cascading failures by short‑circuited calls to unhealthy services and provides fallback. (\rSimplilearn.com) CN： 熔断器（如 Resilience4j）通过拦截对不可用服务的调用并快速失败或降级，防止故障蔓延。(\rSimplilearn.com)\n8. 如何监控微服务？\r#\rEN: Use Prometheus + Grafana for metrics, ELK/EFK for centralized logs, and distributed tracing (Jaeger/Zipkin) for request flows. (\rblog.bytebytego.com) CN： 使用 Prometheus+Grafana 监控指标，ELK/EFK 集中日志，Jaeger/Zipkin 做分布式链路跟踪。(\rblog.bytebytego.com)\n9. 如何处理微服务的配置管理？\r#\rEN: Store configs in Spring Cloud Config or Vault; services pull or watch for updates, enabling dynamic reconfiguration. (\rGeeksforGeeks) CN： 配置存放于 Spring Cloud Config 或 Vault，服务启动或热刷新时拉取更新，实现动态配置。(\rGeeksforGeeks)\n10. 容器化和编排对微服务的好处？\r#\rEN: Docker containers package services with dependencies; Kubernetes automates scaling, self‑healing, rolling updates, and service discovery. (\r维基百科) CN： Docker 将服务及其依赖打包；Kubernetes 自动扩缩容、自愈、滚动升级，并提供内置服务发现。(\r维基百科)\n以上问题及中英文回答，既涵盖 Java 核心知识、并发、容器化，也兼顾 微服务实战 要点，结合您在 HSBC 微服务项目 和 动机信中提到的技术偏好，可助您高效准备 Doctolib 面试。祝面试顺利！\n"},{"id":14,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":"\rButtons\r#\rButtons are styled links that can lead to local page or external link.\nExample\r#\r{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home\rContribute\r"},{"id":15,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":"\rColumns\r#\rColumns help organize shorter pieces of content horizontally for readability.\nExample\r#\r{{% columns [ratio=\u0026#34;1:1\u0026#34;] [class=\u0026#34;...\u0026#34;] %}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{% /columns %}} Left Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nMid Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nRight Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nSettings size ratio for columns\r#\r{{% columns ratio=\u0026#34;1:2\u0026#34; %}} \u0026lt;!-- begin columns block --\u0026gt; ## x1 Column Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; ## x2 Column Lorem markdownum insigne... {{% /columns %}} x1 Column\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nx2 Column\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":16,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":"\rDetails\r#\rDetails shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample\r#\r{{% details \u0026#34;Title\u0026#34; [open] %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} {{% details title=\u0026#34;Title\u0026#34; open=true %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} Title\rMarkdown content\r#\rLorem markdownum insigne\u0026hellip;\n"},{"id":17,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":"\rHints\r#\rHint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{% hint [info|warning|danger] %}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{% /hint %}} Example\r#\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\n"},{"id":18,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":"\rMermaid Chart\r#\rMermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid initialization config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample\r#\r{{\u0026lt; mermaid [class=\u0026#34;...\u0026#34;] \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2\rState1: The state with a note\rnote right of State1\rImportant information! You can write\rnotes.\rend note\rState1 --\u003e State2\rnote left of State2 : This is the note to the left.\r"},{"id":19,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":"\rSection\r#\rSection renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample\r#\r{{\u0026lt; section [summary] \u0026gt;}} First Page\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nSecond Page\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n"},{"id":20,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":"\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":21,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":"\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":22,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":"\rTabs\r#\rTabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;id\u0026#34; \u0026gt;}} {{% tab \u0026#34;MacOS\u0026#34; %}} # MacOS Content {{% /tab %}} {{% tab \u0026#34;Linux\u0026#34; %}} # Linux Content {{% /tab %}} {{% tab \u0026#34;Windows\u0026#34; %}} # Windows Content {{% /tab %}} {{\u0026lt; /tabs \u0026gt;}} Example\r#\rMacOS\rMacOS\r#\rThis is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux\rLinux\r#\rThis is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows\rWindows\r#\rThis is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":23,"href":"/docs/study/doctolib-system-design/","title":"Doctolib系统设计","section":"学习资料","content":"以下给出一个面向生产环境、可扩展且高可用的微服务架构设计方案，重点关注“患者搜索与预约”这一日历（Calendar）功能的重构。方案会针对各子系统划分、技术选型、可扩展性、容错、数据一致性、多区域部署等方面进行说明，并针对每个组件选用的语言或技术做出理由说明。\n1. 非功能需求与业务规模\r#\r规模要求\n患者数量：50M 从业者数量：500K 并发搜索：700 次/秒 并发预约（booking）：90 次/秒 可扩展性\n支持快速上线新国家/地区 支持水平扩展（水平扩容实例） 高可用、容错、降级\n单点故障需避免 任一组件出故障时，应保证核心功能（如查询缓存、只读搜索）尽可能可用，写操作可做限流或降级提示 数据一致性\n预约（Booking）流程需强一致或可接受的约束下的弱一致（依实践设计），但冲突需被正确检测并妥善处理。 搜索结果可采用近实时（Eventual Consistency）方式更新。 响应时延\n搜索响应：百毫秒级 预约确认：次秒级体验 安全与合规\n涉及医疗数据或个人信息，需符合相关法规（如 GDPR、HIPAA 等，视具体国家要求） 传输加密（TLS），存储加密，细粒度权限控制 可观察性\n全链路追踪、日志、指标监控、告警 自动化运维 / CI/CD\n基于容器化与基础设施即代码（IaC），实现流水线自动化部署、滚动升级、灰度发布 2. 总体架构概览\r#\r采用微服务架构 + API Gateway + 服务网格（可选） + 多区域部署 + 弹性伸缩。核心组件：\nAPI Gateway：统一入口，做认证鉴权、限流、路由。 Auth 服务：处理登录、认证、授权（OAuth2 / JWT）。 User 服务：管理患者与从业者的 Profile 信息。 Search 服务：负责处理按位置、专科、可用时段等条件的搜索请求；依赖搜索索引（Elasticsearch）。 Availability 服务：维护和计算从业者可预约时段（working hours + 例外情况 + 节假日 + 已有预约冲突）。 Booking 服务：处理预约创建、修改、取消事务，确保并发安全与一致性。 Notification 服务：异步发送邮件/SMS/Push 推送（预约确认、提醒、变更通知）。 Analytics / Monitoring 服务（或外部）：收集日志、指标，用于监控与数据分析。 Payment / Billing 服务（如需付费预约，可选）。 配置与管理服务：管理多国家/地区配置（时区、节假日规则、语言、合规设置等）。 异步消息平台（如 Kafka）：用于事件流（Event Bus），实现微服务间的解耦异步通信，如预约事件、索引更新、通知触发等。 缓存层：Redis，用于热点数据、短期缓存、分布式锁等。 数据库：关系型数据库（PostgreSQL/CockroachDB/Vitess+MySQL/Aurora 等）；可根据跨区域需求选择分布式SQL（如 CockroachDB）或各区域独立数据库并做异步复制。 搜索引擎：Elasticsearch 或 OpenSearch，用于地理位置与属性过滤、可用性初筛索引等。 基础设施与部署：容器化（Docker）、Kubernetes（EKS/GKE/AKS 或自托管 K8s）、Terraform/CloudFormation 管理资源，多区域集群部署。 下面分模块详细阐述，并说明选型理由。\n3. API Gateway 与服务通信\r#\rAPI Gateway：推荐使用 Kong、Envoy+Istio、AWS API Gateway 等。\n职责：统一入口，做认证鉴权（和 Auth 服务配合）、流量限流、灰度发布路由、TLS 终端、接口版本管理、监控指标采集。\n技术选型：\nKong / Envoy：成熟、社区活跃、易与服务网格集成； 通过 Envoy 配合 Istio 等服务网格，可实现更细粒度的流量管理、熔断限流、链路追踪注入。 通信协议：\n微服务间内部通信可优先用 gRPC（性能、IDL、强类型契约），也可选 REST/JSON（兼容性好）；若已有生态偏好 Java/Kotlin Spring Boot，可用 gRPC + Protobuf，或 REST+OpenAPI。 外部客户端与 Gateway，一般用 HTTPS/JSON+REST 或 GraphQL（若业务需要聚合多个服务数据）。本场景搜索与预约流程较简单，用 REST 即可。 4. 身份认证与授权\r#\rAuth 服务：\n协议：OAuth2 / OpenID Connect + JWT。 存储：用户凭证信息（如果用用户名密码）、第三方登录（如 SSO）凭证等。 选型理由：业界标准，JWT 可在微服务间传递用户信息（Claims），便于鉴权；若对安全要求高，可采用刷新 token 机制或短期 token 并使用 Refresh Token。 权限控制：RBAC/ACL 机制。预约系统中，大多数操作由患者或从业者自行发起，仅需保证患者只可访问自己预约记录；管理员可访问更多。\n语言/框架：\nJava/Kotlin Spring Security、Go+Oauth2库，或 Node.js+Passport，根据团队熟悉选择。 推荐 Golang：二进制轻量、性能高、并发处理优秀；或 Kotlin(Spring Boot)：生态成熟、开发效率高。 5. 数据存储方案\r#\r5.1 关系型数据库（主数据与事务）\r#\r主要用途：存储患者、从业者、预约记录、可用时段模板、地点/诊所信息、专科分类、审计日志等。\n选型：\nPostgreSQL：强一致、复杂查询能力好、支持地理扩展 PostGIS，可处理位置数据。 CockroachDB 或 Google Spanner（若云上需求）：提供分布式 SQL，本身支持跨多区域部署和强一致事务，便于全球部署，但成本较高； Vitess+MySQL / Amazon Aurora MySQL/PostgreSQL：可水平分片；适合已有 MySQL 生态的团队。 分区/分片策略：\n可按国家/地区分库：每个国家单独数据库实例/集群，避免跨区域写延迟，同时便于合规隔离（例如 GDPR 区域）。 同一国家内部可对患者或从业者做分表（sharding），如按用户ID hash。 CockroachDB 场景下可利用其多区域分布能力，无需复杂分片逻辑；但需评估延迟与成本。 事务处理：\n预约创建/取消需强一致：在单库或同分区中用数据库事务（SELECT FOR UPDATE、乐观锁或悲观锁）确保并发安全；避免跨分区事务。 若某些操作需跨库（如 Billing 在不同服务库），可采用 Saga 模式：分布式事务编排，补偿流程确保最终一致。 5.2 搜索索引（全文与属性检索）\r#\rElasticsearch / OpenSearch：\n用途：地理位置搜索（Geo distance queries）、按专科标签过滤、可用性初步筛选（如下一可用日期/时间区间标记）、全文搜索（诊所描述、评论）。 部署：多节点集群，按国家/区域分集群或索引分片；考虑跨区域读副本以降低延迟。 更新方式：异步事件驱动更新：Booking 服务或 Availability 服务在预约创建/取消后发事件，经消息队列 Worker 更新索引（近实时）。需注意“搜索结果可能有短暂延迟”；对此在 UX 上可提示“可用性可能实时性略有延迟，请实时尝试预约”。 选型理由：支持丰富查询、横向扩展成熟、支持地理距离计算和复杂过滤。 5.3 缓存层\r#\rRedis / Memcached：\n用途：热点搜索结果缓存（如常见城市+专科检索）、会话信息、配额限流计数、分布式锁。 选型：Redis 更灵活，支持数据结构和分布式锁（Redlock），建议选 Redis Cluster 部署。 注意：缓存失效策略要设计合理；对搜索缓存可用 TTL 结合缓存击穿预防（如使用热点预热或互斥锁）。 5.4 消息与事件总线\r#\rKafka / Pulsar / RabbitMQ：\n用途：实现异步、解耦：\n预约创建/取消事件发出后，异步触发索引更新、通知发送、统计更新等； 日志、指标事件汇聚。 选型理由：Kafka 在高吞吐、分区扩展、消息持久化方面成熟；Pulsar 也可；RabbitMQ 适合较少消息量或简单场景。此处高并发场景应选 Kafka。\n部署：Kafka 集群，多分区分区键可按国家或服务类型区分，便于消费侧并行消费。\n6. 搜索流程设计\r#\r用户请求：前端通过 API Gateway 发搜索请求，带入位置（经纬度或城市ID）、专科（标签）、可用日期范围（如“本周有空”）、其他过滤（语言、性别偏好等）。\nSearch 服务\n逻辑：先校验请求参数；构造 Elasticsearch 查询：\nGeo Distance filter：基于用户位置和诊所/从业者所在诊所位置计算距离并排序（可分页）。\n专科 filter：term filter on specialty field。\n可用性 filter：如果索引中提前标注了“下一可用日期”字段，可做范围过滤（例如 next_available_date \u0026lt;= 本周末）；若需要更实时的可用时段判断，可：\n在搜索阶段只做粗筛（例如只筛选标记有空闲的从业者或诊所），真正的可用时段详情由前端在候选列表中点击后，再调用 Availability 服务实时获取具体可用时段。 缓存：对高频查询（如大城市常用专科）可在 Redis 缓存搜索结果列表ID和简单摘要，TTL 10-30s，减轻 ES 压力。\n分页与排序：支持分页（深分页需谨慎，可用 search_after 或基于游标分页），排序可按距离、评分或综合得分。\n响应：返回候选列表（带从业者ID、诊所信息基础、评分、下一可用日期等），由前端展示；若用户进一步要求“查看具体可用时段”，再调用 Availability 服务。\n技术语言：\nSearch 服务推荐使用 Go 或 Kotlin/Java：\nGo：高并发、轻量二进制、启动快、易部署；Elasticsearch 客户端成熟，适合高 QPS。 Java/Kotlin：生态成熟，原生 ES 客户端支持好；若团队已有 Spring Boot 经验，可快速集成监控、配置中心等。 Node.js 也可，但在高并发网络 IO 场景下 Go 性能更优且资源占用更低。\n7. 可用时段（Availability）设计\r#\r7.1 概念模型\r#\rWorking Hours Template：从业者在各诊所或远程的常规可用时间段（例如周一9:00-12:00，14:00-18:00）。 例外情况（Exceptions）：请假、临时关闭、假期、临时加班、手动阻塞时间段等。 已预约时段（Existing Bookings）：已被其他患者预订的时段。 缓冲/准备时间：某些服务需要在预约前后留出准备或清洁时间。 时区：从业者与患者可能跨时区，对本地时间转换需谨慎，统一以 UTC 存储。 7.2 存储与计算\r#\r存储方案：\nWorking Hours Template \u0026amp; Exceptions 存在关系型数据库表：\npractitioner_availability_template(practitioner_id, weekday, start_time, end_time, duration_slot, buffer_before, buffer_after) availability_exceptions(practitioner_id, date, start_time, end_time, type) 已预约记录存在 appointments 表，并在 Booking 时写入。\n计算实时可用时段：\n方法 1：实时计算\nAPI 调用 Availability 服务时，根据 template + exceptions + existing bookings，从目标日期范围内生成所有候选时隙，并排除冲突与缓冲区，返回可选时段列表。适合针对单个从业者或少量并发请求。 优点：实时准确，无需预存；缺点：若请求量大或查询范围大（比如批量查询多位从业者多个时间范围），计算开销可能高，需做好并发优化。 方法 2：预计算 / 缓存\n系统定期（如每天凌晨或增量事件驱动）为每个从业者生成未来N天（如7天或14天）的可用时段列表，存于一个快速查询的存储（如 Redis 或专门的 NoSQL 表）。Booking 或 Search 阶段可直接查询缓存数据。 增量更新：当有预约创建/取消或 Exceptions 变更时，通过事件流触发更新对应从业者在缓存中的可用时段。 优点：查询快速，适合搜索大批从业者时初筛；缺点：需要设计更新机制，保证近实时。 推荐：结合两者：对于 Search 阶段，仅需知道“是否有可用”，可在预计算索引（例如 Elastic 索引中的 next_available_date 字段、或 Redis 中小体量标记）中标注；若用户选定某位从业者/诊所并选日期，则再调用实时计算以获取具体时隙，或从预计算缓存读取（若足够实时）。\n语言/框架：\nAvailability 服务可用 Go 实现，具备高并发处理能力；也可用 Kotlin/Java，若与业务团队偏好一致。核心计算逻辑需高效实现（如时间区间运算、冲突检测），可复用已有库或自行实现。 并发处理：\n对单个从业者的 Availability 计算请求，相对独立；可水平扩展 Availability 服务实例。\n预计算任务可由专门 Worker 集群（Kafka Consumer）处理，语言可选 Python 或 Go：\nPython：开发效率高，可用 Pandas 等库做批量计算；但需注意性能和并发； Go：若要求高并发、低延迟，也可用 Go Worker。 建议实时在线计算由 Go 服务完成；批量预计算 Worker 可根据团队技术栈在 Python/Go 之间选择。\n8. 预约（Booking）设计\r#\r8.1 业务流程\r#\r患者在某时段点击“预约”\nBooking 服务校验请求：\n患者身份有效 预约时段在可用范围内（再次检查，防止脏读缓存导致冲突） 若需要付费，触发 Payment 服务（可异步或同步，视业务）。 创建预约记录：写入关系型数据库；同时可能要更新缓存的可用时段、通知事件、索引更新。\n发送确认给患者与从业者（同步等待或异步后续）。\n支持后续修改/取消：需再次做冲突检查与数据库更新，并触发更新事件。\n8.2 并发与一致性\r#\r并发冲突场景：多个患者同时请求同一从业者同一时段。\n处理策略：\n悲观锁：在数据库层对该从业者对应的当天时段加锁（如 SELECT \u0026hellip; FOR UPDATE on availability-related row）；缺点是在高并发下热点锁竞争严重； 乐观锁 / CAS：在预约表或 availability cache 中用版本号或标志位做乐观并发控制；可能需要重试逻辑； 分布式锁：利用 Redis Redlock 或 Zookeeper 针对单个从业者进行锁，控制同一时段只有一个请求落地；需注意锁超时与可靠性； 分区设计：将同一从业者或诊所的预约请求都路由到同一数据库分区或实例，避免跨分区事务；结合一致性哈希或路由规则。 推荐做法：\n将预约数据按从业者维度分区（同一从业者的预约写入同一分区/库），在该分区内用数据库事务（SELECT FOR UPDATE）或乐观锁确保同一时段只会被一个写成功。对于高并发热门医生，可预估并做限流。 Redis 分布式锁配合数据库事务：先在 Redis 上对 key = practitioner_id:date:timeslot 加锁，若获得锁则进入数据库事务检查并写入；写完后释放锁。超时控制要比数据库事务超时更长，避免死锁或提前释放。 幂等性：前端在请求头带幂等ID，防止重复提交。 Saga 模式：若有跨服务依赖（如创建预约后需调用 Billing、Notification、Analytics），在主事务提交后发布“预约已创建”事件；各消费者按需处理（如扣款、发送邮件）。若 Billing 失败，可通过补偿事务或人工干预处理。\n技术语言：Booking 服务推荐使用 Go 或 Kotlin/Java。\nGo：轻量高并发，易部署； Kotlin/Java：事务管理与生态成熟；Spring Transaction 支持多种数据库。 9. 异步任务与事件驱动\r#\r消息总线：Kafka\n事件类型：\nAppointmentCreated、AppointmentCanceled、AppointmentRescheduled AvailabilityChanged（从业者修改模板或例外） UserUpdated、PractitionerUpdated（触发索引更新） NotificationEvent（由 Booking 或其他服务生产，再由 Notification 服务消费） AnalyticsEvent（如搜索行为、预约完成、取消率等） 消费者 Worker：\n索引更新 Worker：消费事件后更新 Elasticsearch 索引（如更新 next_available_date、评分等），保持搜索结果近实时。 Notification Worker：消费通知事件，通过邮件/SMS/Push 服务发送；可用 Node.js、Python 实现，方便集成第三方 SDK。 Analytics Worker：消费行为事件，存入时序/分析系统（如 ClickHouse、BigQuery、InfluxDB 等），用于报表和机器学习。 Cache 更新 Worker：当预约或可用性发生变更，更新 Redis 缓存中受影响的数据。 选型理由：Kafka 高吞吐、分区机制便于并行、多消费者组隔离。\n10. 缓存与限流\r#\r热点缓存：Redis\n搜索缓存：基于查询参数 hash 做短期缓存； 可用性缓存：预计算后存储未来若干天的可用时段列表，Key = practitioner_id; TTL 或手动更新； Session/Token 黑名单：若需要登出或撤销 token； 分布式锁：Redis Redlock，用于预约并发控制（如前述）。\n限流、熔断：\n在 API Gateway 层配置请求限流（防止洪水攻击或爬虫）； 服务内部可用令牌桶或漏桶算法做细粒度限流（例如对单个从业者的预约请求做速率限制）。 降级策略：\n当后端某服务故障时，对低优先级功能做降级（如搜索缓存返回旧结果，并在 UI 上提示“结果可能过时，请稍后重试”）。 11. 多区域与国际化\r#\r多国家/地区部署：\n独立 Region 部署：针对不同国家/地区在对应区域（如 AWS 区域）部署独立集群，数据库本地化，减少跨洋延迟；合规隔离（数据驻留）。 跨区域同步（可选）：若需要全球搜索（跨国搜索），需跨区域索引复制；或集中搜索集群，但会有延迟与合规风险，一般不推荐。推荐按国家隔离，未来如需全球入口可做独立服务聚合。 配置中心：通过配置服务管理各国节假日规则、时区、语言文案、价格策略（若付费）、法规合规配置等；服务启动或运行时从配置中心获取对应国家配置。 部署与 IaC：Terraform + Kubernetes + Helm Charts 实现可复制的集群模板，方便新国家快速上线；CI/CD 管道接入自动创建集群、部署服务。 时区处理：\n存储统一用 UTC，前端显示或用户输入时做时区转换；Availability 服务在计算时考虑从业者本地时区和患者本地时区。 多语言 / 文案：\n前端与后端支持国际化（i18n）；后端错误/消息 code 化，前端根据 locale 渲染文本。 货币与支付：若涉及付费预约，需支持各地货币、支付通道接入（Stripe、PayPal、本地支付网关），并做地域隔离。\n12. 安全与合规\r#\r传输加密：全链路 TLS。 存储加密：数据库加密、S3 等存储加密。 访问控制：最小权限原则，微服务间调用用 mTLS 或 JWT，严格控制 IAM 权限。 敏感数据隔离：如医疗隐私、身份证号等，需做专门加密或token化存储，并限制访问日志记录级别。 审计日志：记录关键操作（预约创建/取消/修改、权限变更等）到不可篡改存储，用于安全审计。 DDoS 防护、WAF：在边缘层面或云服务商提供防护。 合规：根据各国法规（GDPR、HIPAA 等），部署前做法律合规评估。 13. 监控与可观察性\r#\rMetrics：Prometheus + Grafana。\n监控 API QPS、响应时延、错误率；各微服务资源（CPU/Mem/Disk）；Kafka 消费滞后；数据库连接池、锁等待、磁盘空间等。 日志：结构化日志（JSON），集中收集（ELK/EFK）。\nTracing：OpenTelemetry + Jaeger/Zipkin，通过 API Gateway 注入 trace id，链路可视化，定位跨服务延迟。\n告警：设置阈值告警（例如搜索延迟超过某值、预约失败率异常上升、Kafka 滞后过高、数据库慢查询激增等），并集成 PagerDuty/Slack 等。\n健康检查：Kubernetes readiness/liveness probe；服务自带健康检查接口；自动重启故障实例。\nChaos Testing：定期或在预生产环境做故障注入测试（断网、延迟、节点宕机），验证系统弹性和恢复能力。\n14. CI/CD 与自动化\r#\r版本控制：Git + 分支策略（GitFlow/GitHub Flow）。 容器化：Docker，镜像打包；多阶段构建以减小镜像体积。 流水线：Jenkins/GitHub Actions/GitLab CI 等；包括代码检查、单元测试、集成测试、构建镜像、扫描安全漏洞、部署到测试环境、自动化测试（契约测试、端到端）、部署到生产。 基础设施即代码：Terraform/CloudFormation 管理云资源；Helm Charts 或 Kustomize 管理 Kubernetes 部署清单；结合 ArgoCD/Flux 实现 GitOps。 蓝绿部署 / 金丝雀发布：逐步流量切换，降低风险。 回滚机制：自动化回滚脚本，若健康检查失败或监控告警，可快速回滚到稳定版本。 15. 测试策略\r#\r单元测试：各服务内核心逻辑（如 Availability 计算、Booking 并发冲突检测）。\n集成测试：模拟微服务间调用，可在测试环境中用 WireMock 或测试容器。\n契约测试：确保服务间 API 变更不会破坏消费者。\n性能测试：\nLoad Testing：用工具（Locust、JMeter）模拟 700 Search QPS、90 Booking QPS；监控各组件瓶颈并进行容量规划。 压力测试：超高并发、故障场景；测试系统降级能力。 安全测试：扫描依赖漏洞（Snyk/OWASP）、渗透测试。\n可用性测试：Chaos Monkey 风格故障注入，验证自动恢复机制。\n16. 技术选型小结与理由\r#\r微服务架构 + Kubernetes：避免单体，便于独立扩展、部署和团队并行开发；K8s 提供自愈、滚动升级、水平伸缩能力。\n语言\nGo：高并发、二进制部署简单、性能优越，适用于 Search、Availability、Booking 等核心高 QPS 服务。 Kotlin/Java：若已有团队熟悉 Spring 生态，可快速开发，生态成熟；但相比 Go 启动更慢、资源消耗略高；适合需要复杂事务管理或已有大量 Java 库场景。 Python/Node.js：用于异步 Worker（Notification、Analytics），因集成第三方 SDK、开发效率高；可根据性能需求在高吞吐场景下也可选 Go； 数据库\nPostgreSQL：成熟、稳定，支持复杂事务与地理位置扩展（PostGIS）；按国家分库部署。 CockroachDB：若多区域一致性要求高、希望统一数据库层管理，可考虑，但需评估运维成本和延迟。 搜索：Elasticsearch/OpenSearch，用于地理过滤、属性过滤等。\n消息队列：Kafka，用于高吞吐异步事件。\n缓存/锁：Redis Cluster，用于热点缓存、分布式锁、限流。\n服务网格：Istio/Linkerd（可选），增强流量管理、TLS、观测。\n监控/日志/Tracing：Prometheus+Grafana、ELK/EFK、OpenTelemetry+Jaeger。\nCI/CD \u0026amp; IaC：Terraform + Kubernetes + GitOps。\n容器运行环境：Docker + Kubernetes（云托管或自托管），结合自动扩缩容（HPA/VPA）。\n外部托管服务：邮件/SMS 推送用第三方服务（SendGrid/Twilio 等）；支付集成 Stripe/PayPal/本地支付；监控告警可集成 PagerDuty。\n17. 多国家上线流程示例\r#\r准备阶段\n在配置中心中添加新国家配置：时区、节假日规则、默认语言、合规要求、支付方式等。 Terraform 脚本：新增对应区域的 VPC、Kubernetes 集群节点组等资源定义。 部署基础设施\n使用 Terraform 自动创建或扩容集群； 在 Kubernetes 中部署核心微服务（Deployment、StatefulSet、ConfigMap、Secret 等）。 初始化数据库：新国家数据库实例或分区。 同步数据与测试\n根据需要同步基础字典数据（如专科类别、诊所注册表格字段等）； 在测试环境进行端到端测试；预热缓存；性能基准测试； 灰度发布：将少量流量导向新集群，观察监控指标。 正式上线\nDNS / Gateway 配置：新国家域名或路径路由至对应集群； 开启监控告警；与当地支持团队、运维协作； 逐步扩大流量至全量； 迭代优化\n根据使用情况优化资源配置；调整预计算窗口；增强缓存； 收集当地用户反馈，持续改进。 18. 容错与降级设计\r#\r服务实例冗余：各微服务在多个节点多副本部署；K8s 自动重启。\n跨可用区部署：集群跨多个可用区，防止单 AZ 故障。\nCircuit Breaker / Retry：服务间调用出现故障时，快速失败并熔断，保护下游；重试机制带退避策略。\n降级方案：\n搜索服务失效时，可返回缓存结果或简化返回（如仅返回诊所列表、提示实时不可用）； Availability 服务故障时，可显示近期缓存时段并提示“请刷新以获取实时可用”； Booking 服务若短暂不可用，告知用户稍后重试或排队；可结合队列缓冲（但需谨慎，防止排队过久冲突）。 数据备份与恢复：\n定期备份数据库快照；Elasticsearch 快照；Kafka 数据保留； 制定灾难恢复（DR）预案，保证在区域故障时可快速恢复。 19. 监控扩容规划\r#\r容量规划：\n根据 Load Testing 数据，预估搜索节点、ES 集群节点、数据库实例规格与副本数； 设定 HPA（K8s Horizontal Pod Autoscaler）策略：根据 CPU、内存或自定义指标（如请求延迟、队列长度）自动扩容。 弹性伸缩：\nKubernetes Pod 伸缩； 数据库读副本扩容；Elasticsearch 节点扩容；Kafka partition 扩容（需平衡 rebalancing 时影响）。 成本优化：\n非高峰期可缩小实例；利用 Spot 实例处理异步任务； 评估 Managed Service（RDS/ElastiCache/ES Service）与自托管成本对比。 20. 业务监测与优化\r#\r关键指标 (KPI)\n搜索响应时延、成功率； 预约成功率、冲突重试率； 预约取消率、改期率； 系统可用率、错误率、系统负载； 用户留存、使用频次（结合 Analytics）。 A/B 测试\n对搜索排序算法（如距离优先 vs 评分优先）、时段推荐逻辑等进行实验，评估用户转化率。 机器学习 / 智能推荐（可选）\n基于用户历史、地理位置、评价等，为用户推荐合适从业者； 但此功能与基础系统解耦，作为后续优化模块，通过独立服务调用搜索结果。 21. 总结\r#\r微服务架构配合Kubernetes提供弹性、高可用和易部署； Go 或 Kotlin/Java 作为核心服务语言，满足高并发和生态需求； PostgreSQL/CockroachDB 作为关系型主库，按国家或分区部署，保证事务一致性； Elasticsearch 作为搜索引擎，支持地理和属性过滤，近实时索引更新； Redis 作为缓存与分布式锁，提升读取性能与并发控制； Kafka 作为事件总线，解耦异步任务（索引更新、通知、分析）； CI/CD + IaC 实现自动化、高效上线与可复制多国家部署； 监控/Tracing/日志确保可观察性与故障定位； 安全与合规贯穿设计，保护用户隐私并满足法规要求； 可扩展性设计：按国家分库、分区，水平扩容服务实例，自动伸缩； 一致性策略：预约采用单分区事务或分布式锁+Saga，搜索结果采用近实时弱一致。 该方案避免单体架构，将功能拆分到独立微服务，便于团队并行迭代与扩展；同时通过异步事件驱动保持各组件解耦、近实时同步。多区域、多国家上线通过配置中心和 IaC 自动化支撑，降低运维复杂度。整体技术栈选型主流成熟、社区活跃，且各组件之间契约清晰、易于维护。通过严格的监控、测试和自动化部署，保证生产环境中系统的稳定、可用和可观测。\n"},{"id":24,"href":"/docs/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":"\rKaTeX\r#\rKaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample\r#\r{{\u0026lt; katex display=true \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\rDisplay Mode Example\r#\rHere is some inline example: \\(\\pi(x)\\)\r, rendered in the same line. And below is display example, having display: block \\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\rText continues here.\n"},{"id":25,"href":"/docs/study/cache-consistency/","title":"缓存一致性","section":"学习资料","content":"\r延迟双删 vs Kafka\r#\r对比维度 延迟双删 Kafka 缓存失效通知 实现难度 简单，代码内实现 需要接入 Kafka + 消费机制 缓存一致性控制力 不稳定（延迟期间仍可能被覆盖） 强一致（通知所有消费者实时失效） 适应多服务 / 多副本 差，需每个服务都实现 强，多服务可统一订阅通知 异步解耦能力 弱，紧耦合在业务逻辑中 强，数据库变更 → 异步通知 故障可追溯性 差，删失败难定位 强，Kafka 留存消息可回溯 网络异常容错性 差，失败后不易重试 好，可消费失败后重试 "},{"id":26,"href":"/docs/example/introduction/","title":"介绍","section":"Example Site","content":"\r中文索引页\r#\rAstris ipse furtiva\r#\rEst in vagis et Pittheus tu arge accipiter regia iram vocatur nurus. Omnes ut olivae sensit arma sorori deducit, inesset crudus, ego vetuere aliis, modo arsit? Utinam rapta fiducia valuere litora adicit cursu, ad facies\nSuis quot vota\r#\rEa furtique risere fratres edidit terrae magis. Colla tam mihi tenebat: miseram excita suadent es pecudes iam. Concilio quam velatus posset ait quod nunc! Fragosis suae dextra geruntur functus vulgata.\nTempora nisi nunc\r#\rLorem markdownum emicat gestu. Cannis sol pressit ducta. Est Idaei, tremens ausim se tutaeque, illi ulnis hausit, sed, lumina cutem. Quae avis sequens!\nvar panel = ram_design;\rif (backup + system) {\rfile.readPoint = network_native;\rsidebar_engine_device(cell_tftp_raster,\rdual_login_paper.adf_vci.application_reader_design(\rgraphicsNvramCdma, lpi_footer_snmp, integer_model));\r}\rpublic_keyboard_docking += error.controller_gibibyte_plug.ip(4,\rasciiPetaflops, software(supercomputer_compatible_status + 4));\rdynamic_disk.indexModeLaptop = bufferTftpReality;\rvar export_vlog_sequence = trinitron_flowchart + supercomputer_cluster_rj(\r-1, toolbar_powerpoint_query, -2 / multiprocessing_impression);\rLocis suis novi cum suoque decidit eadem\r#\rIdmoniae ripis, at aves, ali missa adest, ut et autem, et ab? Venit spes versus finis sermonibus patefecit murum nec est sine oculis. Ille inmota macies domoque caelestia cadit tantummodo scelus procul, corde!\nDolentem capi parte rostro alvum habentem pudor Fulgentia sanguine paret E punior consurgit lentus Vox hasta eras micantes Facibus pharetrae indetonsusque indulsit sic incurrite foliis\r#\rNefandam et prisci palmas! Blandita cutis flectitur montis macies, te nati Latiis; turbaque inferias. Virginis tibi peracta avidusque facies caper nec, e at ademptae, mira.\ndirect *= font(inputScareware(sliHome), crossplatform.byte(\rppl_encryption.excel_e_rte(integratedModelModifier), timeVirtual,\rfloating_speakers.media_printer(us, yahoo, primaryPhp)));\rfriendly_metal_flatbed(cd, isoPrimaryStorage(reader), dmaMirrored);\rif (parse_flash_cron.metalGif(1, adServiceDevice, utility)) {\radf -= operation_cdma_samba;\rimapGif.switch += torrent;\r} else {\rpmu.disk_captcha = digital_ppp_pci + recursionTransistor(5, dram);\rajax_service += grayscalePythonLock;\rgoogle_scroll_capacity = ftp + engine_dslam_sidebar / tape - 1;\r}\rdrive_rw = zipTftp;\rvar suffix = software_router_extension.dimm_ddr(-5,\rkernel_digital_minisite);\rVocavit toto; alas mitis maestus in liquidarum ab legi finitimosque dominam tibi subitus; Orionis vertitur nota. Currere alti etiam seroque cernitis innumeris miraturus amplectique collo sustinet quemque! Litora ante turba?\n"},{"id":27,"href":"/docs/study/license-comparison/","title":"主流许可证对比","section":"学习资料","content":"\r开源许可证对比表\r#\r许可证名称 类型 专利授权 Copyleft 强度 商业兼容性 与 GPL 兼容性 适用场景 MIT 宽松 ❌ 无 ❌ 无 ✅ 高 ✅ 是 小型项目、库 Apache 2.0 宽松 ✅ 有 ❌ 无 ✅ 高 ✅ 是 企业级项目、涉及专利 GPL v3.0 强 Copyleft ✅ 有 ✅ 强 ⚠️ 限制 ✅ 是 开源项目、需强制开源 GPL v2.0 强 Copyleft ❌ 无 ✅ 强 ⚠️ 限制 ❌ 否 传统开源项目 AGPL v3.0 强 Copyleft ✅ 有 ✅ 最强 ⚠️ 限制 ✅ 是 SaaS、网络服务 LGPL v2.1 弱 Copyleft ❌ 无 ⚠️ 弱 ✅ 高 ✅ 是 库、插件 BSD 2-Clause 宽松 ❌ 无 ❌ 无 ✅ 高 ✅ 是 系统级组件、商业集成 BSD 3-Clause 宽松 ❌ 无 ❌ 无 ✅ 高 ✅ 是 商业软件、需署名保护 Boost 1.0 宽松 ❌ 无 ❌ 无 ✅ 高 ✅ 是 C++ 库、工具链 CC0 1.0 公共领域 ❌ 无 ❌ 无 ✅ 高 ✅ 是 数据集、内容共享 EPL 2.0 弱 Copyleft ✅ 有 ⚠️ 弱 ✅ 高 ✅ 是 企业软件、模块化项目 MPL 2.0 弱 Copyleft ⚠️ 部分 ⚠️ 弱 ✅ 高 ✅ 是 浏览器、混合授权项目 "}]