<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全 on 君宝的笔记</title>
    <link>http://localhost:1313/docs/study/security/</link>
    <description>Recent content in 安全 on 君宝的笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="http://localhost:1313/docs/study/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>重放攻击</title>
      <link>http://localhost:1313/docs/study/security/replay-attack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/security/replay-attack/</guid>
      <description>&lt;p&gt;重放攻击（&lt;strong&gt;Replay Attack&lt;/strong&gt;）是一种网络攻击手段，攻击者&lt;strong&gt;拦截并保存合法请求的数据包&lt;/strong&gt;，然后&lt;strong&gt;在稍后“重发”这些数据包&lt;/strong&gt;到服务器，试图欺骗系统重复执行某些操作（如转账、登录等）。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-一句话理解&#34;&gt;&#xD;&#xA;  🧨 一句话理解：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%80%e5%8f%a5%e8%af%9d%e7%90%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;攻击者不是伪造请求，而是“复读”别人发的合法请求来骗系统重复操作！&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-举个例子&#34;&gt;&#xD;&#xA;  📦 举个例子：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%be%e4%b8%aa%e4%be%8b%e5%ad%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;你在网银发送了如下转账请求（加密传输）：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /transfer&#xD;&#xA;{&#xD;&#xA;  &amp;#34;to&amp;#34;: &amp;#34;Alice&amp;#34;,&#xD;&#xA;  &amp;#34;amount&amp;#34;: 100&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;攻击者通过某种方式（如网络监听）捕获了这条请求，然后在你不知情的情况下&lt;strong&gt;原样重放&lt;/strong&gt;这条请求。&lt;/p&gt;&#xA;&lt;p&gt;结果系统再次转账了 100 元到 Alice，&lt;strong&gt;你损失了 200 元&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-为什么这条旧的请求还会被服务器接受&#34;&gt;&#xD;&#xA;  🧠 为什么这条“旧的请求”还会被服务器接受？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e4%b8%ba%e4%bb%80%e4%b9%88%e8%bf%99%e6%9d%a1%e6%97%a7%e7%9a%84%e8%af%b7%e6%b1%82%e8%bf%98%e4%bc%9a%e8%a2%ab%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%8e%a5%e5%8f%97&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;因为很多系统：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;没有识别请求是否重复&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;没对请求加时间戳 / 唯一标识&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;加密是对内容加密，不代表防止重发&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-重放攻击常见于哪些协议场景&#34;&gt;&#xD;&#xA;  🔐 重放攻击常见于哪些协议场景？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e9%87%8d%e6%94%be%e6%94%bb%e5%87%bb%e5%b8%b8%e8%a7%81%e4%ba%8e%e5%93%aa%e4%ba%9b%e5%8d%8f%e8%ae%ae%e5%9c%ba%e6%99%af&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;场景&lt;/th&gt;&#xA;          &lt;th&gt;原因&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;HTTPS（0-RTT 模式）&lt;/td&gt;&#xA;          &lt;td&gt;早期数据可能在握手前被接受&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;API 接口（如支付接口）&lt;/td&gt;&#xA;          &lt;td&gt;攻击者重放旧接口实现重复操作&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;登录认证（token）&lt;/td&gt;&#xA;          &lt;td&gt;旧 token 被截获后仍可登录&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;智能设备通信&lt;/td&gt;&#xA;          &lt;td&gt;设备控制指令被复用（开锁、支付等）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-如何防御重放攻击&#34;&gt;&#xD;&#xA;  🛡️ 如何防御重放攻击？&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e5%a6%82%e4%bd%95%e9%98%b2%e5%be%a1%e9%87%8d%e6%94%be%e6%94%bb%e5%87%bb&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;-1-使用唯一请求-idnonce&#34;&gt;&#xD;&#xA;  ✅ 1. 使用唯一请求 ID（nonce）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-%e4%bd%bf%e7%94%a8%e5%94%af%e4%b8%80%e8%af%b7%e6%b1%82-idnonce&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个请求携带唯一的随机字符串&lt;/li&gt;&#xA;&lt;li&gt;服务端校验是否已处理过该 ID（如 Redis 去重）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-2-添加时间戳并设有效期&#34;&gt;&#xD;&#xA;  ✅ 2. 添加时间戳并设有效期&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-%e6%b7%bb%e5%8a%a0%e6%97%b6%e9%97%b4%e6%88%b3%e5%b9%b6%e8%ae%be%e6%9c%89%e6%95%88%e6%9c%9f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请求中携带当前时间&lt;/li&gt;&#xA;&lt;li&gt;服务器验证是否在允许的时间窗口内（如 2 分钟）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-3-使用-hmac-签名请求参数&#34;&gt;&#xD;&#xA;  ✅ 3. 使用 HMAC 签名请求参数&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-3-%e4%bd%bf%e7%94%a8-hmac-%e7%ad%be%e5%90%8d%e8%af%b7%e6%b1%82%e5%8f%82%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;客户端对请求参数 + 时间戳生成签名&lt;/li&gt;&#xA;&lt;li&gt;服务端验证签名是否正确、是否被篡改&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-4-使用-tls-防中间人监听基础防线&#34;&gt;&#xD;&#xA;  ✅ 4. 使用 TLS 防中间人监听（基础防线）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-4-%e4%bd%bf%e7%94%a8-tls-%e9%98%b2%e4%b8%ad%e9%97%b4%e4%ba%ba%e7%9b%91%e5%90%ac%e5%9f%ba%e7%a1%80%e9%98%b2%e7%ba%bf&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果攻击者无法截获原始数据，就不能重放&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;-5-对-0-rtt-请求做幂等性校验quictls-13-特别注意&#34;&gt;&#xD;&#xA;  ✅ 5. 对 0-RTT 请求做幂等性校验（QUIC/TLS 1.3 特别注意）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-5-%e5%af%b9-0-rtt-%e8%af%b7%e6%b1%82%e5%81%9a%e5%b9%82%e7%ad%89%e6%80%a7%e6%a0%a1%e9%aa%8cquictls-13-%e7%89%b9%e5%88%ab%e6%b3%a8%e6%84%8f&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;拒绝非幂等类型（如 POST/PUT）使用 0-RTT&lt;/li&gt;&#xA;&lt;li&gt;服务端缓存并验证历史 0-RTT 请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-补充幂等请求-vs-非幂等请求&#34;&gt;&#xD;&#xA;  💡 补充：幂等请求 vs 非幂等请求&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%a1%a5%e5%85%85%e5%b9%82%e7%ad%89%e8%af%b7%e6%b1%82-vs-%e9%9d%9e%e5%b9%82%e7%ad%89%e8%af%b7%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;请求类型&lt;/th&gt;&#xA;          &lt;th&gt;是否幂等&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;GET&lt;/td&gt;&#xA;          &lt;td&gt;✅&lt;/td&gt;&#xA;          &lt;td&gt;多次访问结果一样&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;POST&lt;/td&gt;&#xA;          &lt;td&gt;❌&lt;/td&gt;&#xA;          &lt;td&gt;多次发送可能产生副作用（如转账）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;PUT&lt;/td&gt;&#xA;          &lt;td&gt;✅&lt;/td&gt;&#xA;          &lt;td&gt;设置某值，多次是一样的&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DELETE&lt;/td&gt;&#xA;          &lt;td&gt;✅/❌&lt;/td&gt;&#xA;          &lt;td&gt;一般幂等，但有特殊情况除外&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-总结一句话&#34;&gt;&#xD;&#xA;  🎯 总结一句话：&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e6%80%bb%e7%bb%93%e4%b8%80%e5%8f%a5%e8%af%9d&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;重放攻击 = 重发旧的有效请求，欺骗系统重复执行操作。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
