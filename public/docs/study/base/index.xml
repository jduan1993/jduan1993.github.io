<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础 on 君宝的笔记</title>
    <link>http://localhost:1313/docs/study/base/</link>
    <description>Recent content in 基础 on 君宝的笔记</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <atom:link href="http://localhost:1313/docs/study/base/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 基础</title>
      <link>http://localhost:1313/docs/study/base/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/base/java/</guid>
      <description></description>
    </item>
    <item>
      <title>Python 基础</title>
      <link>http://localhost:1313/docs/study/base/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/base/python/</guid>
      <description>&lt;h3 id=&#34;1-python基础知识答案&#34;&gt;&#xD;&#xA;  1. Python基础知识答案&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-python%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e7%ad%94%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;数据类型&#34;&gt;&#xD;&#xA;  数据类型&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Python中有哪些内置数据类型？它们之间有什么区别？&lt;/strong&gt;&#xA;Python的内置数据类型主要包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;数字（Numbers）&lt;/strong&gt;: &lt;code&gt;int&lt;/code&gt; (整数), &lt;code&gt;float&lt;/code&gt; (浮点数), &lt;code&gt;complex&lt;/code&gt; (复数)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;布尔值（Boolean）&lt;/strong&gt;: &lt;code&gt;bool&lt;/code&gt; (True/False)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;字符串（String）&lt;/strong&gt;: &lt;code&gt;str&lt;/code&gt; (不可变的字符序列)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;列表（List）&lt;/strong&gt;: &lt;code&gt;list&lt;/code&gt; (可变的有序序列，元素可以是不同类型)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;元组（Tuple）&lt;/strong&gt;: &lt;code&gt;tuple&lt;/code&gt; (不可变的有序序列，元素可以是不同类型)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;字典（Dictionary）&lt;/strong&gt;: &lt;code&gt;dict&lt;/code&gt; (可变的无序键值对集合，键必须是不可变的，值可以是任意类型)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;集合（Set）&lt;/strong&gt;: &lt;code&gt;set&lt;/code&gt; (可变的无序不重复元素集合)。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;不可变集合（Frozen Set）&lt;/strong&gt;: &lt;code&gt;frozenset&lt;/code&gt; (不可变的无序不重复元素集合)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要区别在于：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;可变性（Mutability）&lt;/strong&gt;: 列表、字典、集合是&lt;strong&gt;可变&lt;/strong&gt;的，创建后可以修改；数字、字符串、元组、frozenset是&lt;strong&gt;不可变&lt;/strong&gt;的，创建后不能修改。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;有序性（Order）&lt;/strong&gt;: 列表、元组、字符串是有序的，可以通过索引访问；字典（Python 3.7+ 保证插入顺序，3.6及以前版本是无序的）、集合是无序的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;重复性（Duplication）&lt;/strong&gt;: 列表、元组、字符串可以包含重复元素；集合和frozenset不允许重复元素。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;键值对&lt;/strong&gt;: 只有字典是键值对形式的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;什么是可变（mutable）和不可变（immutable）对象？请举例说明。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;不可变对象（Immutable Objects）&lt;/strong&gt;: 一旦创建，其内存中的值就不能被改变。对不可变对象进行修改操作，实际上是创建了一个新的对象。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;: &lt;strong&gt;数字&lt;/strong&gt;、&lt;strong&gt;字符串&lt;/strong&gt;、&lt;strong&gt;元组&lt;/strong&gt;、&lt;strong&gt;frozenset&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- end list --&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 字符串是不可变的&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(id(s)) &lt;span style=&#34;color:#75715e&#34;&gt;# 查看内存地址&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 看起来修改了s，但实际上创建了一个新的字符串对象&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(id(s)) &lt;span style=&#34;color:#75715e&#34;&gt;# 内存地址已改变&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 元组是不可变的&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# t[0] = 10 # 这会报错：TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;可变对象（Mutable Objects）&lt;/strong&gt;: 创建后，可以对其内容进行修改，而无需改变其内存地址。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;例子&lt;/strong&gt;: &lt;strong&gt;列表&lt;/strong&gt;、&lt;strong&gt;字典&lt;/strong&gt;、&lt;strong&gt;集合&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- end list --&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 列表是可变的&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(id(l)) &lt;span style=&#34;color:#75715e&#34;&gt;# 查看内存地址&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 直接在原对象上修改&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(id(l)) &lt;span style=&#34;color:#75715e&#34;&gt;# 内存地址不变&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;深拷贝和浅拷贝有什么区别？何时使用它们？&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Saga 模式最佳实践</title>
      <link>http://localhost:1313/docs/study/base/saga-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/base/saga-best-practices/</guid>
      <description>&lt;h2 id=&#34;saga-服务设计的实践经验&#34;&gt;&#xD;&#xA;  Saga 服务设计的实践经验&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#saga-%e6%9c%8d%e5%8a%a1%e8%ae%be%e8%ae%a1%e7%9a%84%e5%ae%9e%e8%b7%b5%e7%bb%8f%e9%aa%8c&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;允许空补偿&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空补偿：原服务未执行，补偿服务执行了&lt;/li&gt;&#xA;&lt;li&gt;出现原因：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原服务 超时（丢包）&lt;/li&gt;&#xA;&lt;li&gt;Saga 事务触发 回滚&lt;/li&gt;&#xA;&lt;li&gt;未收到 原服务请求，先收到 补偿请求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所以服务设计时需要允许空补偿, 即没有找到要补偿的业务主键时返回补偿成功并将原业务主键记录下来&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;防悬挂控制&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;悬挂：补偿服务 比 原服务 先执行&lt;/li&gt;&#xA;&lt;li&gt;出现原因：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原服务 超时（拥堵）&lt;/li&gt;&#xA;&lt;li&gt;Saga 事务回滚，触发 回滚&lt;/li&gt;&#xA;&lt;li&gt;拥堵的 原服务 到达&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所以要检查当前业务主键是否已经在空补偿记录下来的业务主键中存在，如果存在则要拒绝服务的执行&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;幂等控制&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原服务与补偿服务都需要保证幂等性, 由于网络可能超时, 可以设置重试策略，重试发生时要通过幂等控制避免业务数据重复更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;缺乏隔离性的应对&#34;&gt;&#xD;&#xA;  缺乏隔离性的应对&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%ba%e4%b9%8f%e9%9a%94%e7%a6%bb%e6%80%a7%e7%9a%84%e5%ba%94%e5%af%b9&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于 Saga 事务不保证隔离性, 在极端情况下可能由于脏写无法完成回滚操作, 比如举一个极端的例子, 分布式事务内先给用户 A 充值, 然后给用户 B 扣减余额, 如果在给 A 用户充值成功, 在事务提交以前, A 用户把余额消费掉了, 如果事务发生回滚, 这时则没有办法进行补偿了。这就是缺乏隔离性造成的典型的问题, 实践中一般的应对方法是：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;业务流程设计时遵循“宁可长款, 不可短款”的原则, 长款意思是客户少了钱机构多了钱, 以机构信誉可以给客户退款, 反之则是短款, 少的钱可能追不回来了。所以在业务流程设计上一定是先扣款。&lt;/li&gt;&#xA;&lt;li&gt;有些业务场景可以允许让业务最终成功, 在回滚不了的情况下可以继续重试完成后面的流程, 所以状态机引擎除了提供“回滚”能力还需要提供“向前”恢复上下文继续执行的能力, 让业务最终执行成功, 达到最终一致性的目的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;性能优化&#34;&gt;&#xD;&#xA;  性能优化&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;配置客户端参数&lt;code&gt;client.rm.report.success.enable=false&lt;/code&gt;，可以在当分支事务执行成功时不上报分支状态到 server，从而提升性能。&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;当上一个分支事务的状态还没有上报的时候，下一个分支事务已注册，可以认为上一个实际已成功&lt;/p&gt;</description>
    </item>
    <item>
      <title>算法</title>
      <link>http://localhost:1313/docs/study/base/algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/base/algorithm/</guid>
      <description>&lt;h1 id=&#34;-20-个最常见算法题型--解题思路--模板java版&#34;&gt;&#xD;&#xA;  ✅ 20 个最常见算法题型 + 解题思路 &amp;amp; 模板（Java版）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-20-%e4%b8%aa%e6%9c%80%e5%b8%b8%e8%a7%81%e7%ae%97%e6%b3%95%e9%a2%98%e5%9e%8b--%e8%a7%a3%e9%a2%98%e6%80%9d%e8%b7%af--%e6%a8%a1%e6%9d%bfjava%e7%89%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;适合力扣 0-200 题重点训练，也适用于面试快速准备&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-1-两数之和哈希表&#34;&gt;&#xD;&#xA;  🧩 1. 两数之和（哈希表）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c%e5%93%88%e5%b8%8c%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;题型&lt;/strong&gt;：数组 + 查找&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// LC 1. Two Sum&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;twoSum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; nums, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; target) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; nums.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; complement &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (map.&lt;span style=&#34;color:#a6e22e&#34;&gt;containsKey&lt;/span&gt;(complement))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;{map.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(complement), i};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        map.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(nums&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-2-三数之和排序--双指针&#34;&gt;&#xD;&#xA;  🧩 2. 三数之和（排序 + 双指针）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-%e4%b8%89%e6%95%b0%e4%b9%8b%e5%92%8c%e6%8e%92%e5%ba%8f--%e5%8f%8c%e6%8c%87%e9%92%88&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h2 id=&#34;-解题思路最佳解&#34;&gt;&#xD;&#xA;  ✅ 解题思路（最佳解）&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-%e8%a7%a3%e9%a2%98%e6%80%9d%e8%b7%af%e6%9c%80%e4%bd%b3%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;1-先排序排序--双指针的前提&#34;&gt;&#xD;&#xA;  1. &lt;strong&gt;先排序（排序 + 双指针的前提）&lt;/strong&gt;&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e5%85%88%e6%8e%92%e5%ba%8f%e6%8e%92%e5%ba%8f--%e5%8f%8c%e6%8c%87%e9%92%88%e7%9a%84%e5%89%8d%e6%8f%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;排序是为了：&lt;/p&gt;</description>
    </item>
    <item>
      <title>主流许可证对比</title>
      <link>http://localhost:1313/docs/study/base/license-comparison/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/study/base/license-comparison/</guid>
      <description>&lt;h2 id=&#34;开源许可证对比表&#34;&gt;&#xD;&#xA;  开源许可证对比表&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81%e5%af%b9%e6%af%94%e8%a1%a8&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;许可证名称&lt;/th&gt;&#xA;          &lt;th&gt;类型&lt;/th&gt;&#xA;          &lt;th&gt;专利授权&lt;/th&gt;&#xA;          &lt;th&gt;Copyleft 强度&lt;/th&gt;&#xA;          &lt;th&gt;商业兼容性&lt;/th&gt;&#xA;          &lt;th&gt;与 GPL 兼容性&lt;/th&gt;&#xA;          &lt;th&gt;适用场景&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;MIT&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;小型项目、库&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Apache 2.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;✅ 有&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;企业级项目、涉及专利&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;GPL v3.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;强 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;✅ 有&lt;/td&gt;&#xA;          &lt;td&gt;✅ 强&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 限制&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;开源项目、需强制开源&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;GPL v2.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;强 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 强&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 限制&lt;/td&gt;&#xA;          &lt;td&gt;❌ 否&lt;/td&gt;&#xA;          &lt;td&gt;传统开源项目&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;AGPL v3.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;强 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;✅ 有&lt;/td&gt;&#xA;          &lt;td&gt;✅ 最强&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 限制&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;SaaS、网络服务&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;LGPL v2.1&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;弱 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 弱&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;库、插件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;BSD 2-Clause&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;系统级组件、商业集成&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;BSD 3-Clause&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;商业软件、需署名保护&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Boost 1.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;宽松&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;C++ 库、工具链&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;CC0 1.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;公共领域&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;❌ 无&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;数据集、内容共享&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;EPL 2.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;弱 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;✅ 有&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 弱&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;企业软件、模块化项目&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;MPL 2.0&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;弱 Copyleft&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 部分&lt;/td&gt;&#xA;          &lt;td&gt;⚠️ 弱&lt;/td&gt;&#xA;          &lt;td&gt;✅ 高&lt;/td&gt;&#xA;          &lt;td&gt;✅ 是&lt;/td&gt;&#xA;          &lt;td&gt;浏览器、混合授权项目&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
  </channel>
</rss>
